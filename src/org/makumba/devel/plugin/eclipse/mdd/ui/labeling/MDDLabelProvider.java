/*
* generated by Xtext
*/
package org.makumba.devel.plugin.eclipse.mdd.ui.labeling;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.makumba.devel.plugin.eclipse.mdd.editor.*;

import com.google.inject.Inject;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class MDDLabelProvider extends DefaultEObjectLabelProvider {
	
	@Inject
	public MDDLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}
	
	//TODO: add images
	
	StyledString text(dataDefinition dd){
		StyledString result = new StyledString();
		//TODO: get the resource path relative to dataDefinition folder
		String mddname = dd.eResource().getURI().toString().replace("platform:/resource/", "");
		mddname = mddname.replaceAll("/", ".");
		result.append(mddname);
		return result;
	}

	StyledString text(titleDeclaration title){
		//TODO: fix title
		StyledString result = new StyledString();
		result.append(title.getTitle().getName());
		return result;
	}

	StyledString text(fieldDeclaration field){
		StyledString result = new StyledString();
		result.append(field.getName());
		fieldType fieldType= field.getTypedef();
		result.append(" : " + getDescription(fieldType),StyledString.QUALIFIER_STYLER );
		return result;
		
	}
	
	StyledString text(nativeValidationRuleDeclaration validation){
		StyledString result = new StyledString();
		result.append(validation.getField().getName() + ".", StyledString.DECORATIONS_STYLER);
		result.append(validation.getType());
		result.append(" : " + validation.getMessage(),StyledString.QUALIFIER_STYLER);
		return result;
	}
	
	StyledString text(subFieldDeclaration field){
		StyledString result  = new StyledString();
		result.append(field.getSubFieldOf().getName() + "->", StyledString.DECORATIONS_STYLER);
		Object text = doGetText(field.getD());
		if(text instanceof String)
			result.append((String)text);
		else if (text instanceof StyledString)
			result.append((StyledString)text);
		return result;
	}
	
	private String getDescription(fieldType fieldType){
		if(fieldType instanceof charType)
			return "char" + (((charType)fieldType).getLength()>0?" [" + ((charType)fieldType).getLength() + "]":"");
		else if(fieldType instanceof charEnum)
			return "charEnum [" + (((charEnum)fieldType).getValues().size()) + "]";
		else if(fieldType instanceof intEnum)
			return "intEnum [" + (((intEnum)fieldType).getValues().size()) + "]";
		//TODO: add pointer and set
		else if(fieldType.getTypeDec()!=null){
			return fieldType.getTypeDec().getName() + " -> " + getDescription(fieldType.getTypeDec().getFieldType());
		}
		return fieldType.getType();
	}
	
	StyledString text(enumValue value){
		StyledString result = new StyledString();
		result.append(value.getName());
		result.append(" : " + value.getValue(), StyledString.QUALIFIER_STYLER);
		return result;
	}
	
	StyledString text(validationRuleDeclaration rule){
		StyledString result = new StyledString();
		result.append(rule.getName() + getArguments(rule.getArgs()));
		result.append(" : " + rule.getErrorMessage().getMessage(), StyledString.QUALIFIER_STYLER);
		return result; 
	}
	
	String getArguments(functionArguments args){
		String result = "("; 
		for(String a : args.getA())
			result+=(a + ",");
		result=result.replaceAll(",$", "");
		return result + ")";
	}
	
	StyledString text(functionDeclaration funct){
		StyledString result = new StyledString();
		if(funct.getB()!=null)
			result.append(funct.getB() + "%",StyledString.DECORATIONS_STYLER);
		result.append(funct.getName());
		String args = ""; 
		for(functionArgumentBody fab : funct.getArg().getF())
			args+=(fab.getName() + ",");
		if(!args.equals(""))
			args=args.replaceAll(",$", "");
		result.append("(" + args + ")");
		if(funct.getM()!=null)
			result.append(" : " + funct.getM().getMessage(), StyledString.QUALIFIER_STYLER);
		return result;		
	}
	
	StyledString text(typeDeclaration type){
		StyledString result = new StyledString();
		result.append(type.getName());
		result.append(" : " + getDescription(type.getFieldType()), StyledString.QUALIFIER_STYLER);
		return result;	
	}
/*
	//Labels and icons can be computed like this:
	
	String text(MyModel ele) {
	  return "my "+ele.getName();
	}
	 
    String image(MyModel ele) {
      return "MyModel.gif";
    }
*/
}
