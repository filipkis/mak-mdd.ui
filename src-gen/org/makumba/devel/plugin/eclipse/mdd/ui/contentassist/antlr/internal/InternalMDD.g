/*
* generated by Xtext
*/
grammar InternalMDD;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.makumba.devel.plugin.eclipse.mdd.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.makumba.devel.plugin.eclipse.mdd.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.makumba.devel.plugin.eclipse.mdd.services.MDDGrammarAccess;

}

@parser::members {
 
 	private MDDGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MDDGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuledataDefinition
entryRuledataDefinition 
:
{ before(grammarAccess.getDataDefinitionRule()); }
	 ruledataDefinition
{ after(grammarAccess.getDataDefinitionRule()); } 
	 EOF 
;

// Rule dataDefinition
ruledataDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDataDefinitionAccess().getGroup()); }
(rule__DataDefinition__Group__0)
{ after(grammarAccess.getDataDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuledeclaration
entryRuledeclaration 
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruledeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule declaration
ruledeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationAccess().getAlternatives()); }
(rule__Declaration__Alternatives)
{ after(grammarAccess.getDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulefieldDeclaration
entryRulefieldDeclaration 
:
{ before(grammarAccess.getFieldDeclarationRule()); }
	 rulefieldDeclaration
{ after(grammarAccess.getFieldDeclarationRule()); } 
	 EOF 
;

// Rule fieldDeclaration
rulefieldDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFieldDeclarationAccess().getGroup()); }
(rule__FieldDeclaration__Group__0)
{ after(grammarAccess.getFieldDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemodifiers
entryRulemodifiers 
:
{ before(grammarAccess.getModifiersRule()); }
	 rulemodifiers
{ after(grammarAccess.getModifiersRule()); } 
	 EOF 
;

// Rule modifiers
rulemodifiers
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModifiersAccess().getUnorderedGroup()); }
(rule__Modifiers__UnorderedGroup)
{ after(grammarAccess.getModifiersAccess().getUnorderedGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulefieldType
entryRulefieldType 
:
{ before(grammarAccess.getFieldTypeRule()); }
	 rulefieldType
{ after(grammarAccess.getFieldTypeRule()); } 
	 EOF 
;

// Rule fieldType
rulefieldType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFieldTypeAccess().getAlternatives()); }
(rule__FieldType__Alternatives)
{ after(grammarAccess.getFieldTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleintEnum
entryRuleintEnum 
:
{ before(grammarAccess.getIntEnumRule()); }
	 ruleintEnum
{ after(grammarAccess.getIntEnumRule()); } 
	 EOF 
;

// Rule intEnum
ruleintEnum
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntEnumAccess().getGroup()); }
(rule__IntEnum__Group__0)
{ after(grammarAccess.getIntEnumAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulecharEnum
entryRulecharEnum 
:
{ before(grammarAccess.getCharEnumRule()); }
	 rulecharEnum
{ after(grammarAccess.getCharEnumRule()); } 
	 EOF 
;

// Rule charEnum
rulecharEnum
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCharEnumAccess().getGroup()); }
(rule__CharEnum__Group__0)
{ after(grammarAccess.getCharEnumAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleenumValue
entryRuleenumValue 
:
{ before(grammarAccess.getEnumValueRule()); }
	 ruleenumValue
{ after(grammarAccess.getEnumValueRule()); } 
	 EOF 
;

// Rule enumValue
ruleenumValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumValueAccess().getGroup()); }
(rule__EnumValue__Group__0)
{ after(grammarAccess.getEnumValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulecharType
entryRulecharType 
:
{ before(grammarAccess.getCharTypeRule()); }
	 rulecharType
{ after(grammarAccess.getCharTypeRule()); } 
	 EOF 
;

// Rule charType
rulecharType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCharTypeAccess().getGroup()); }
(rule__CharType__Group__0)
{ after(grammarAccess.getCharTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulepointer
entryRulepointer 
:
{ before(grammarAccess.getPointerRule()); }
	 rulepointer
{ after(grammarAccess.getPointerRule()); } 
	 EOF 
;

// Rule pointer
rulepointer
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPointerAccess().getGroup()); }
(rule__Pointer__Group__0)
{ after(grammarAccess.getPointerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesetType
entryRulesetType 
:
{ before(grammarAccess.getSetTypeRule()); }
	 rulesetType
{ after(grammarAccess.getSetTypeRule()); } 
	 EOF 
;

// Rule setType
rulesetType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSetTypeAccess().getGroup()); }
(rule__SetType__Group__0)
{ after(grammarAccess.getSetTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesubFieldDeclaration
entryRulesubFieldDeclaration 
:
{ before(grammarAccess.getSubFieldDeclarationRule()); }
	 rulesubFieldDeclaration
{ after(grammarAccess.getSubFieldDeclarationRule()); } 
	 EOF 
;

// Rule subFieldDeclaration
rulesubFieldDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubFieldDeclarationAccess().getGroup()); }
(rule__SubFieldDeclaration__Group__0)
{ after(grammarAccess.getSubFieldDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuletype
entryRuletype 
:
{ before(grammarAccess.getTypeRule()); }
	 ruletype
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule type
ruletype
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getGroup()); }
(rule__Type__Group__0)
{ after(grammarAccess.getTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuletitleDeclaration
entryRuletitleDeclaration 
:
{ before(grammarAccess.getTitleDeclarationRule()); }
	 ruletitleDeclaration
{ after(grammarAccess.getTitleDeclarationRule()); } 
	 EOF 
;

// Rule titleDeclaration
ruletitleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTitleDeclarationAccess().getGroup()); }
(rule__TitleDeclaration__Group__0)
{ after(grammarAccess.getTitleDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuletitle
entryRuletitle 
:
{ before(grammarAccess.getTitleRule()); }
	 ruletitle
{ after(grammarAccess.getTitleRule()); } 
	 EOF 
;

// Rule title
ruletitle
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTitleAccess().getAlternatives()); }
(rule__Title__Alternatives)
{ after(grammarAccess.getTitleAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleincludeDeclaration
entryRuleincludeDeclaration 
:
{ before(grammarAccess.getIncludeDeclarationRule()); }
	 ruleincludeDeclaration
{ after(grammarAccess.getIncludeDeclarationRule()); } 
	 EOF 
;

// Rule includeDeclaration
ruleincludeDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIncludeDeclarationAccess().getGroup()); }
(rule__IncludeDeclaration__Group__0)
{ after(grammarAccess.getIncludeDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuletypeDeclaration
entryRuletypeDeclaration 
:
{ before(grammarAccess.getTypeDeclarationRule()); }
	 ruletypeDeclaration
{ after(grammarAccess.getTypeDeclarationRule()); } 
	 EOF 
;

// Rule typeDeclaration
ruletypeDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeDeclarationAccess().getGroup()); }
(rule__TypeDeclaration__Group__0)
{ after(grammarAccess.getTypeDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulevalidationRuleDeclaration
entryRulevalidationRuleDeclaration 
:
{ before(grammarAccess.getValidationRuleDeclarationRule()); }
	 rulevalidationRuleDeclaration
{ after(grammarAccess.getValidationRuleDeclarationRule()); } 
	 EOF 
;

// Rule validationRuleDeclaration
rulevalidationRuleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValidationRuleDeclarationAccess().getGroup()); }
(rule__ValidationRuleDeclaration__Group__0)
{ after(grammarAccess.getValidationRuleDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulecomparisonValidationRuleDeclaration
entryRulecomparisonValidationRuleDeclaration 
:
{ before(grammarAccess.getComparisonValidationRuleDeclarationRule()); }
	 rulecomparisonValidationRuleDeclaration
{ after(grammarAccess.getComparisonValidationRuleDeclarationRule()); } 
	 EOF 
;

// Rule comparisonValidationRuleDeclaration
rulecomparisonValidationRuleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonValidationRuleDeclarationAccess().getGroup()); }
(rule__ComparisonValidationRuleDeclaration__Group__0)
{ after(grammarAccess.getComparisonValidationRuleDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulecomparisonExpression
entryRulecomparisonExpression 
:
{ before(grammarAccess.getComparisonExpressionRule()); }
	 rulecomparisonExpression
{ after(grammarAccess.getComparisonExpressionRule()); } 
	 EOF 
;

// Rule comparisonExpression
rulecomparisonExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonExpressionAccess().getGroup()); }
(rule__ComparisonExpression__Group__0)
{ after(grammarAccess.getComparisonExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulecomparisonPart
entryRulecomparisonPart 
:
{ before(grammarAccess.getComparisonPartRule()); }
	 rulecomparisonPart
{ after(grammarAccess.getComparisonPartRule()); } 
	 EOF 
;

// Rule comparisonPart
rulecomparisonPart
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonPartAccess().getAlternatives()); }
(rule__ComparisonPart__Alternatives)
{ after(grammarAccess.getComparisonPartAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleupperFunction
entryRuleupperFunction 
:
{ before(grammarAccess.getUpperFunctionRule()); }
	 ruleupperFunction
{ after(grammarAccess.getUpperFunctionRule()); } 
	 EOF 
;

// Rule upperFunction
ruleupperFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUpperFunctionAccess().getGroup()); }
(rule__UpperFunction__Group__0)
{ after(grammarAccess.getUpperFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulelowerFunction
entryRulelowerFunction 
:
{ before(grammarAccess.getLowerFunctionRule()); }
	 rulelowerFunction
{ after(grammarAccess.getLowerFunctionRule()); } 
	 EOF 
;

// Rule lowerFunction
rulelowerFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLowerFunctionAccess().getGroup()); }
(rule__LowerFunction__Group__0)
{ after(grammarAccess.getLowerFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleoperator
entryRuleoperator 
:
{ before(grammarAccess.getOperatorRule()); }
	 ruleoperator
{ after(grammarAccess.getOperatorRule()); } 
	 EOF 
;

// Rule operator
ruleoperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperatorAccess().getAlternatives()); }
(rule__Operator__Alternatives)
{ after(grammarAccess.getOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuledateConstant
entryRuledateConstant 
:
{ before(grammarAccess.getDateConstantRule()); }
	 ruledateConstant
{ after(grammarAccess.getDateConstantRule()); } 
	 EOF 
;

// Rule dateConstant
ruledateConstant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDateConstantAccess().getAlternatives()); }
(rule__DateConstant__Alternatives)
{ after(grammarAccess.getDateConstantAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuledateFunction
entryRuledateFunction 
:
{ before(grammarAccess.getDateFunctionRule()); }
	 ruledateFunction
{ after(grammarAccess.getDateFunctionRule()); } 
	 EOF 
;

// Rule dateFunction
ruledateFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDateFunctionAccess().getGroup()); }
(rule__DateFunction__Group__0)
{ after(grammarAccess.getDateFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuledateFunctionArgument
entryRuledateFunctionArgument 
:
{ before(grammarAccess.getDateFunctionArgumentRule()); }
	 ruledateFunctionArgument
{ after(grammarAccess.getDateFunctionArgumentRule()); } 
	 EOF 
;

// Rule dateFunctionArgument
ruledateFunctionArgument
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDateFunctionArgumentAccess().getGroup()); }
(rule__DateFunctionArgument__Group__0)
{ after(grammarAccess.getDateFunctionArgumentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuledateFunctionArgumentMember
entryRuledateFunctionArgumentMember 
:
{ before(grammarAccess.getDateFunctionArgumentMemberRule()); }
	 ruledateFunctionArgumentMember
{ after(grammarAccess.getDateFunctionArgumentMemberRule()); } 
	 EOF 
;

// Rule dateFunctionArgumentMember
ruledateFunctionArgumentMember
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDateFunctionArgumentMemberAccess().getAlternatives()); }
(rule__DateFunctionArgumentMember__Alternatives)
{ after(grammarAccess.getDateFunctionArgumentMemberAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulerangeValidationRuleDeclaration
entryRulerangeValidationRuleDeclaration 
:
{ before(grammarAccess.getRangeValidationRuleDeclarationRule()); }
	 rulerangeValidationRuleDeclaration
{ after(grammarAccess.getRangeValidationRuleDeclarationRule()); } 
	 EOF 
;

// Rule rangeValidationRuleDeclaration
rulerangeValidationRuleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRangeValidationRuleDeclarationAccess().getGroup()); }
(rule__RangeValidationRuleDeclaration__Group__0)
{ after(grammarAccess.getRangeValidationRuleDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleregexValidationRuleDeclaration
entryRuleregexValidationRuleDeclaration 
:
{ before(grammarAccess.getRegexValidationRuleDeclarationRule()); }
	 ruleregexValidationRuleDeclaration
{ after(grammarAccess.getRegexValidationRuleDeclarationRule()); } 
	 EOF 
;

// Rule regexValidationRuleDeclaration
ruleregexValidationRuleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRegexValidationRuleDeclarationAccess().getGroup()); }
(rule__RegexValidationRuleDeclaration__Group__0)
{ after(grammarAccess.getRegexValidationRuleDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulerange
entryRulerange 
:
{ before(grammarAccess.getRangeRule()); }
	 rulerange
{ after(grammarAccess.getRangeRule()); } 
	 EOF 
;

// Rule range
rulerange
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRangeAccess().getGroup()); }
(rule__Range__Group__0)
{ after(grammarAccess.getRangeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulerangeBound
entryRulerangeBound 
:
{ before(grammarAccess.getRangeBoundRule()); }
	 rulerangeBound
{ after(grammarAccess.getRangeBoundRule()); } 
	 EOF 
;

// Rule rangeBound
rulerangeBound
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRangeBoundAccess().getAlternatives()); }
(rule__RangeBound__Alternatives)
{ after(grammarAccess.getRangeBoundAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleuniquenessValidationRuleDeclaration
entryRuleuniquenessValidationRuleDeclaration 
:
{ before(grammarAccess.getUniquenessValidationRuleDeclarationRule()); }
	 ruleuniquenessValidationRuleDeclaration
{ after(grammarAccess.getUniquenessValidationRuleDeclarationRule()); } 
	 EOF 
;

// Rule uniquenessValidationRuleDeclaration
ruleuniquenessValidationRuleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUniquenessValidationRuleDeclarationAccess().getGroup()); }
(rule__UniquenessValidationRuleDeclaration__Group__0)
{ after(grammarAccess.getUniquenessValidationRuleDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleerrorMessage
entryRuleerrorMessage 
:
{ before(grammarAccess.getErrorMessageRule()); }
	 ruleerrorMessage
{ after(grammarAccess.getErrorMessageRule()); } 
	 EOF 
;

// Rule errorMessage
ruleerrorMessage
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getErrorMessageAccess().getGroup()); }
(rule__ErrorMessage__Group__0)
{ after(grammarAccess.getErrorMessageAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulenativeValidationRuleDeclaration
entryRulenativeValidationRuleDeclaration 
:
{ before(grammarAccess.getNativeValidationRuleDeclarationRule()); }
	 rulenativeValidationRuleDeclaration
{ after(grammarAccess.getNativeValidationRuleDeclarationRule()); } 
	 EOF 
;

// Rule nativeValidationRuleDeclaration
rulenativeValidationRuleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNativeValidationRuleDeclarationAccess().getGroup()); }
(rule__NativeValidationRuleDeclaration__Group__0)
{ after(grammarAccess.getNativeValidationRuleDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulefunctionDeclaration
entryRulefunctionDeclaration 
:
{ before(grammarAccess.getFunctionDeclarationRule()); }
	 rulefunctionDeclaration
{ after(grammarAccess.getFunctionDeclarationRule()); } 
	 EOF 
;

// Rule functionDeclaration
rulefunctionDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
(rule__FunctionDeclaration__Group__0)
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulefunctionArgumentDeclaration
entryRulefunctionArgumentDeclaration 
:
{ before(grammarAccess.getFunctionArgumentDeclarationRule()); }
	 rulefunctionArgumentDeclaration
{ after(grammarAccess.getFunctionArgumentDeclarationRule()); } 
	 EOF 
;

// Rule functionArgumentDeclaration
rulefunctionArgumentDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionArgumentDeclarationAccess().getGroup()); }
(rule__FunctionArgumentDeclaration__Group__0)
{ after(grammarAccess.getFunctionArgumentDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulefunctionArgumentBody
entryRulefunctionArgumentBody 
:
{ before(grammarAccess.getFunctionArgumentBodyRule()); }
	 rulefunctionArgumentBody
{ after(grammarAccess.getFunctionArgumentBodyRule()); } 
	 EOF 
;

// Rule functionArgumentBody
rulefunctionArgumentBody
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getGroup()); }
(rule__FunctionArgumentBody__Group__0)
{ after(grammarAccess.getFunctionArgumentBodyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulefunctionCall
entryRulefunctionCall 
:
{ before(grammarAccess.getFunctionCallRule()); }
	 rulefunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule functionCall
rulefunctionCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
(rule__FunctionCall__Group__0)
{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulefunctionArguments
entryRulefunctionArguments 
:
{ before(grammarAccess.getFunctionArgumentsRule()); }
	 rulefunctionArguments
{ after(grammarAccess.getFunctionArgumentsRule()); } 
	 EOF 
;

// Rule functionArguments
rulefunctionArguments
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionArgumentsAccess().getGroup()); }
(rule__FunctionArguments__Group__0)
{ after(grammarAccess.getFunctionArgumentsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulefunctionBody
entryRulefunctionBody 
:
{ before(grammarAccess.getFunctionBodyRule()); }
	 rulefunctionBody
{ after(grammarAccess.getFunctionBodyRule()); } 
	 EOF 
;

// Rule functionBody
rulefunctionBody
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionBodyAccess().getGroup()); }
(rule__FunctionBody__Group__0)
{ after(grammarAccess.getFunctionBodyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulestatement
entryRulestatement 
:
{ before(grammarAccess.getStatementRule()); }
	 rulestatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule statement
rulestatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getQueryRuleParserRuleCall()); }
	rulequeryRule
{ after(grammarAccess.getStatementAccess().getQueryRuleParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleunionRule
entryRuleunionRule 
:
{ before(grammarAccess.getUnionRuleRule()); }
	 ruleunionRule
{ after(grammarAccess.getUnionRuleRule()); } 
	 EOF 
;

// Rule unionRule
ruleunionRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnionRuleAccess().getGroup()); }
(rule__UnionRule__Group__0)
{ after(grammarAccess.getUnionRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulequeryRule
entryRulequeryRule 
:
{ before(grammarAccess.getQueryRuleRule()); }
	 rulequeryRule
{ after(grammarAccess.getQueryRuleRule()); } 
	 EOF 
;

// Rule queryRule
rulequeryRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQueryRuleAccess().getGroup()); }
(rule__QueryRule__Group__0)
{ after(grammarAccess.getQueryRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleselectFrom
entryRuleselectFrom 
:
{ before(grammarAccess.getSelectFromRule()); }
	 ruleselectFrom
{ after(grammarAccess.getSelectFromRule()); } 
	 EOF 
;

// Rule selectFrom
ruleselectFrom
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectFromAccess().getGroup()); }
(rule__SelectFrom__Group__0)
{ after(grammarAccess.getSelectFromAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleselectClause
entryRuleselectClause 
:
{ before(grammarAccess.getSelectClauseRule()); }
	 ruleselectClause
{ after(grammarAccess.getSelectClauseRule()); } 
	 EOF 
;

// Rule selectClause
ruleselectClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectClauseAccess().getGroup()); }
(rule__SelectClause__Group__0)
{ after(grammarAccess.getSelectClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulenewExpression
entryRulenewExpression 
:
{ before(grammarAccess.getNewExpressionRule()); }
	 rulenewExpression
{ after(grammarAccess.getNewExpressionRule()); } 
	 EOF 
;

// Rule newExpression
rulenewExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNewExpressionAccess().getGroup()); }
(rule__NewExpression__Group__0)
{ after(grammarAccess.getNewExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleselectObject
entryRuleselectObject 
:
{ before(grammarAccess.getSelectObjectRule()); }
	 ruleselectObject
{ after(grammarAccess.getSelectObjectRule()); } 
	 EOF 
;

// Rule selectObject
ruleselectObject
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectObjectAccess().getGroup()); }
(rule__SelectObject__Group__0)
{ after(grammarAccess.getSelectObjectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulefromClause
entryRulefromClause 
:
{ before(grammarAccess.getFromClauseRule()); }
	 rulefromClause
{ after(grammarAccess.getFromClauseRule()); } 
	 EOF 
;

// Rule fromClause
rulefromClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFromClauseAccess().getGroup()); }
(rule__FromClause__Group__0)
{ after(grammarAccess.getFromClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulefromJoin
entryRulefromJoin 
:
{ before(grammarAccess.getFromJoinRule()); }
	 rulefromJoin
{ after(grammarAccess.getFromJoinRule()); } 
	 EOF 
;

// Rule fromJoin
rulefromJoin
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFromJoinAccess().getGroup()); }
(rule__FromJoin__Group__0)
{ after(grammarAccess.getFromJoinAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulewithClause
entryRulewithClause 
:
{ before(grammarAccess.getWithClauseRule()); }
	 rulewithClause
{ after(grammarAccess.getWithClauseRule()); } 
	 EOF 
;

// Rule withClause
rulewithClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWithClauseAccess().getGroup()); }
(rule__WithClause__Group__0)
{ after(grammarAccess.getWithClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulefromRange
entryRulefromRange 
:
{ before(grammarAccess.getFromRangeRule()); }
	 rulefromRange
{ after(grammarAccess.getFromRangeRule()); } 
	 EOF 
;

// Rule fromRange
rulefromRange
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFromRangeAccess().getAlternatives()); }
(rule__FromRange__Alternatives)
{ after(grammarAccess.getFromRangeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulefromClassOrOuterQueryPath
entryRulefromClassOrOuterQueryPath 
:
{ before(grammarAccess.getFromClassOrOuterQueryPathRule()); }
	 rulefromClassOrOuterQueryPath
{ after(grammarAccess.getFromClassOrOuterQueryPathRule()); } 
	 EOF 
;

// Rule fromClassOrOuterQueryPath
rulefromClassOrOuterQueryPath
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFromClassOrOuterQueryPathAccess().getGroup()); }
(rule__FromClassOrOuterQueryPath__Group__0)
{ after(grammarAccess.getFromClassOrOuterQueryPathAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleinCollectionElementsDeclaration
entryRuleinCollectionElementsDeclaration 
:
{ before(grammarAccess.getInCollectionElementsDeclarationRule()); }
	 ruleinCollectionElementsDeclaration
{ after(grammarAccess.getInCollectionElementsDeclarationRule()); } 
	 EOF 
;

// Rule inCollectionElementsDeclaration
ruleinCollectionElementsDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInCollectionElementsDeclarationAccess().getGroup()); }
(rule__InCollectionElementsDeclaration__Group__0)
{ after(grammarAccess.getInCollectionElementsDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleasAlias
entryRuleasAlias 
:
{ before(grammarAccess.getAsAliasRule()); }
	 ruleasAlias
{ after(grammarAccess.getAsAliasRule()); } 
	 EOF 
;

// Rule asAlias
ruleasAlias
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAsAliasAccess().getGroup()); }
(rule__AsAlias__Group__0)
{ after(grammarAccess.getAsAliasAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulepropertyFetch
entryRulepropertyFetch 
:
{ before(grammarAccess.getPropertyFetchRule()); }
	 rulepropertyFetch
{ after(grammarAccess.getPropertyFetchRule()); } 
	 EOF 
;

// Rule propertyFetch
rulepropertyFetch
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyFetchAccess().getGroup()); }
(rule__PropertyFetch__Group__0)
{ after(grammarAccess.getPropertyFetchAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulegroupByClause
entryRulegroupByClause 
:
{ before(grammarAccess.getGroupByClauseRule()); }
	 rulegroupByClause
{ after(grammarAccess.getGroupByClauseRule()); } 
	 EOF 
;

// Rule groupByClause
rulegroupByClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGroupByClauseAccess().getGroup()); }
(rule__GroupByClause__Group__0)
{ after(grammarAccess.getGroupByClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleorderByClause
entryRuleorderByClause 
:
{ before(grammarAccess.getOrderByClauseRule()); }
	 ruleorderByClause
{ after(grammarAccess.getOrderByClauseRule()); } 
	 EOF 
;

// Rule orderByClause
ruleorderByClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrderByClauseAccess().getGroup()); }
(rule__OrderByClause__Group__0)
{ after(grammarAccess.getOrderByClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleorderElement
entryRuleorderElement 
:
{ before(grammarAccess.getOrderElementRule()); }
	 ruleorderElement
{ after(grammarAccess.getOrderElementRule()); } 
	 EOF 
;

// Rule orderElement
ruleorderElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrderElementAccess().getGroup()); }
(rule__OrderElement__Group__0)
{ after(grammarAccess.getOrderElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleascendingOrDescending
entryRuleascendingOrDescending 
:
{ before(grammarAccess.getAscendingOrDescendingRule()); }
	 ruleascendingOrDescending
{ after(grammarAccess.getAscendingOrDescendingRule()); } 
	 EOF 
;

// Rule ascendingOrDescending
ruleascendingOrDescending
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAscendingOrDescendingAccess().getAlternatives()); }
(rule__AscendingOrDescending__Alternatives)
{ after(grammarAccess.getAscendingOrDescendingAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulehavingClause
entryRulehavingClause 
:
{ before(grammarAccess.getHavingClauseRule()); }
	 rulehavingClause
{ after(grammarAccess.getHavingClauseRule()); } 
	 EOF 
;

// Rule havingClause
rulehavingClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHavingClauseAccess().getGroup()); }
(rule__HavingClause__Group__0)
{ after(grammarAccess.getHavingClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulewhereClause
entryRulewhereClause 
:
{ before(grammarAccess.getWhereClauseRule()); }
	 rulewhereClause
{ after(grammarAccess.getWhereClauseRule()); } 
	 EOF 
;

// Rule whereClause
rulewhereClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhereClauseAccess().getGroup()); }
(rule__WhereClause__Group__0)
{ after(grammarAccess.getWhereClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleselectedPropertiesList
entryRuleselectedPropertiesList 
:
{ before(grammarAccess.getSelectedPropertiesListRule()); }
	 ruleselectedPropertiesList
{ after(grammarAccess.getSelectedPropertiesListRule()); } 
	 EOF 
;

// Rule selectedPropertiesList
ruleselectedPropertiesList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectedPropertiesListAccess().getGroup()); }
(rule__SelectedPropertiesList__Group__0)
{ after(grammarAccess.getSelectedPropertiesListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulealiasedExpression
entryRulealiasedExpression 
:
{ before(grammarAccess.getAliasedExpressionRule()); }
	 rulealiasedExpression
{ after(grammarAccess.getAliasedExpressionRule()); } 
	 EOF 
;

// Rule aliasedExpression
rulealiasedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAliasedExpressionAccess().getGroup()); }
(rule__AliasedExpression__Group__0)
{ after(grammarAccess.getAliasedExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleexpression
entryRuleexpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleexpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule expression
ruleexpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getLogicalOrExpressionParserRuleCall()); }
	rulelogicalOrExpression
{ after(grammarAccess.getExpressionAccess().getLogicalOrExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulelogicalOrExpression
entryRulelogicalOrExpression 
:
{ before(grammarAccess.getLogicalOrExpressionRule()); }
	 rulelogicalOrExpression
{ after(grammarAccess.getLogicalOrExpressionRule()); } 
	 EOF 
;

// Rule logicalOrExpression
rulelogicalOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
(rule__LogicalOrExpression__Group__0)
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulelogicalAndExpression
entryRulelogicalAndExpression 
:
{ before(grammarAccess.getLogicalAndExpressionRule()); }
	 rulelogicalAndExpression
{ after(grammarAccess.getLogicalAndExpressionRule()); } 
	 EOF 
;

// Rule logicalAndExpression
rulelogicalAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
(rule__LogicalAndExpression__Group__0)
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulenegatedExpression
entryRulenegatedExpression 
:
{ before(grammarAccess.getNegatedExpressionRule()); }
	 rulenegatedExpression
{ after(grammarAccess.getNegatedExpressionRule()); } 
	 EOF 
;

// Rule negatedExpression
rulenegatedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegatedExpressionAccess().getAlternatives()); }
(rule__NegatedExpression__Alternatives)
{ after(grammarAccess.getNegatedExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleequalityExpression
entryRuleequalityExpression 
:
{ before(grammarAccess.getEqualityExpressionRule()); }
	 ruleequalityExpression
{ after(grammarAccess.getEqualityExpressionRule()); } 
	 EOF 
;

// Rule equalityExpression
ruleequalityExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup()); }
(rule__EqualityExpression__Group__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulerelationalExpression
entryRulerelationalExpression 
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 rulerelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule relationalExpression
rulerelationalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
(rule__RelationalExpression__Group__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulelikeEscape
entryRulelikeEscape 
:
{ before(grammarAccess.getLikeEscapeRule()); }
	 rulelikeEscape
{ after(grammarAccess.getLikeEscapeRule()); } 
	 EOF 
;

// Rule likeEscape
rulelikeEscape
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLikeEscapeAccess().getGroup()); }
(rule__LikeEscape__Group__0)
{ after(grammarAccess.getLikeEscapeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulebetweenList
entryRulebetweenList 
:
{ before(grammarAccess.getBetweenListRule()); }
	 rulebetweenList
{ after(grammarAccess.getBetweenListRule()); } 
	 EOF 
;

// Rule betweenList
rulebetweenList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBetweenListAccess().getGroup()); }
(rule__BetweenList__Group__0)
{ after(grammarAccess.getBetweenListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleconcatenation
entryRuleconcatenation 
:
{ before(grammarAccess.getConcatenationRule()); }
	 ruleconcatenation
{ after(grammarAccess.getConcatenationRule()); } 
	 EOF 
;

// Rule concatenation
ruleconcatenation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConcatenationAccess().getGroup()); }
(rule__Concatenation__Group__0)
{ after(grammarAccess.getConcatenationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleadditiveExpression
entryRuleadditiveExpression 
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleadditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule additiveExpression
ruleadditiveExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
(rule__AdditiveExpression__Group__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemultiplyExpression
entryRulemultiplyExpression 
:
{ before(grammarAccess.getMultiplyExpressionRule()); }
	 rulemultiplyExpression
{ after(grammarAccess.getMultiplyExpressionRule()); } 
	 EOF 
;

// Rule multiplyExpression
rulemultiplyExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplyExpressionAccess().getGroup()); }
(rule__MultiplyExpression__Group__0)
{ after(grammarAccess.getMultiplyExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleunaryExpression
entryRuleunaryExpression 
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleunaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule unaryExpression
ruleunaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
(rule__UnaryExpression__Alternatives)
{ after(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulecaseExpression
entryRulecaseExpression 
:
{ before(grammarAccess.getCaseExpressionRule()); }
	 rulecaseExpression
{ after(grammarAccess.getCaseExpressionRule()); } 
	 EOF 
;

// Rule caseExpression
rulecaseExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCaseExpressionAccess().getAlternatives()); }
(rule__CaseExpression__Alternatives)
{ after(grammarAccess.getCaseExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulewhenClause
entryRulewhenClause 
:
{ before(grammarAccess.getWhenClauseRule()); }
	 rulewhenClause
{ after(grammarAccess.getWhenClauseRule()); } 
	 EOF 
;

// Rule whenClause
rulewhenClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhenClauseAccess().getGroup()); }
(rule__WhenClause__Group__0)
{ after(grammarAccess.getWhenClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulealtWhenClause
entryRulealtWhenClause 
:
{ before(grammarAccess.getAltWhenClauseRule()); }
	 rulealtWhenClause
{ after(grammarAccess.getAltWhenClauseRule()); } 
	 EOF 
;

// Rule altWhenClause
rulealtWhenClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAltWhenClauseAccess().getGroup()); }
(rule__AltWhenClause__Group__0)
{ after(grammarAccess.getAltWhenClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleelseClause
entryRuleelseClause 
:
{ before(grammarAccess.getElseClauseRule()); }
	 ruleelseClause
{ after(grammarAccess.getElseClauseRule()); } 
	 EOF 
;

// Rule elseClause
ruleelseClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElseClauseAccess().getGroup()); }
(rule__ElseClause__Group__0)
{ after(grammarAccess.getElseClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulequantifiedExpression
entryRulequantifiedExpression 
:
{ before(grammarAccess.getQuantifiedExpressionRule()); }
	 rulequantifiedExpression
{ after(grammarAccess.getQuantifiedExpressionRule()); } 
	 EOF 
;

// Rule quantifiedExpression
rulequantifiedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getGroup()); }
(rule__QuantifiedExpression__Group__0)
{ after(grammarAccess.getQuantifiedExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleatom
entryRuleatom 
:
{ before(grammarAccess.getAtomRule()); }
	 ruleatom
{ after(grammarAccess.getAtomRule()); } 
	 EOF 
;

// Rule atom
ruleatom
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomAccess().getGroup()); }
(rule__Atom__Group__0)
{ after(grammarAccess.getAtomAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleprimaryExpression
entryRuleprimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 ruleprimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule primaryExpression
ruleprimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleexpressionOrVector
entryRuleexpressionOrVector 
:
{ before(grammarAccess.getExpressionOrVectorRule()); }
	 ruleexpressionOrVector
{ after(grammarAccess.getExpressionOrVectorRule()); } 
	 EOF 
;

// Rule expressionOrVector
ruleexpressionOrVector
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionOrVectorAccess().getGroup()); }
(rule__ExpressionOrVector__Group__0)
{ after(grammarAccess.getExpressionOrVectorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulevectorExpr
entryRulevectorExpr 
:
{ before(grammarAccess.getVectorExprRule()); }
	 rulevectorExpr
{ after(grammarAccess.getVectorExprRule()); } 
	 EOF 
;

// Rule vectorExpr
rulevectorExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVectorExprAccess().getGroup()); }
(rule__VectorExpr__Group__0)
{ after(grammarAccess.getVectorExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleidentPrimary
entryRuleidentPrimary 
:
{ before(grammarAccess.getIdentPrimaryRule()); }
	 ruleidentPrimary
{ after(grammarAccess.getIdentPrimaryRule()); } 
	 EOF 
;

// Rule identPrimary
ruleidentPrimary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIdentPrimaryAccess().getAlternatives()); }
(rule__IdentPrimary__Alternatives)
{ after(grammarAccess.getIdentPrimaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleaggregate
entryRuleaggregate 
:
{ before(grammarAccess.getAggregateRule()); }
	 ruleaggregate
{ after(grammarAccess.getAggregateRule()); } 
	 EOF 
;

// Rule aggregate
ruleaggregate
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAggregateAccess().getAlternatives()); }
(rule__Aggregate__Alternatives)
{ after(grammarAccess.getAggregateAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulecollectionExpr
entryRulecollectionExpr 
:
{ before(grammarAccess.getCollectionExprRule()); }
	 rulecollectionExpr
{ after(grammarAccess.getCollectionExprRule()); } 
	 EOF 
;

// Rule collectionExpr
rulecollectionExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCollectionExprAccess().getGroup()); }
(rule__CollectionExpr__Group__0)
{ after(grammarAccess.getCollectionExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulecompoundExpr
entryRulecompoundExpr 
:
{ before(grammarAccess.getCompoundExprRule()); }
	 rulecompoundExpr
{ after(grammarAccess.getCompoundExprRule()); } 
	 EOF 
;

// Rule compoundExpr
rulecompoundExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompoundExprAccess().getAlternatives()); }
(rule__CompoundExpr__Alternatives)
{ after(grammarAccess.getCompoundExprAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleexprList
entryRuleexprList 
:
{ before(grammarAccess.getExprListRule()); }
	 ruleexprList
{ after(grammarAccess.getExprListRule()); } 
	 EOF 
;

// Rule exprList
ruleexprList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprListAccess().getGroup()); }
(rule__ExprList__Group__0)
{ after(grammarAccess.getExprListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleconstant
entryRuleconstant 
:
{ before(grammarAccess.getConstantRule()); }
	 ruleconstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule constant
ruleconstant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantAccess().getAlternatives()); }
(rule__Constant__Alternatives)
{ after(grammarAccess.getConstantAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulepath
entryRulepath 
:
{ before(grammarAccess.getPathRule()); }
	 rulepath
{ after(grammarAccess.getPathRule()); } 
	 EOF 
;

// Rule path
rulepath
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPathAccess().getGroup()); }
(rule__Path__Group__0)
{ after(grammarAccess.getPathAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleidentifier
entryRuleidentifier 
:
{ before(grammarAccess.getIdentifierRule()); }
	 ruleidentifier
{ after(grammarAccess.getIdentifierRule()); } 
	 EOF 
;

// Rule identifier
ruleidentifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIdentifierAccess().getAlternatives()); }
(rule__Identifier__Alternatives)
{ after(grammarAccess.getIdentifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulenumber
entryRulenumber 
:
{ before(grammarAccess.getNumberRule()); }
	 rulenumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule number
rulenumber
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberAccess().getAlternatives()); }
(rule__Number__Alternatives)
{ after(grammarAccess.getNumberAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSELECT
entryRuleSELECT 
:
{ before(grammarAccess.getSELECTRule()); }
	 ruleSELECT
{ after(grammarAccess.getSELECTRule()); } 
	 EOF 
;

// Rule SELECT
ruleSELECT
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSELECTAccess().getAlternatives()); }
(rule__SELECT__Alternatives)
{ after(grammarAccess.getSELECTAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDISTINCT
entryRuleDISTINCT 
:
{ before(grammarAccess.getDISTINCTRule()); }
	 ruleDISTINCT
{ after(grammarAccess.getDISTINCTRule()); } 
	 EOF 
;

// Rule DISTINCT
ruleDISTINCT
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDISTINCTAccess().getAlternatives()); }
(rule__DISTINCT__Alternatives)
{ after(grammarAccess.getDISTINCTAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNEW
entryRuleNEW 
:
{ before(grammarAccess.getNEWRule()); }
	 ruleNEW
{ after(grammarAccess.getNEWRule()); } 
	 EOF 
;

// Rule NEW
ruleNEW
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNEWAccess().getAlternatives()); }
(rule__NEW__Alternatives)
{ after(grammarAccess.getNEWAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOBJECT
entryRuleOBJECT 
:
{ before(grammarAccess.getOBJECTRule()); }
	 ruleOBJECT
{ after(grammarAccess.getOBJECTRule()); } 
	 EOF 
;

// Rule OBJECT
ruleOBJECT
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOBJECTAccess().getAlternatives()); }
(rule__OBJECT__Alternatives)
{ after(grammarAccess.getOBJECTAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFROM
entryRuleFROM 
:
{ before(grammarAccess.getFROMRule()); }
	 ruleFROM
{ after(grammarAccess.getFROMRule()); } 
	 EOF 
;

// Rule FROM
ruleFROM
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFROMAccess().getAlternatives()); }
(rule__FROM__Alternatives)
{ after(grammarAccess.getFROMAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLEFT
entryRuleLEFT 
:
{ before(grammarAccess.getLEFTRule()); }
	 ruleLEFT
{ after(grammarAccess.getLEFTRule()); } 
	 EOF 
;

// Rule LEFT
ruleLEFT
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLEFTAccess().getAlternatives()); }
(rule__LEFT__Alternatives)
{ after(grammarAccess.getLEFTAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRIGHT
entryRuleRIGHT 
:
{ before(grammarAccess.getRIGHTRule()); }
	 ruleRIGHT
{ after(grammarAccess.getRIGHTRule()); } 
	 EOF 
;

// Rule RIGHT
ruleRIGHT
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRIGHTAccess().getAlternatives()); }
(rule__RIGHT__Alternatives)
{ after(grammarAccess.getRIGHTAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOUTER
entryRuleOUTER 
:
{ before(grammarAccess.getOUTERRule()); }
	 ruleOUTER
{ after(grammarAccess.getOUTERRule()); } 
	 EOF 
;

// Rule OUTER
ruleOUTER
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOUTERAccess().getAlternatives()); }
(rule__OUTER__Alternatives)
{ after(grammarAccess.getOUTERAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFULL
entryRuleFULL 
:
{ before(grammarAccess.getFULLRule()); }
	 ruleFULL
{ after(grammarAccess.getFULLRule()); } 
	 EOF 
;

// Rule FULL
ruleFULL
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFULLAccess().getAlternatives()); }
(rule__FULL__Alternatives)
{ after(grammarAccess.getFULLAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleINNER
entryRuleINNER 
:
{ before(grammarAccess.getINNERRule()); }
	 ruleINNER
{ after(grammarAccess.getINNERRule()); } 
	 EOF 
;

// Rule INNER
ruleINNER
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getINNERAccess().getAlternatives()); }
(rule__INNER__Alternatives)
{ after(grammarAccess.getINNERAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJOIN
entryRuleJOIN 
:
{ before(grammarAccess.getJOINRule()); }
	 ruleJOIN
{ after(grammarAccess.getJOINRule()); } 
	 EOF 
;

// Rule JOIN
ruleJOIN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJOINAccess().getAlternatives()); }
(rule__JOIN__Alternatives)
{ after(grammarAccess.getJOINAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFETCH
entryRuleFETCH 
:
{ before(grammarAccess.getFETCHRule()); }
	 ruleFETCH
{ after(grammarAccess.getFETCHRule()); } 
	 EOF 
;

// Rule FETCH
ruleFETCH
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFETCHAccess().getAlternatives()); }
(rule__FETCH__Alternatives)
{ after(grammarAccess.getFETCHAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWITH
entryRuleWITH 
:
{ before(grammarAccess.getWITHRule()); }
	 ruleWITH
{ after(grammarAccess.getWITHRule()); } 
	 EOF 
;

// Rule WITH
ruleWITH
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWITHAccess().getAlternatives()); }
(rule__WITH__Alternatives)
{ after(grammarAccess.getWITHAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIN
entryRuleIN 
:
{ before(grammarAccess.getINRule()); }
	 ruleIN
{ after(grammarAccess.getINRule()); } 
	 EOF 
;

// Rule IN
ruleIN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getINAccess().getAlternatives()); }
(rule__IN__Alternatives)
{ after(grammarAccess.getINAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCLASS
entryRuleCLASS 
:
{ before(grammarAccess.getCLASSRule()); }
	 ruleCLASS
{ after(grammarAccess.getCLASSRule()); } 
	 EOF 
;

// Rule CLASS
ruleCLASS
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCLASSAccess().getAlternatives()); }
(rule__CLASS__Alternatives)
{ after(grammarAccess.getCLASSAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIN_CLASS
entryRuleIN_CLASS 
:
{ before(grammarAccess.getIN_CLASSRule()); }
	 ruleIN_CLASS
{ after(grammarAccess.getIN_CLASSRule()); } 
	 EOF 
;

// Rule IN_CLASS
ruleIN_CLASS
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIN_CLASSAccess().getGroup()); }
(rule__IN_CLASS__Group__0)
{ after(grammarAccess.getIN_CLASSAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleELEMENTS
entryRuleELEMENTS 
:
{ before(grammarAccess.getELEMENTSRule()); }
	 ruleELEMENTS
{ after(grammarAccess.getELEMENTSRule()); } 
	 EOF 
;

// Rule ELEMENTS
ruleELEMENTS
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getELEMENTSAccess().getAlternatives()); }
(rule__ELEMENTS__Alternatives)
{ after(grammarAccess.getELEMENTSAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIN_ELEMENTS
entryRuleIN_ELEMENTS 
:
{ before(grammarAccess.getIN_ELEMENTSRule()); }
	 ruleIN_ELEMENTS
{ after(grammarAccess.getIN_ELEMENTSRule()); } 
	 EOF 
;

// Rule IN_ELEMENTS
ruleIN_ELEMENTS
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIN_ELEMENTSAccess().getGroup()); }
(rule__IN_ELEMENTS__Group__0)
{ after(grammarAccess.getIN_ELEMENTSAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAS
entryRuleAS 
:
{ before(grammarAccess.getASRule()); }
	 ruleAS
{ after(grammarAccess.getASRule()); } 
	 EOF 
;

// Rule AS
ruleAS
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getASAccess().getAlternatives()); }
(rule__AS__Alternatives)
{ after(grammarAccess.getASAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePROPERTIES
entryRulePROPERTIES 
:
{ before(grammarAccess.getPROPERTIESRule()); }
	 rulePROPERTIES
{ after(grammarAccess.getPROPERTIESRule()); } 
	 EOF 
;

// Rule PROPERTIES
rulePROPERTIES
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPROPERTIESAccess().getAlternatives()); }
(rule__PROPERTIES__Alternatives)
{ after(grammarAccess.getPROPERTIESAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGROUP_BY
entryRuleGROUP_BY 
:
{ before(grammarAccess.getGROUP_BYRule()); }
	 ruleGROUP_BY
{ after(grammarAccess.getGROUP_BYRule()); } 
	 EOF 
;

// Rule GROUP_BY
ruleGROUP_BY
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGROUP_BYAccess().getGroup()); }
(rule__GROUP_BY__Group__0)
{ after(grammarAccess.getGROUP_BYAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleORDER_BY
entryRuleORDER_BY 
:
{ before(grammarAccess.getORDER_BYRule()); }
	 ruleORDER_BY
{ after(grammarAccess.getORDER_BYRule()); } 
	 EOF 
;

// Rule ORDER_BY
ruleORDER_BY
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getORDER_BYAccess().getGroup()); }
(rule__ORDER_BY__Group__0)
{ after(grammarAccess.getORDER_BYAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBY
entryRuleBY 
:
{ before(grammarAccess.getBYRule()); }
	 ruleBY
{ after(grammarAccess.getBYRule()); } 
	 EOF 
;

// Rule BY
ruleBY
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBYAccess().getAlternatives()); }
(rule__BY__Alternatives)
{ after(grammarAccess.getBYAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleASC
entryRuleASC 
:
{ before(grammarAccess.getASCRule()); }
	 ruleASC
{ after(grammarAccess.getASCRule()); } 
	 EOF 
;

// Rule ASC
ruleASC
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getASCAccess().getAlternatives()); }
(rule__ASC__Alternatives)
{ after(grammarAccess.getASCAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDESC
entryRuleDESC 
:
{ before(grammarAccess.getDESCRule()); }
	 ruleDESC
{ after(grammarAccess.getDESCRule()); } 
	 EOF 
;

// Rule DESC
ruleDESC
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDESCAccess().getAlternatives()); }
(rule__DESC__Alternatives)
{ after(grammarAccess.getDESCAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHAVING
entryRuleHAVING 
:
{ before(grammarAccess.getHAVINGRule()); }
	 ruleHAVING
{ after(grammarAccess.getHAVINGRule()); } 
	 EOF 
;

// Rule HAVING
ruleHAVING
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHAVINGAccess().getAlternatives()); }
(rule__HAVING__Alternatives)
{ after(grammarAccess.getHAVINGAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWHERE
entryRuleWHERE 
:
{ before(grammarAccess.getWHERERule()); }
	 ruleWHERE
{ after(grammarAccess.getWHERERule()); } 
	 EOF 
;

// Rule WHERE
ruleWHERE
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWHEREAccess().getAlternatives()); }
(rule__WHERE__Alternatives)
{ after(grammarAccess.getWHEREAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOR
entryRuleOR 
:
{ before(grammarAccess.getORRule()); }
	 ruleOR
{ after(grammarAccess.getORRule()); } 
	 EOF 
;

// Rule OR
ruleOR
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getORAccess().getAlternatives()); }
(rule__OR__Alternatives)
{ after(grammarAccess.getORAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAND
entryRuleAND 
:
{ before(grammarAccess.getANDRule()); }
	 ruleAND
{ after(grammarAccess.getANDRule()); } 
	 EOF 
;

// Rule AND
ruleAND
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getANDAccess().getAlternatives()); }
(rule__AND__Alternatives)
{ after(grammarAccess.getANDAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNOT
entryRuleNOT 
:
{ before(grammarAccess.getNOTRule()); }
	 ruleNOT
{ after(grammarAccess.getNOTRule()); } 
	 EOF 
;

// Rule NOT
ruleNOT
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNOTAccess().getAlternatives()); }
(rule__NOT__Alternatives)
{ after(grammarAccess.getNOTAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIS
entryRuleIS 
:
{ before(grammarAccess.getISRule()); }
	 ruleIS
{ after(grammarAccess.getISRule()); } 
	 EOF 
;

// Rule IS
ruleIS
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getISAccess().getAlternatives()); }
(rule__IS__Alternatives)
{ after(grammarAccess.getISAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBETWEEN
entryRuleBETWEEN 
:
{ before(grammarAccess.getBETWEENRule()); }
	 ruleBETWEEN
{ after(grammarAccess.getBETWEENRule()); } 
	 EOF 
;

// Rule BETWEEN
ruleBETWEEN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBETWEENAccess().getAlternatives()); }
(rule__BETWEEN__Alternatives)
{ after(grammarAccess.getBETWEENAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLIKE
entryRuleLIKE 
:
{ before(grammarAccess.getLIKERule()); }
	 ruleLIKE
{ after(grammarAccess.getLIKERule()); } 
	 EOF 
;

// Rule LIKE
ruleLIKE
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLIKEAccess().getAlternatives()); }
(rule__LIKE__Alternatives)
{ after(grammarAccess.getLIKEAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMEMBER
entryRuleMEMBER 
:
{ before(grammarAccess.getMEMBERRule()); }
	 ruleMEMBER
{ after(grammarAccess.getMEMBERRule()); } 
	 EOF 
;

// Rule MEMBER
ruleMEMBER
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMEMBERAccess().getAlternatives()); }
(rule__MEMBER__Alternatives)
{ after(grammarAccess.getMEMBERAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOF
entryRuleOF 
:
{ before(grammarAccess.getOFRule()); }
	 ruleOF
{ after(grammarAccess.getOFRule()); } 
	 EOF 
;

// Rule OF
ruleOF
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOFAccess().getAlternatives()); }
(rule__OF__Alternatives)
{ after(grammarAccess.getOFAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleESCAPE
entryRuleESCAPE 
:
{ before(grammarAccess.getESCAPERule()); }
	 ruleESCAPE
{ after(grammarAccess.getESCAPERule()); } 
	 EOF 
;

// Rule ESCAPE
ruleESCAPE
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getESCAPEAccess().getAlternatives()); }
(rule__ESCAPE__Alternatives)
{ after(grammarAccess.getESCAPEAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCASE
entryRuleCASE 
:
{ before(grammarAccess.getCASERule()); }
	 ruleCASE
{ after(grammarAccess.getCASERule()); } 
	 EOF 
;

// Rule CASE
ruleCASE
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCASEAccess().getAlternatives()); }
(rule__CASE__Alternatives)
{ after(grammarAccess.getCASEAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEND
entryRuleEND 
:
{ before(grammarAccess.getENDRule()); }
	 ruleEND
{ after(grammarAccess.getENDRule()); } 
	 EOF 
;

// Rule END
ruleEND
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getENDAccess().getAlternatives()); }
(rule__END__Alternatives)
{ after(grammarAccess.getENDAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWHEN
entryRuleWHEN 
:
{ before(grammarAccess.getWHENRule()); }
	 ruleWHEN
{ after(grammarAccess.getWHENRule()); } 
	 EOF 
;

// Rule WHEN
ruleWHEN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWHENAccess().getAlternatives()); }
(rule__WHEN__Alternatives)
{ after(grammarAccess.getWHENAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTHEN
entryRuleTHEN 
:
{ before(grammarAccess.getTHENRule()); }
	 ruleTHEN
{ after(grammarAccess.getTHENRule()); } 
	 EOF 
;

// Rule THEN
ruleTHEN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTHENAccess().getAlternatives()); }
(rule__THEN__Alternatives)
{ after(grammarAccess.getTHENAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleELSE
entryRuleELSE 
:
{ before(grammarAccess.getELSERule()); }
	 ruleELSE
{ after(grammarAccess.getELSERule()); } 
	 EOF 
;

// Rule ELSE
ruleELSE
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getELSEAccess().getAlternatives()); }
(rule__ELSE__Alternatives)
{ after(grammarAccess.getELSEAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSOME
entryRuleSOME 
:
{ before(grammarAccess.getSOMERule()); }
	 ruleSOME
{ after(grammarAccess.getSOMERule()); } 
	 EOF 
;

// Rule SOME
ruleSOME
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSOMEAccess().getAlternatives()); }
(rule__SOME__Alternatives)
{ after(grammarAccess.getSOMEAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEXISTS
entryRuleEXISTS 
:
{ before(grammarAccess.getEXISTSRule()); }
	 ruleEXISTS
{ after(grammarAccess.getEXISTSRule()); } 
	 EOF 
;

// Rule EXISTS
ruleEXISTS
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEXISTSAccess().getAlternatives()); }
(rule__EXISTS__Alternatives)
{ after(grammarAccess.getEXISTSAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleALL
entryRuleALL 
:
{ before(grammarAccess.getALLRule()); }
	 ruleALL
{ after(grammarAccess.getALLRule()); } 
	 EOF 
;

// Rule ALL
ruleALL
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getALLAccess().getAlternatives()); }
(rule__ALL__Alternatives)
{ after(grammarAccess.getALLAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleANY
entryRuleANY 
:
{ before(grammarAccess.getANYRule()); }
	 ruleANY
{ after(grammarAccess.getANYRule()); } 
	 EOF 
;

// Rule ANY
ruleANY
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getANYAccess().getAlternatives()); }
(rule__ANY__Alternatives)
{ after(grammarAccess.getANYAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSUM
entryRuleSUM 
:
{ before(grammarAccess.getSUMRule()); }
	 ruleSUM
{ after(grammarAccess.getSUMRule()); } 
	 EOF 
;

// Rule SUM
ruleSUM
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSUMAccess().getAlternatives()); }
(rule__SUM__Alternatives)
{ after(grammarAccess.getSUMAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAVG
entryRuleAVG 
:
{ before(grammarAccess.getAVGRule()); }
	 ruleAVG
{ after(grammarAccess.getAVGRule()); } 
	 EOF 
;

// Rule AVG
ruleAVG
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAVGAccess().getAlternatives()); }
(rule__AVG__Alternatives)
{ after(grammarAccess.getAVGAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMAX
entryRuleMAX 
:
{ before(grammarAccess.getMAXRule()); }
	 ruleMAX
{ after(grammarAccess.getMAXRule()); } 
	 EOF 
;

// Rule MAX
ruleMAX
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMAXAccess().getAlternatives()); }
(rule__MAX__Alternatives)
{ after(grammarAccess.getMAXAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMIN
entryRuleMIN 
:
{ before(grammarAccess.getMINRule()); }
	 ruleMIN
{ after(grammarAccess.getMINRule()); } 
	 EOF 
;

// Rule MIN
ruleMIN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMINAccess().getAlternatives()); }
(rule__MIN__Alternatives)
{ after(grammarAccess.getMINAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCOUNT
entryRuleCOUNT 
:
{ before(grammarAccess.getCOUNTRule()); }
	 ruleCOUNT
{ after(grammarAccess.getCOUNTRule()); } 
	 EOF 
;

// Rule COUNT
ruleCOUNT
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCOUNTAccess().getAlternatives()); }
(rule__COUNT__Alternatives)
{ after(grammarAccess.getCOUNTAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleINDICES
entryRuleINDICES 
:
{ before(grammarAccess.getINDICESRule()); }
	 ruleINDICES
{ after(grammarAccess.getINDICESRule()); } 
	 EOF 
;

// Rule INDICES
ruleINDICES
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getINDICESAccess().getAlternatives()); }
(rule__INDICES__Alternatives)
{ after(grammarAccess.getINDICESAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTRAILING
entryRuleTRAILING 
:
{ before(grammarAccess.getTRAILINGRule()); }
	 ruleTRAILING
{ after(grammarAccess.getTRAILINGRule()); } 
	 EOF 
;

// Rule TRAILING
ruleTRAILING
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTRAILINGAccess().getAlternatives()); }
(rule__TRAILING__Alternatives)
{ after(grammarAccess.getTRAILINGAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLEADING
entryRuleLEADING 
:
{ before(grammarAccess.getLEADINGRule()); }
	 ruleLEADING
{ after(grammarAccess.getLEADINGRule()); } 
	 EOF 
;

// Rule LEADING
ruleLEADING
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLEADINGAccess().getAlternatives()); }
(rule__LEADING__Alternatives)
{ after(grammarAccess.getLEADINGAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBOTH
entryRuleBOTH 
:
{ before(grammarAccess.getBOTHRule()); }
	 ruleBOTH
{ after(grammarAccess.getBOTHRule()); } 
	 EOF 
;

// Rule BOTH
ruleBOTH
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBOTHAccess().getAlternatives()); }
(rule__BOTH__Alternatives)
{ after(grammarAccess.getBOTHAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNULL
entryRuleNULL 
:
{ before(grammarAccess.getNULLRule()); }
	 ruleNULL
{ after(grammarAccess.getNULLRule()); } 
	 EOF 
;

// Rule NULL
ruleNULL
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNULLAccess().getAlternatives()); }
(rule__NULL__Alternatives)
{ after(grammarAccess.getNULLAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTRUE
entryRuleTRUE 
:
{ before(grammarAccess.getTRUERule()); }
	 ruleTRUE
{ after(grammarAccess.getTRUERule()); } 
	 EOF 
;

// Rule TRUE
ruleTRUE
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTRUEAccess().getAlternatives()); }
(rule__TRUE__Alternatives)
{ after(grammarAccess.getTRUEAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFALSE
entryRuleFALSE 
:
{ before(grammarAccess.getFALSERule()); }
	 ruleFALSE
{ after(grammarAccess.getFALSERule()); } 
	 EOF 
;

// Rule FALSE
ruleFALSE
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFALSEAccess().getAlternatives()); }
(rule__FALSE__Alternatives)
{ after(grammarAccess.getFALSEAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEMPTY
entryRuleEMPTY 
:
{ before(grammarAccess.getEMPTYRule()); }
	 ruleEMPTY
{ after(grammarAccess.getEMPTYRule()); } 
	 EOF 
;

// Rule EMPTY
ruleEMPTY
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEMPTYAccess().getAlternatives()); }
(rule__EMPTY__Alternatives)
{ after(grammarAccess.getEMPTYAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulekeyword
entryRulekeyword 
:
{ before(grammarAccess.getKeywordRule()); }
	 rulekeyword
{ after(grammarAccess.getKeywordRule()); } 
	 EOF 
;

// Rule keyword
rulekeyword
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getKeywordAccess().getAlternatives()); }
(rule__Keyword__Alternatives)
{ after(grammarAccess.getKeywordAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Declaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getFieldDeclarationParserRuleCall_0()); }
	rulefieldDeclaration
{ after(grammarAccess.getDeclarationAccess().getFieldDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getTitleDeclarationParserRuleCall_1()); }
	ruletitleDeclaration
{ after(grammarAccess.getDeclarationAccess().getTitleDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getTypeDeclarationParserRuleCall_2()); }
	ruletypeDeclaration
{ after(grammarAccess.getDeclarationAccess().getTypeDeclarationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getIncludeDeclarationParserRuleCall_3()); }
	ruleincludeDeclaration
{ after(grammarAccess.getDeclarationAccess().getIncludeDeclarationParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getValidationRuleDeclarationParserRuleCall_4()); }
	rulevalidationRuleDeclaration
{ after(grammarAccess.getDeclarationAccess().getValidationRuleDeclarationParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getFunctionDeclarationParserRuleCall_5()); }
	rulefunctionDeclaration
{ after(grammarAccess.getDeclarationAccess().getFunctionDeclarationParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getNativeValidationRuleDeclarationParserRuleCall_6()); }
	rulenativeValidationRuleDeclaration
{ after(grammarAccess.getDeclarationAccess().getNativeValidationRuleDeclarationParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getSubFieldDeclarationParserRuleCall_7()); }
	rulesubFieldDeclaration
{ after(grammarAccess.getDeclarationAccess().getSubFieldDeclarationParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__NameAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getNameIDTerminalRuleCall_0_0_0()); }
	RULE_ID
{ after(grammarAccess.getFieldDeclarationAccess().getNameIDTerminalRuleCall_0_0_0()); }
)

    |(
{ before(grammarAccess.getFieldDeclarationAccess().getNameKeywordParserRuleCall_0_0_1()); }
	rulekeyword
{ after(grammarAccess.getFieldDeclarationAccess().getNameKeywordParserRuleCall_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldTypeAccess().getCharTypeParserRuleCall_0()); }
	rulecharType
{ after(grammarAccess.getFieldTypeAccess().getCharTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFieldTypeAccess().getCharEnumParserRuleCall_1()); }
	rulecharEnum
{ after(grammarAccess.getFieldTypeAccess().getCharEnumParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getFieldTypeAccess().getGroup_2()); }
(rule__FieldType__Group_2__0)
{ after(grammarAccess.getFieldTypeAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getFieldTypeAccess().getIntEnumParserRuleCall_3()); }
	ruleintEnum
{ after(grammarAccess.getFieldTypeAccess().getIntEnumParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getFieldTypeAccess().getGroup_4()); }
(rule__FieldType__Group_4__0)
{ after(grammarAccess.getFieldTypeAccess().getGroup_4()); }
)

    |(
{ before(grammarAccess.getFieldTypeAccess().getGroup_5()); }
(rule__FieldType__Group_5__0)
{ after(grammarAccess.getFieldTypeAccess().getGroup_5()); }
)

    |(
{ before(grammarAccess.getFieldTypeAccess().getPointerParserRuleCall_6()); }
	rulepointer
{ after(grammarAccess.getFieldTypeAccess().getPointerParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getFieldTypeAccess().getSetTypeParserRuleCall_7()); }
	rulesetType
{ after(grammarAccess.getFieldTypeAccess().getSetTypeParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getFieldTypeAccess().getTypeDecAssignment_8()); }
(rule__FieldType__TypeDecAssignment_8)
{ after(grammarAccess.getFieldTypeAccess().getTypeDecAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldType__TypeAlternatives_5_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldTypeAccess().getTypeIntKeyword_5_1_0_0()); }

	'int' 

{ after(grammarAccess.getFieldTypeAccess().getTypeIntKeyword_5_1_0_0()); }
)

    |(
{ before(grammarAccess.getFieldTypeAccess().getTypeRealKeyword_5_1_0_1()); }

	'real' 

{ after(grammarAccess.getFieldTypeAccess().getTypeRealKeyword_5_1_0_1()); }
)

    |(
{ before(grammarAccess.getFieldTypeAccess().getTypeBooleanKeyword_5_1_0_2()); }

	'boolean' 

{ after(grammarAccess.getFieldTypeAccess().getTypeBooleanKeyword_5_1_0_2()); }
)

    |(
{ before(grammarAccess.getFieldTypeAccess().getTypeTextKeyword_5_1_0_3()); }

	'text' 

{ after(grammarAccess.getFieldTypeAccess().getTypeTextKeyword_5_1_0_3()); }
)

    |(
{ before(grammarAccess.getFieldTypeAccess().getTypeBinaryKeyword_5_1_0_4()); }

	'binary' 

{ after(grammarAccess.getFieldTypeAccess().getTypeBinaryKeyword_5_1_0_4()); }
)

    |(
{ before(grammarAccess.getFieldTypeAccess().getTypeFileKeyword_5_1_0_5()); }

	'file' 

{ after(grammarAccess.getFieldTypeAccess().getTypeFileKeyword_5_1_0_5()); }
)

    |(
{ before(grammarAccess.getFieldTypeAccess().getTypeDateKeyword_5_1_0_6()); }

	'date' 

{ after(grammarAccess.getFieldTypeAccess().getTypeDateKeyword_5_1_0_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumValue__ValueAlternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumValueAccess().getValueINTTerminalRuleCall_2_0_0()); }
	RULE_INT
{ after(grammarAccess.getEnumValueAccess().getValueINTTerminalRuleCall_2_0_0()); }
)

    |(
{ before(grammarAccess.getEnumValueAccess().getValueSIGNED_INTTerminalRuleCall_2_0_1()); }
	RULE_SIGNED_INT
{ after(grammarAccess.getEnumValueAccess().getValueSIGNED_INTTerminalRuleCall_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getIDTerminalRuleCall_0_0()); }
	RULE_ID
{ after(grammarAccess.getTypeAccess().getIDTerminalRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getKeywordParserRuleCall_0_1()); }
	rulekeyword
{ after(grammarAccess.getTypeAccess().getKeywordParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getFullStopKeyword_1_0_0()); }

	'.' 

{ after(grammarAccess.getTypeAccess().getFullStopKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getHyphenMinusGreaterThanSignKeyword_1_0_1()); }

	'->' 

{ after(grammarAccess.getTypeAccess().getHyphenMinusGreaterThanSignKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getIDTerminalRuleCall_1_1_0()); }
	RULE_ID
{ after(grammarAccess.getTypeAccess().getIDTerminalRuleCall_1_1_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getKeywordParserRuleCall_1_1_1()); }
	rulekeyword
{ after(grammarAccess.getTypeAccess().getKeywordParserRuleCall_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Title__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTitleAccess().getNameAssignment_0()); }
(rule__Title__NameAssignment_0)
{ after(grammarAccess.getTitleAccess().getNameAssignment_0()); }
)

    |(
{ before(grammarAccess.getTitleAccess().getFunctionCallParserRuleCall_1()); }
	rulefunctionCall
{ after(grammarAccess.getTitleAccess().getFunctionCallParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValidationRuleDeclaration__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValidationRuleDeclarationAccess().getRangeValidationRuleDeclarationParserRuleCall_0_0()); }
	rulerangeValidationRuleDeclaration
{ after(grammarAccess.getValidationRuleDeclarationAccess().getRangeValidationRuleDeclarationParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getValidationRuleDeclarationAccess().getUniquenessValidationRuleDeclarationParserRuleCall_0_1()); }
	ruleuniquenessValidationRuleDeclaration
{ after(grammarAccess.getValidationRuleDeclarationAccess().getUniquenessValidationRuleDeclarationParserRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getValidationRuleDeclarationAccess().getComparisonValidationRuleDeclarationParserRuleCall_0_2()); }
	rulecomparisonValidationRuleDeclaration
{ after(grammarAccess.getValidationRuleDeclarationAccess().getComparisonValidationRuleDeclarationParserRuleCall_0_2()); }
)

    |(
{ before(grammarAccess.getValidationRuleDeclarationAccess().getRegexValidationRuleDeclarationParserRuleCall_0_3()); }
	ruleregexValidationRuleDeclaration
{ after(grammarAccess.getValidationRuleDeclarationAccess().getRegexValidationRuleDeclarationParserRuleCall_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonPart__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonPartAccess().getTAssignment_0()); }
(rule__ComparisonPart__TAssignment_0)
{ after(grammarAccess.getComparisonPartAccess().getTAssignment_0()); }
)

    |(
{ before(grammarAccess.getComparisonPartAccess().getNAssignment_1()); }
(rule__ComparisonPart__NAssignment_1)
{ after(grammarAccess.getComparisonPartAccess().getNAssignment_1()); }
)

    |(
{ before(grammarAccess.getComparisonPartAccess().getDfAssignment_2()); }
(rule__ComparisonPart__DfAssignment_2)
{ after(grammarAccess.getComparisonPartAccess().getDfAssignment_2()); }
)

    |(
{ before(grammarAccess.getComparisonPartAccess().getUAssignment_3()); }
(rule__ComparisonPart__UAssignment_3)
{ after(grammarAccess.getComparisonPartAccess().getUAssignment_3()); }
)

    |(
{ before(grammarAccess.getComparisonPartAccess().getLAssignment_4()); }
(rule__ComparisonPart__LAssignment_4)
{ after(grammarAccess.getComparisonPartAccess().getLAssignment_4()); }
)

    |(
{ before(grammarAccess.getComparisonPartAccess().getDAssignment_5()); }
(rule__ComparisonPart__DAssignment_5)
{ after(grammarAccess.getComparisonPartAccess().getDAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getEqualsSignKeyword_0()); }

	'=' 

{ after(grammarAccess.getOperatorAccess().getEqualsSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getOperatorAccess().getLessThanSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getGreaterThanSignKeyword_2()); }

	'>' 

{ after(grammarAccess.getOperatorAccess().getGreaterThanSignKeyword_2()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLessThanSignEqualsSignKeyword_3()); }

	'<=' 

{ after(grammarAccess.getOperatorAccess().getLessThanSignEqualsSignKeyword_3()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getGreaterThanSignEqualsSignKeyword_4()); }

	'>=' 

{ after(grammarAccess.getOperatorAccess().getGreaterThanSignEqualsSignKeyword_4()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getExclamationMarkEqualsSignKeyword_5()); }

	'!=' 

{ after(grammarAccess.getOperatorAccess().getExclamationMarkEqualsSignKeyword_5()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getCircumflexAccentEqualsSignKeyword_6()); }

	'^=' 

{ after(grammarAccess.getOperatorAccess().getCircumflexAccentEqualsSignKeyword_6()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLessThanSignGreaterThanSignKeyword_7()); }

	'<>' 

{ after(grammarAccess.getOperatorAccess().getLessThanSignGreaterThanSignKeyword_7()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLikeKeyword_8()); }

	'like' 

{ after(grammarAccess.getOperatorAccess().getLikeKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DateConstant__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateConstantAccess().getNowKeyword_0()); }

	'$now' 

{ after(grammarAccess.getDateConstantAccess().getNowKeyword_0()); }
)

    |(
{ before(grammarAccess.getDateConstantAccess().getTodayKeyword_1()); }

	'$today' 

{ after(grammarAccess.getDateConstantAccess().getTodayKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DateFunctionArgument__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateFunctionArgumentAccess().getPlusSignKeyword_1_0_0()); }

	'+' 

{ after(grammarAccess.getDateFunctionArgumentAccess().getPlusSignKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getDateFunctionArgumentAccess().getHyphenMinusKeyword_1_0_1()); }

	'-' 

{ after(grammarAccess.getDateFunctionArgumentAccess().getHyphenMinusKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DateFunctionArgumentMember__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateFunctionArgumentMemberAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getDateFunctionArgumentMemberAccess().getINTTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDateFunctionArgumentMemberAccess().getDateConstantParserRuleCall_1()); }
	ruledateConstant
{ after(grammarAccess.getDateFunctionArgumentMemberAccess().getDateConstantParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeValidationRuleDeclaration__NameAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeValidationRuleDeclarationAccess().getNameRangeKeyword_0_0_0()); }

	'range' 

{ after(grammarAccess.getRangeValidationRuleDeclarationAccess().getNameRangeKeyword_0_0_0()); }
)

    |(
{ before(grammarAccess.getRangeValidationRuleDeclarationAccess().getNameLengthKeyword_0_0_1()); }

	'length' 

{ after(grammarAccess.getRangeValidationRuleDeclarationAccess().getNameLengthKeyword_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeBound__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeBoundAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getRangeBoundAccess().getINTTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getRangeBoundAccess().getQuestionMarkKeyword_1()); }

	'?' 

{ after(grammarAccess.getRangeBoundAccess().getQuestionMarkKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NativeValidationRuleDeclaration__TypeAlternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeUniqueKeyword_2_0_0()); }

	'unique' 

{ after(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeUniqueKeyword_2_0_0()); }
)

    |(
{ before(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNotNullKeyword_2_0_1()); }

	'notNull' 

{ after(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNotNullKeyword_2_0_1()); }
)

    |(
{ before(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNaNKeyword_2_0_2()); }

	'NaN' 

{ after(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNaNKeyword_2_0_2()); }
)

    |(
{ before(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNotEmptyKeyword_2_0_3()); }

	'notEmpty' 

{ after(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNotEmptyKeyword_2_0_3()); }
)

    |(
{ before(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNotIntKeyword_2_0_4()); }

	'notInt' 

{ after(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNotIntKeyword_2_0_4()); }
)

    |(
{ before(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNotRealKeyword_2_0_5()); }

	'notReal' 

{ after(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNotRealKeyword_2_0_5()); }
)

    |(
{ before(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNotBooleanKeyword_2_0_6()); }

	'notBoolean' 

{ after(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeNotBooleanKeyword_2_0_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgumentBody__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getCharTypeParserRuleCall_0_0()); }
	rulecharType
{ after(grammarAccess.getFunctionArgumentBodyAccess().getCharTypeParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getIntEnumParserRuleCall_0_1()); }
	ruleintEnum
{ after(grammarAccess.getFunctionArgumentBodyAccess().getIntEnumParserRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getGroup_0_2()); }
(rule__FunctionArgumentBody__Group_0_2__0)
{ after(grammarAccess.getFunctionArgumentBodyAccess().getGroup_0_2()); }
)

    |(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getCharEnumParserRuleCall_0_3()); }
	rulecharEnum
{ after(grammarAccess.getFunctionArgumentBodyAccess().getCharEnumParserRuleCall_0_3()); }
)

    |(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getGroup_0_4()); }
(rule__FunctionArgumentBody__Group_0_4__0)
{ after(grammarAccess.getFunctionArgumentBodyAccess().getGroup_0_4()); }
)

    |(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getIntKeyword_0_5()); }

	'int' 

{ after(grammarAccess.getFunctionArgumentBodyAccess().getIntKeyword_0_5()); }
)

    |(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getRealKeyword_0_6()); }

	'real' 

{ after(grammarAccess.getFunctionArgumentBodyAccess().getRealKeyword_0_6()); }
)

    |(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getBooleanKeyword_0_7()); }

	'boolean' 

{ after(grammarAccess.getFunctionArgumentBodyAccess().getBooleanKeyword_0_7()); }
)

    |(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getTextKeyword_0_8()); }

	'text' 

{ after(grammarAccess.getFunctionArgumentBodyAccess().getTextKeyword_0_8()); }
)

    |(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getBinaryKeyword_0_9()); }

	'binary' 

{ after(grammarAccess.getFunctionArgumentBodyAccess().getBinaryKeyword_0_9()); }
)

    |(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getFileKeyword_0_10()); }

	'file' 

{ after(grammarAccess.getFunctionArgumentBodyAccess().getFileKeyword_0_10()); }
)

    |(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getDateKeyword_0_11()); }

	'date' 

{ after(grammarAccess.getFunctionArgumentBodyAccess().getDateKeyword_0_11()); }
)

    |(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getGroup_0_12()); }
(rule__FunctionArgumentBody__Group_0_12__0)
{ after(grammarAccess.getFunctionArgumentBodyAccess().getGroup_0_12()); }
)

    |(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getGroup_0_13()); }
(rule__FunctionArgumentBody__Group_0_13__0)
{ after(grammarAccess.getFunctionArgumentBodyAccess().getGroup_0_13()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgumentBody__NameAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getNameIDTerminalRuleCall_1_0_0()); }
	RULE_ID
{ after(grammarAccess.getFunctionArgumentBodyAccess().getNameIDTerminalRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getNameKeywordParserRuleCall_1_0_1()); }
	rulekeyword
{ after(grammarAccess.getFunctionArgumentBodyAccess().getNameKeywordParserRuleCall_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionBody__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionBodyAccess().getSAssignment_1_0()); }
(rule__FunctionBody__SAssignment_1_0)
{ after(grammarAccess.getFunctionBodyAccess().getSAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getFunctionBodyAccess().getEAssignment_1_1()); }
(rule__FunctionBody__EAssignment_1_1)
{ after(grammarAccess.getFunctionBodyAccess().getEAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectClause__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectClauseAccess().getSAssignment_3_0()); }
(rule__SelectClause__SAssignment_3_0)
{ after(grammarAccess.getSelectClauseAccess().getSAssignment_3_0()); }
)

    |(
{ before(grammarAccess.getSelectClauseAccess().getNAssignment_3_1()); }
(rule__SelectClause__NAssignment_3_1)
{ after(grammarAccess.getSelectClauseAccess().getNAssignment_3_1()); }
)

    |(
{ before(grammarAccess.getSelectClauseAccess().getSelectObjectParserRuleCall_3_2()); }
	ruleselectObject
{ after(grammarAccess.getSelectClauseAccess().getSelectObjectParserRuleCall_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClauseAccess().getFromJoinAssignment_2_0()); }
(rule__FromClause__FromJoinAssignment_2_0)
{ after(grammarAccess.getFromClauseAccess().getFromJoinAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getFromClauseAccess().getGroup_2_1()); }
(rule__FromClause__Group_2_1__0)
{ after(grammarAccess.getFromClauseAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromJoin__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromJoinAccess().getGroup_0_0()); }
(rule__FromJoin__Group_0_0__0)
{ after(grammarAccess.getFromJoinAccess().getGroup_0_0()); }
)

    |(
{ before(grammarAccess.getFromJoinAccess().getFULLParserRuleCall_0_1()); }
	ruleFULL
{ after(grammarAccess.getFromJoinAccess().getFULLParserRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getFromJoinAccess().getINNERParserRuleCall_0_2()); }
	ruleINNER
{ after(grammarAccess.getFromJoinAccess().getINNERParserRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromJoin__Alternatives_0_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromJoinAccess().getLEFTParserRuleCall_0_0_0_0()); }
	ruleLEFT
{ after(grammarAccess.getFromJoinAccess().getLEFTParserRuleCall_0_0_0_0()); }
)

    |(
{ before(grammarAccess.getFromJoinAccess().getRIGHTParserRuleCall_0_0_0_1()); }
	ruleRIGHT
{ after(grammarAccess.getFromJoinAccess().getRIGHTParserRuleCall_0_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromRange__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromRangeAccess().getFromClassOrOuterQueryPathParserRuleCall_0()); }
	rulefromClassOrOuterQueryPath
{ after(grammarAccess.getFromRangeAccess().getFromClassOrOuterQueryPathParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFromRangeAccess().getGroup_1()); }
(rule__FromRange__Group_1__0)
{ after(grammarAccess.getFromRangeAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getFromRangeAccess().getGroup_2()); }
(rule__FromRange__Group_2__0)
{ after(grammarAccess.getFromRangeAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getFromRangeAccess().getInCollectionElementsDeclarationParserRuleCall_3()); }
	ruleinCollectionElementsDeclaration
{ after(grammarAccess.getFromRangeAccess().getInCollectionElementsDeclarationParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AscendingOrDescending__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAscendingOrDescendingAccess().getASCParserRuleCall_0()); }
	ruleASC
{ after(grammarAccess.getAscendingOrDescendingAccess().getASCParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAscendingOrDescendingAccess().getDESCParserRuleCall_1()); }
	ruleDESC
{ after(grammarAccess.getAscendingOrDescendingAccess().getDESCParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegatedExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegatedExpressionAccess().getGroup_0()); }
(rule__NegatedExpression__Group_0__0)
{ after(grammarAccess.getNegatedExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getNegatedExpressionAccess().getEqualityExpressionParserRuleCall_1()); }
	ruleequalityExpression
{ after(grammarAccess.getNegatedExpressionAccess().getEqualityExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getEqualsSignKeyword_1_0_0()); }

	'=' 

{ after(grammarAccess.getEqualityExpressionAccess().getEqualsSignKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup_1_0_1()); }
(rule__EqualityExpression__Group_1_0_1__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup_1_0_1()); }
)

    |(
{ before(grammarAccess.getEqualityExpressionAccess().getExclamationMarkEqualsSignKeyword_1_0_2()); }

	'!=' 

{ after(grammarAccess.getEqualityExpressionAccess().getExclamationMarkEqualsSignKeyword_1_0_2()); }
)

    |(
{ before(grammarAccess.getEqualityExpressionAccess().getLessThanSignGreaterThanSignKeyword_1_0_3()); }

	'<>' 

{ after(grammarAccess.getEqualityExpressionAccess().getLessThanSignGreaterThanSignKeyword_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_0()); }
(rule__RelationalExpression__Group_1_0__0)*
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_1()); }
(rule__RelationalExpression__Group_1_1__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Alternatives_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getLessThanSignKeyword_1_0_0_0()); }

	'<' 

{ after(grammarAccess.getRelationalExpressionAccess().getLessThanSignKeyword_1_0_0_0()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getGreaterThanSignKeyword_1_0_0_1()); }

	'>' 

{ after(grammarAccess.getRelationalExpressionAccess().getGreaterThanSignKeyword_1_0_0_1()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getLessThanSignEqualsSignKeyword_1_0_0_2()); }

	'<=' 

{ after(grammarAccess.getRelationalExpressionAccess().getLessThanSignEqualsSignKeyword_1_0_0_2()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getGreaterThanSignEqualsSignKeyword_1_0_0_3()); }

	'>=' 

{ after(grammarAccess.getRelationalExpressionAccess().getGreaterThanSignEqualsSignKeyword_1_0_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Alternatives_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_1_1_0()); }
(rule__RelationalExpression__Group_1_1_1_0__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_1_1_0()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_1_1_1()); }
(rule__RelationalExpression__Group_1_1_1_1__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_1_1_1()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_1_1_2()); }
(rule__RelationalExpression__Group_1_1_1_2__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_1_1_2()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_1_1_3()); }
(rule__RelationalExpression__Group_1_1_1_3__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_1_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getPlusSignKeyword_1_0_0()); }

	'+' 

{ after(grammarAccess.getAdditiveExpressionAccess().getPlusSignKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getAdditiveExpressionAccess().getHyphenMinusKeyword_1_0_1()); }

	'-' 

{ after(grammarAccess.getAdditiveExpressionAccess().getHyphenMinusKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyExpression__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyExpressionAccess().getAsteriskKeyword_1_0_0()); }

	'*' 

{ after(grammarAccess.getMultiplyExpressionAccess().getAsteriskKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getMultiplyExpressionAccess().getSolidusKeyword_1_0_1()); }

	'/' 

{ after(grammarAccess.getMultiplyExpressionAccess().getSolidusKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup_0()); }
(rule__UnaryExpression__Group_0__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup_1()); }
(rule__UnaryExpression__Group_1__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getUnaryExpressionAccess().getCaseExpressionParserRuleCall_2()); }
	rulecaseExpression
{ after(grammarAccess.getUnaryExpressionAccess().getCaseExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getUnaryExpressionAccess().getQuantifiedExpressionParserRuleCall_3()); }
	rulequantifiedExpression
{ after(grammarAccess.getUnaryExpressionAccess().getQuantifiedExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getUnaryExpressionAccess().getAtomParserRuleCall_4()); }
	ruleatom
{ after(grammarAccess.getUnaryExpressionAccess().getAtomParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getGroup_0()); }
(rule__CaseExpression__Group_0__0)
{ after(grammarAccess.getCaseExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getCaseExpressionAccess().getGroup_1()); }
(rule__CaseExpression__Group_1__0)
{ after(grammarAccess.getCaseExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getSOMEParserRuleCall_1_0()); }
	ruleSOME
{ after(grammarAccess.getQuantifiedExpressionAccess().getSOMEParserRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getQuantifiedExpressionAccess().getEXISTSParserRuleCall_1_1()); }
	ruleEXISTS
{ after(grammarAccess.getQuantifiedExpressionAccess().getEXISTSParserRuleCall_1_1()); }
)

    |(
{ before(grammarAccess.getQuantifiedExpressionAccess().getALLParserRuleCall_1_2()); }
	ruleALL
{ after(grammarAccess.getQuantifiedExpressionAccess().getALLParserRuleCall_1_2()); }
)

    |(
{ before(grammarAccess.getQuantifiedExpressionAccess().getANYParserRuleCall_1_3()); }
	ruleANY
{ after(grammarAccess.getQuantifiedExpressionAccess().getANYParserRuleCall_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpression__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getIdentifierParserRuleCall_2_0()); }
	ruleidentifier
{ after(grammarAccess.getQuantifiedExpressionAccess().getIdentifierParserRuleCall_2_0()); }
)

    |(
{ before(grammarAccess.getQuantifiedExpressionAccess().getCollectionExprParserRuleCall_2_1()); }
	rulecollectionExpr
{ after(grammarAccess.getQuantifiedExpressionAccess().getCollectionExprParserRuleCall_2_1()); }
)

    |(
{ before(grammarAccess.getQuantifiedExpressionAccess().getGroup_2_2()); }
(rule__QuantifiedExpression__Group_2_2__0)
{ after(grammarAccess.getQuantifiedExpressionAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getGroup_1_0()); }
(rule__Atom__Group_1_0__0)
{ after(grammarAccess.getAtomAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getGroup_1_1()); }
(rule__Atom__Group_1_1__0)
{ after(grammarAccess.getAtomAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
(rule__PrimaryExpression__Group_0__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getConstantParserRuleCall_1()); }
	ruleconstant
{ after(grammarAccess.getPrimaryExpressionAccess().getConstantParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_2()); }
(rule__PrimaryExpression__Group_2__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_3()); }
(rule__PrimaryExpression__Group_3__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_4()); }
(rule__PrimaryExpression__Group_4__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getExpressionOrVectorParserRuleCall_3_1_0()); }
	ruleexpressionOrVector
{ after(grammarAccess.getPrimaryExpressionAccess().getExpressionOrVectorParserRuleCall_3_1_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getSAssignment_3_1_1()); }
(rule__PrimaryExpression__SAssignment_3_1_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getSAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdentPrimary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentPrimaryAccess().getGroup_0()); }
(rule__IdentPrimary__Group_0__0)
{ after(grammarAccess.getIdentPrimaryAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getIdentPrimaryAccess().getAggregateParserRuleCall_1()); }
	ruleaggregate
{ after(grammarAccess.getIdentPrimaryAccess().getAggregateParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdentPrimary__Alternatives_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentPrimaryAccess().getGroup_0_2_0()); }
(rule__IdentPrimary__Group_0_2_0__0)
{ after(grammarAccess.getIdentPrimaryAccess().getGroup_0_2_0()); }
)

    |(
{ before(grammarAccess.getIdentPrimaryAccess().getGroup_0_2_1()); }
(rule__IdentPrimary__Group_0_2_1__0)
{ after(grammarAccess.getIdentPrimaryAccess().getGroup_0_2_1()); }
)

    |(
{ before(grammarAccess.getIdentPrimaryAccess().getGroup_0_2_2()); }
(rule__IdentPrimary__Group_0_2_2__0)
{ after(grammarAccess.getIdentPrimaryAccess().getGroup_0_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Aggregate__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getGroup_0()); }
(rule__Aggregate__Group_0__0)
{ after(grammarAccess.getAggregateAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getAggregateAccess().getGroup_1()); }
(rule__Aggregate__Group_1__0)
{ after(grammarAccess.getAggregateAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getAggregateAccess().getCollectionExprParserRuleCall_2()); }
	rulecollectionExpr
{ after(grammarAccess.getAggregateAccess().getCollectionExprParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Aggregate__Alternatives_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getSUMParserRuleCall_0_1_0()); }
	ruleSUM
{ after(grammarAccess.getAggregateAccess().getSUMParserRuleCall_0_1_0()); }
)

    |(
{ before(grammarAccess.getAggregateAccess().getAVGParserRuleCall_0_1_1()); }
	ruleAVG
{ after(grammarAccess.getAggregateAccess().getAVGParserRuleCall_0_1_1()); }
)

    |(
{ before(grammarAccess.getAggregateAccess().getMAXParserRuleCall_0_1_2()); }
	ruleMAX
{ after(grammarAccess.getAggregateAccess().getMAXParserRuleCall_0_1_2()); }
)

    |(
{ before(grammarAccess.getAggregateAccess().getMINParserRuleCall_0_1_3()); }
	ruleMIN
{ after(grammarAccess.getAggregateAccess().getMINParserRuleCall_0_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Aggregate__Alternatives_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getAsteriskKeyword_1_2_0()); }

	'*' 

{ after(grammarAccess.getAggregateAccess().getAsteriskKeyword_1_2_0()); }
)

    |(
{ before(grammarAccess.getAggregateAccess().getGroup_1_2_1()); }
(rule__Aggregate__Group_1_2_1__0)
{ after(grammarAccess.getAggregateAccess().getGroup_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Aggregate__Alternatives_1_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getDISTINCTParserRuleCall_1_2_1_0_0()); }
	ruleDISTINCT
{ after(grammarAccess.getAggregateAccess().getDISTINCTParserRuleCall_1_2_1_0_0()); }
)

    |(
{ before(grammarAccess.getAggregateAccess().getALLParserRuleCall_1_2_1_0_1()); }
	ruleALL
{ after(grammarAccess.getAggregateAccess().getALLParserRuleCall_1_2_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Aggregate__Alternatives_1_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getPathParserRuleCall_1_2_1_1_0()); }
	rulepath
{ after(grammarAccess.getAggregateAccess().getPathParserRuleCall_1_2_1_1_0()); }
)

    |(
{ before(grammarAccess.getAggregateAccess().getCollectionExprParserRuleCall_1_2_1_1_1()); }
	rulecollectionExpr
{ after(grammarAccess.getAggregateAccess().getCollectionExprParserRuleCall_1_2_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpr__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExprAccess().getELEMENTSParserRuleCall_0_0()); }
	ruleELEMENTS
{ after(grammarAccess.getCollectionExprAccess().getELEMENTSParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getCollectionExprAccess().getINDICESParserRuleCall_0_1()); }
	ruleINDICES
{ after(grammarAccess.getCollectionExprAccess().getINDICESParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundExpr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundExprAccess().getCollectionExprParserRuleCall_0()); }
	rulecollectionExpr
{ after(grammarAccess.getCompoundExprAccess().getCollectionExprParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCompoundExprAccess().getPathParserRuleCall_1()); }
	rulepath
{ after(grammarAccess.getCompoundExprAccess().getPathParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getCompoundExprAccess().getGroup_2()); }
(rule__CompoundExpr__Group_2__0)
{ after(grammarAccess.getCompoundExprAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundExpr__Alternatives_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundExprAccess().getGroup_2_1_0()); }
(rule__CompoundExpr__Group_2_1_0__0)
{ after(grammarAccess.getCompoundExprAccess().getGroup_2_1_0()); }
)

    |(
{ before(grammarAccess.getCompoundExprAccess().getSAssignment_2_1_1()); }
(rule__CompoundExpr__SAssignment_2_1_1)
{ after(grammarAccess.getCompoundExprAccess().getSAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprList__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprListAccess().getTRAILINGParserRuleCall_0_0()); }
	ruleTRAILING
{ after(grammarAccess.getExprListAccess().getTRAILINGParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getExprListAccess().getLEADINGParserRuleCall_0_1()); }
	ruleLEADING
{ after(grammarAccess.getExprListAccess().getLEADINGParserRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getExprListAccess().getBOTHParserRuleCall_0_2()); }
	ruleBOTH
{ after(grammarAccess.getExprListAccess().getBOTHParserRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprList__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprListAccess().getGroup_1_0()); }
(rule__ExprList__Group_1_0__0)
{ after(grammarAccess.getExprListAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getExprListAccess().getGroup_1_1()); }
(rule__ExprList__Group_1_1__0)
{ after(grammarAccess.getExprListAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprList__Alternatives_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getExprListAccess().getGroup_1_0_1_0()); }
(rule__ExprList__Group_1_0_1_0__0)
{ after(grammarAccess.getExprListAccess().getGroup_1_0_1_0()); }
)
(
{ before(grammarAccess.getExprListAccess().getGroup_1_0_1_0()); }
(rule__ExprList__Group_1_0_1_0__0)*
{ after(grammarAccess.getExprListAccess().getGroup_1_0_1_0()); }
)
)

    |(
{ before(grammarAccess.getExprListAccess().getGroup_1_0_1_1()); }
(rule__ExprList__Group_1_0_1_1__0)
{ after(grammarAccess.getExprListAccess().getGroup_1_0_1_1()); }
)

    |(
{ before(grammarAccess.getExprListAccess().getGroup_1_0_1_2()); }
(rule__ExprList__Group_1_0_1_2__0)
{ after(grammarAccess.getExprListAccess().getGroup_1_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getNumberParserRuleCall_0()); }
	rulenumber
{ after(grammarAccess.getConstantAccess().getNumberParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getSTRINGTerminalRuleCall_1()); }
	RULE_STRING
{ after(grammarAccess.getConstantAccess().getSTRINGTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getNULLParserRuleCall_2()); }
	ruleNULL
{ after(grammarAccess.getConstantAccess().getNULLParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getTRUEParserRuleCall_3()); }
	ruleTRUE
{ after(grammarAccess.getConstantAccess().getTRUEParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getFALSEParserRuleCall_4()); }
	ruleFALSE
{ after(grammarAccess.getConstantAccess().getFALSEParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getEMPTYParserRuleCall_5()); }
	ruleEMPTY
{ after(grammarAccess.getConstantAccess().getEMPTYParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierAccess().getGroup_0()); }
(rule__Identifier__Group_0__0)
{ after(grammarAccess.getIdentifierAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getEKeyword_1()); }

	'e' 

{ after(grammarAccess.getIdentifierAccess().getEKeyword_1()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getFKeyword_2()); }

	'f' 

{ after(grammarAccess.getIdentifierAccess().getFKeyword_2()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getDKeyword_3()); }

	'd' 

{ after(grammarAccess.getIdentifierAccess().getDKeyword_3()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getUpperKeyword_4()); }

	'upper' 

{ after(grammarAccess.getIdentifierAccess().getUpperKeyword_4()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getLowerKeyword_5()); }

	'lower' 

{ after(grammarAccess.getIdentifierAccess().getLowerKeyword_5()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getNowKeyword_6()); }

	'$now' 

{ after(grammarAccess.getIdentifierAccess().getNowKeyword_6()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getTodayKeyword_7()); }

	'$today' 

{ after(grammarAccess.getIdentifierAccess().getTodayKeyword_7()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getDateKeyword_8()); }

	'date' 

{ after(grammarAccess.getIdentifierAccess().getDateKeyword_8()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getTitleKeyword_9()); }

	'title' 

{ after(grammarAccess.getIdentifierAccess().getTitleKeyword_9()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getTypeKeyword_10()); }

	'type' 

{ after(grammarAccess.getIdentifierAccess().getTypeKeyword_10()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getIncludeKeyword_11()); }

	'include' 

{ after(grammarAccess.getIdentifierAccess().getIncludeKeyword_11()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getLengthKeyword_12()); }

	'length' 

{ after(grammarAccess.getIdentifierAccess().getLengthKeyword_12()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getENDParserRuleCall_13()); }
	ruleEND
{ after(grammarAccess.getIdentifierAccess().getENDParserRuleCall_13()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getWHENParserRuleCall_14()); }
	ruleWHEN
{ after(grammarAccess.getIdentifierAccess().getWHENParserRuleCall_14()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getFROMParserRuleCall_15()); }
	ruleFROM
{ after(grammarAccess.getIdentifierAccess().getFROMParserRuleCall_15()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getMEMBERParserRuleCall_16()); }
	ruleMEMBER
{ after(grammarAccess.getIdentifierAccess().getMEMBERParserRuleCall_16()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getGroup_0()); }
(rule__Number__Group_0__0)
{ after(grammarAccess.getNumberAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getGroup_1()); }
(rule__Number__Group_1__0)
{ after(grammarAccess.getNumberAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives_0_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getPlusSignKeyword_0_1_1_1_0()); }

	'+' 

{ after(grammarAccess.getNumberAccess().getPlusSignKeyword_0_1_1_1_0()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getHyphenMinusKeyword_0_1_1_1_1()); }

	'-' 

{ after(grammarAccess.getNumberAccess().getHyphenMinusKeyword_0_1_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives_0_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getFKeyword_0_1_2_0()); }

	'f' 

{ after(grammarAccess.getNumberAccess().getFKeyword_0_1_2_0()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getDKeyword_0_1_2_1()); }

	'd' 

{ after(grammarAccess.getNumberAccess().getDKeyword_0_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getHEXTerminalRuleCall_1_0_0()); }
	RULE_HEX
{ after(grammarAccess.getNumberAccess().getHEXTerminalRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_1()); }
	RULE_INT
{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_1()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getSIGNED_INTTerminalRuleCall_1_0_2()); }
	RULE_SIGNED_INT
{ after(grammarAccess.getNumberAccess().getSIGNED_INTTerminalRuleCall_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getLKeyword_1_1_0()); }

	'l' 

{ after(grammarAccess.getNumberAccess().getLKeyword_1_1_0()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getAlternatives_1_1_1()); }
(rule__Number__Alternatives_1_1_1)
{ after(grammarAccess.getNumberAccess().getAlternatives_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getGroup_1_1_1_0()); }
(rule__Number__Group_1_1_1_0__0)
{ after(grammarAccess.getNumberAccess().getGroup_1_1_1_0()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getGroup_1_1_1_1()); }
(rule__Number__Group_1_1_1_1__0)
{ after(grammarAccess.getNumberAccess().getGroup_1_1_1_1()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getFKeyword_1_1_1_2()); }

	'f' 

{ after(grammarAccess.getNumberAccess().getFKeyword_1_1_1_2()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getDKeyword_1_1_1_3()); }

	'd' 

{ after(grammarAccess.getNumberAccess().getDKeyword_1_1_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives_1_1_1_0_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getPlusSignKeyword_1_1_1_0_2_1_0()); }

	'+' 

{ after(grammarAccess.getNumberAccess().getPlusSignKeyword_1_1_1_0_2_1_0()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getHyphenMinusKeyword_1_1_1_0_2_1_1()); }

	'-' 

{ after(grammarAccess.getNumberAccess().getHyphenMinusKeyword_1_1_1_0_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives_1_1_1_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getFKeyword_1_1_1_0_3_0()); }

	'f' 

{ after(grammarAccess.getNumberAccess().getFKeyword_1_1_1_0_3_0()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getDKeyword_1_1_1_0_3_1()); }

	'd' 

{ after(grammarAccess.getNumberAccess().getDKeyword_1_1_1_0_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives_1_1_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getPlusSignKeyword_1_1_1_1_1_0()); }

	'+' 

{ after(grammarAccess.getNumberAccess().getPlusSignKeyword_1_1_1_1_1_0()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getHyphenMinusKeyword_1_1_1_1_1_1()); }

	'-' 

{ after(grammarAccess.getNumberAccess().getHyphenMinusKeyword_1_1_1_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives_1_1_1_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getFKeyword_1_1_1_1_3_0()); }

	'f' 

{ after(grammarAccess.getNumberAccess().getFKeyword_1_1_1_1_3_0()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getDKeyword_1_1_1_1_3_1()); }

	'd' 

{ after(grammarAccess.getNumberAccess().getDKeyword_1_1_1_1_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SELECT__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSELECTAccess().getSELECTKeyword_0()); }

	'SELECT' 

{ after(grammarAccess.getSELECTAccess().getSELECTKeyword_0()); }
)

    |(
{ before(grammarAccess.getSELECTAccess().getSelectKeyword_1()); }

	'Select' 

{ after(grammarAccess.getSELECTAccess().getSelectKeyword_1()); }
)

    |(
{ before(grammarAccess.getSELECTAccess().getSelectKeyword_2()); }

	'select' 

{ after(grammarAccess.getSELECTAccess().getSelectKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DISTINCT__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDISTINCTAccess().getDISTINCTKeyword_0()); }

	'DISTINCT' 

{ after(grammarAccess.getDISTINCTAccess().getDISTINCTKeyword_0()); }
)

    |(
{ before(grammarAccess.getDISTINCTAccess().getDistinctKeyword_1()); }

	'Distinct' 

{ after(grammarAccess.getDISTINCTAccess().getDistinctKeyword_1()); }
)

    |(
{ before(grammarAccess.getDISTINCTAccess().getDistinctKeyword_2()); }

	'distinct' 

{ after(grammarAccess.getDISTINCTAccess().getDistinctKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NEW__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNEWAccess().getNEWKeyword_0()); }

	'NEW' 

{ after(grammarAccess.getNEWAccess().getNEWKeyword_0()); }
)

    |(
{ before(grammarAccess.getNEWAccess().getNewKeyword_1()); }

	'New' 

{ after(grammarAccess.getNEWAccess().getNewKeyword_1()); }
)

    |(
{ before(grammarAccess.getNEWAccess().getNewKeyword_2()); }

	'new' 

{ after(grammarAccess.getNEWAccess().getNewKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OBJECT__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOBJECTAccess().getOBJECTKeyword_0()); }

	'OBJECT' 

{ after(grammarAccess.getOBJECTAccess().getOBJECTKeyword_0()); }
)

    |(
{ before(grammarAccess.getOBJECTAccess().getObjectKeyword_1()); }

	'Object' 

{ after(grammarAccess.getOBJECTAccess().getObjectKeyword_1()); }
)

    |(
{ before(grammarAccess.getOBJECTAccess().getObjectKeyword_2()); }

	'object' 

{ after(grammarAccess.getOBJECTAccess().getObjectKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FROM__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFROMAccess().getFROMKeyword_0()); }

	'FROM' 

{ after(grammarAccess.getFROMAccess().getFROMKeyword_0()); }
)

    |(
{ before(grammarAccess.getFROMAccess().getFromKeyword_1()); }

	'From' 

{ after(grammarAccess.getFROMAccess().getFromKeyword_1()); }
)

    |(
{ before(grammarAccess.getFROMAccess().getFromKeyword_2()); }

	'from' 

{ after(grammarAccess.getFROMAccess().getFromKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LEFT__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLEFTAccess().getLEFTKeyword_0()); }

	'LEFT' 

{ after(grammarAccess.getLEFTAccess().getLEFTKeyword_0()); }
)

    |(
{ before(grammarAccess.getLEFTAccess().getLeftKeyword_1()); }

	'Left' 

{ after(grammarAccess.getLEFTAccess().getLeftKeyword_1()); }
)

    |(
{ before(grammarAccess.getLEFTAccess().getLeftKeyword_2()); }

	'left' 

{ after(grammarAccess.getLEFTAccess().getLeftKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RIGHT__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRIGHTAccess().getRIGHTKeyword_0()); }

	'RIGHT' 

{ after(grammarAccess.getRIGHTAccess().getRIGHTKeyword_0()); }
)

    |(
{ before(grammarAccess.getRIGHTAccess().getRightKeyword_1()); }

	'Right' 

{ after(grammarAccess.getRIGHTAccess().getRightKeyword_1()); }
)

    |(
{ before(grammarAccess.getRIGHTAccess().getRightKeyword_2()); }

	'right' 

{ after(grammarAccess.getRIGHTAccess().getRightKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OUTER__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOUTERAccess().getOUTERKeyword_0()); }

	'OUTER' 

{ after(grammarAccess.getOUTERAccess().getOUTERKeyword_0()); }
)

    |(
{ before(grammarAccess.getOUTERAccess().getOuterKeyword_1()); }

	'Outer' 

{ after(grammarAccess.getOUTERAccess().getOuterKeyword_1()); }
)

    |(
{ before(grammarAccess.getOUTERAccess().getOuterKeyword_2()); }

	'outer' 

{ after(grammarAccess.getOUTERAccess().getOuterKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FULL__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFULLAccess().getFULLKeyword_0()); }

	'FULL' 

{ after(grammarAccess.getFULLAccess().getFULLKeyword_0()); }
)

    |(
{ before(grammarAccess.getFULLAccess().getFullKeyword_1()); }

	'Full' 

{ after(grammarAccess.getFULLAccess().getFullKeyword_1()); }
)

    |(
{ before(grammarAccess.getFULLAccess().getFullKeyword_2()); }

	'full' 

{ after(grammarAccess.getFULLAccess().getFullKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__INNER__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getINNERAccess().getINNERKeyword_0()); }

	'INNER' 

{ after(grammarAccess.getINNERAccess().getINNERKeyword_0()); }
)

    |(
{ before(grammarAccess.getINNERAccess().getInnerKeyword_1()); }

	'Inner' 

{ after(grammarAccess.getINNERAccess().getInnerKeyword_1()); }
)

    |(
{ before(grammarAccess.getINNERAccess().getInnerKeyword_2()); }

	'inner' 

{ after(grammarAccess.getINNERAccess().getInnerKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JOIN__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJOINAccess().getJOINKeyword_0()); }

	'JOIN' 

{ after(grammarAccess.getJOINAccess().getJOINKeyword_0()); }
)

    |(
{ before(grammarAccess.getJOINAccess().getJoinKeyword_1()); }

	'Join' 

{ after(grammarAccess.getJOINAccess().getJoinKeyword_1()); }
)

    |(
{ before(grammarAccess.getJOINAccess().getJoinKeyword_2()); }

	'join' 

{ after(grammarAccess.getJOINAccess().getJoinKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FETCH__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFETCHAccess().getFETCHKeyword_0()); }

	'FETCH' 

{ after(grammarAccess.getFETCHAccess().getFETCHKeyword_0()); }
)

    |(
{ before(grammarAccess.getFETCHAccess().getFetchKeyword_1()); }

	'Fetch' 

{ after(grammarAccess.getFETCHAccess().getFetchKeyword_1()); }
)

    |(
{ before(grammarAccess.getFETCHAccess().getFetchKeyword_2()); }

	'fetch' 

{ after(grammarAccess.getFETCHAccess().getFetchKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WITH__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWITHAccess().getWITHKeyword_0()); }

	'WITH' 

{ after(grammarAccess.getWITHAccess().getWITHKeyword_0()); }
)

    |(
{ before(grammarAccess.getWITHAccess().getWithKeyword_1()); }

	'With' 

{ after(grammarAccess.getWITHAccess().getWithKeyword_1()); }
)

    |(
{ before(grammarAccess.getWITHAccess().getWithKeyword_2()); }

	'with' 

{ after(grammarAccess.getWITHAccess().getWithKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IN__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getINAccess().getINKeyword_0()); }

	'IN' 

{ after(grammarAccess.getINAccess().getINKeyword_0()); }
)

    |(
{ before(grammarAccess.getINAccess().getInKeyword_1()); }

	'In' 

{ after(grammarAccess.getINAccess().getInKeyword_1()); }
)

    |(
{ before(grammarAccess.getINAccess().getInKeyword_2()); }

	'in' 

{ after(grammarAccess.getINAccess().getInKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CLASS__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCLASSAccess().getCLASSKeyword_0()); }

	'CLASS' 

{ after(grammarAccess.getCLASSAccess().getCLASSKeyword_0()); }
)

    |(
{ before(grammarAccess.getCLASSAccess().getClassKeyword_1()); }

	'Class' 

{ after(grammarAccess.getCLASSAccess().getClassKeyword_1()); }
)

    |(
{ before(grammarAccess.getCLASSAccess().getClassKeyword_2()); }

	'class' 

{ after(grammarAccess.getCLASSAccess().getClassKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ELEMENTS__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getELEMENTSAccess().getELEMENTSKeyword_0()); }

	'ELEMENTS' 

{ after(grammarAccess.getELEMENTSAccess().getELEMENTSKeyword_0()); }
)

    |(
{ before(grammarAccess.getELEMENTSAccess().getElementsKeyword_1()); }

	'Elements' 

{ after(grammarAccess.getELEMENTSAccess().getElementsKeyword_1()); }
)

    |(
{ before(grammarAccess.getELEMENTSAccess().getElementsKeyword_2()); }

	'elements' 

{ after(grammarAccess.getELEMENTSAccess().getElementsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AS__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASAccess().getASKeyword_0()); }

	'AS' 

{ after(grammarAccess.getASAccess().getASKeyword_0()); }
)

    |(
{ before(grammarAccess.getASAccess().getAsKeyword_1()); }

	'As' 

{ after(grammarAccess.getASAccess().getAsKeyword_1()); }
)

    |(
{ before(grammarAccess.getASAccess().getAsKeyword_2()); }

	'as' 

{ after(grammarAccess.getASAccess().getAsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PROPERTIES__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPROPERTIESAccess().getPROPERTIESKeyword_0()); }

	'PROPERTIES' 

{ after(grammarAccess.getPROPERTIESAccess().getPROPERTIESKeyword_0()); }
)

    |(
{ before(grammarAccess.getPROPERTIESAccess().getPropertiesKeyword_1()); }

	'Properties' 

{ after(grammarAccess.getPROPERTIESAccess().getPropertiesKeyword_1()); }
)

    |(
{ before(grammarAccess.getPROPERTIESAccess().getPropertiesKeyword_2()); }

	'properties' 

{ after(grammarAccess.getPROPERTIESAccess().getPropertiesKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GROUP_BY__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGROUP_BYAccess().getGROUPKeyword_0_0()); }

	'GROUP' 

{ after(grammarAccess.getGROUP_BYAccess().getGROUPKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getGROUP_BYAccess().getGroupKeyword_0_1()); }

	'Group' 

{ after(grammarAccess.getGROUP_BYAccess().getGroupKeyword_0_1()); }
)

    |(
{ before(grammarAccess.getGROUP_BYAccess().getGroupKeyword_0_2()); }

	'group' 

{ after(grammarAccess.getGROUP_BYAccess().getGroupKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ORDER_BY__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getORDER_BYAccess().getORDERKeyword_0_0()); }

	'ORDER' 

{ after(grammarAccess.getORDER_BYAccess().getORDERKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getORDER_BYAccess().getOrderKeyword_0_1()); }

	'Order' 

{ after(grammarAccess.getORDER_BYAccess().getOrderKeyword_0_1()); }
)

    |(
{ before(grammarAccess.getORDER_BYAccess().getOrderKeyword_0_2()); }

	'order' 

{ after(grammarAccess.getORDER_BYAccess().getOrderKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BY__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBYAccess().getBYKeyword_0()); }

	'BY' 

{ after(grammarAccess.getBYAccess().getBYKeyword_0()); }
)

    |(
{ before(grammarAccess.getBYAccess().getByKeyword_1()); }

	'By' 

{ after(grammarAccess.getBYAccess().getByKeyword_1()); }
)

    |(
{ before(grammarAccess.getBYAccess().getByKeyword_2()); }

	'by' 

{ after(grammarAccess.getBYAccess().getByKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ASC__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASCAccess().getASCKeyword_0()); }

	'ASC' 

{ after(grammarAccess.getASCAccess().getASCKeyword_0()); }
)

    |(
{ before(grammarAccess.getASCAccess().getAscKeyword_1()); }

	'Asc' 

{ after(grammarAccess.getASCAccess().getAscKeyword_1()); }
)

    |(
{ before(grammarAccess.getASCAccess().getAscKeyword_2()); }

	'asc' 

{ after(grammarAccess.getASCAccess().getAscKeyword_2()); }
)

    |(
{ before(grammarAccess.getASCAccess().getASCENDINGKeyword_3()); }

	'ASCENDING' 

{ after(grammarAccess.getASCAccess().getASCENDINGKeyword_3()); }
)

    |(
{ before(grammarAccess.getASCAccess().getAscendingKeyword_4()); }

	'Ascending' 

{ after(grammarAccess.getASCAccess().getAscendingKeyword_4()); }
)

    |(
{ before(grammarAccess.getASCAccess().getAscendingKeyword_5()); }

	'ascending' 

{ after(grammarAccess.getASCAccess().getAscendingKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DESC__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDESCAccess().getDESCKeyword_0()); }

	'DESC' 

{ after(grammarAccess.getDESCAccess().getDESCKeyword_0()); }
)

    |(
{ before(grammarAccess.getDESCAccess().getDescKeyword_1()); }

	'Desc' 

{ after(grammarAccess.getDESCAccess().getDescKeyword_1()); }
)

    |(
{ before(grammarAccess.getDESCAccess().getDescKeyword_2()); }

	'desc' 

{ after(grammarAccess.getDESCAccess().getDescKeyword_2()); }
)

    |(
{ before(grammarAccess.getDESCAccess().getDESCENDINGKeyword_3()); }

	'DESCENDING' 

{ after(grammarAccess.getDESCAccess().getDESCENDINGKeyword_3()); }
)

    |(
{ before(grammarAccess.getDESCAccess().getDescendingKeyword_4()); }

	'Descending' 

{ after(grammarAccess.getDESCAccess().getDescendingKeyword_4()); }
)

    |(
{ before(grammarAccess.getDESCAccess().getDescendingKeyword_5()); }

	'descending' 

{ after(grammarAccess.getDESCAccess().getDescendingKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HAVING__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHAVINGAccess().getHAVINGKeyword_0()); }

	'HAVING' 

{ after(grammarAccess.getHAVINGAccess().getHAVINGKeyword_0()); }
)

    |(
{ before(grammarAccess.getHAVINGAccess().getHavingKeyword_1()); }

	'Having' 

{ after(grammarAccess.getHAVINGAccess().getHavingKeyword_1()); }
)

    |(
{ before(grammarAccess.getHAVINGAccess().getHavingKeyword_2()); }

	'having' 

{ after(grammarAccess.getHAVINGAccess().getHavingKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WHERE__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWHEREAccess().getWHEREKeyword_0()); }

	'WHERE' 

{ after(grammarAccess.getWHEREAccess().getWHEREKeyword_0()); }
)

    |(
{ before(grammarAccess.getWHEREAccess().getWhereKeyword_1()); }

	'Where' 

{ after(grammarAccess.getWHEREAccess().getWhereKeyword_1()); }
)

    |(
{ before(grammarAccess.getWHEREAccess().getWhereKeyword_2()); }

	'where' 

{ after(grammarAccess.getWHEREAccess().getWhereKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OR__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getORAccess().getORKeyword_0()); }

	'OR' 

{ after(grammarAccess.getORAccess().getORKeyword_0()); }
)

    |(
{ before(grammarAccess.getORAccess().getOrKeyword_1()); }

	'Or' 

{ after(grammarAccess.getORAccess().getOrKeyword_1()); }
)

    |(
{ before(grammarAccess.getORAccess().getOrKeyword_2()); }

	'or' 

{ after(grammarAccess.getORAccess().getOrKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AND__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANDAccess().getANDKeyword_0()); }

	'AND' 

{ after(grammarAccess.getANDAccess().getANDKeyword_0()); }
)

    |(
{ before(grammarAccess.getANDAccess().getAndKeyword_1()); }

	'And' 

{ after(grammarAccess.getANDAccess().getAndKeyword_1()); }
)

    |(
{ before(grammarAccess.getANDAccess().getAndKeyword_2()); }

	'and' 

{ after(grammarAccess.getANDAccess().getAndKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NOT__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNOTAccess().getNOTKeyword_0()); }

	'NOT' 

{ after(grammarAccess.getNOTAccess().getNOTKeyword_0()); }
)

    |(
{ before(grammarAccess.getNOTAccess().getNotKeyword_1()); }

	'Not' 

{ after(grammarAccess.getNOTAccess().getNotKeyword_1()); }
)

    |(
{ before(grammarAccess.getNOTAccess().getNotKeyword_2()); }

	'not' 

{ after(grammarAccess.getNOTAccess().getNotKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IS__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getISAccess().getISKeyword_0()); }

	'IS' 

{ after(grammarAccess.getISAccess().getISKeyword_0()); }
)

    |(
{ before(grammarAccess.getISAccess().getIsKeyword_1()); }

	'Is' 

{ after(grammarAccess.getISAccess().getIsKeyword_1()); }
)

    |(
{ before(grammarAccess.getISAccess().getIsKeyword_2()); }

	'is' 

{ after(grammarAccess.getISAccess().getIsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BETWEEN__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBETWEENAccess().getBETWEENKeyword_0()); }

	'BETWEEN' 

{ after(grammarAccess.getBETWEENAccess().getBETWEENKeyword_0()); }
)

    |(
{ before(grammarAccess.getBETWEENAccess().getBetweenKeyword_1()); }

	'Between' 

{ after(grammarAccess.getBETWEENAccess().getBetweenKeyword_1()); }
)

    |(
{ before(grammarAccess.getBETWEENAccess().getBetweenKeyword_2()); }

	'between' 

{ after(grammarAccess.getBETWEENAccess().getBetweenKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LIKE__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLIKEAccess().getLIKEKeyword_0()); }

	'LIKE' 

{ after(grammarAccess.getLIKEAccess().getLIKEKeyword_0()); }
)

    |(
{ before(grammarAccess.getLIKEAccess().getLikeKeyword_1()); }

	'Like' 

{ after(grammarAccess.getLIKEAccess().getLikeKeyword_1()); }
)

    |(
{ before(grammarAccess.getLIKEAccess().getLikeKeyword_2()); }

	'like' 

{ after(grammarAccess.getLIKEAccess().getLikeKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MEMBER__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMEMBERAccess().getMEMBERKeyword_0()); }

	'MEMBER' 

{ after(grammarAccess.getMEMBERAccess().getMEMBERKeyword_0()); }
)

    |(
{ before(grammarAccess.getMEMBERAccess().getMemberKeyword_1()); }

	'Member' 

{ after(grammarAccess.getMEMBERAccess().getMemberKeyword_1()); }
)

    |(
{ before(grammarAccess.getMEMBERAccess().getMemberKeyword_2()); }

	'member' 

{ after(grammarAccess.getMEMBERAccess().getMemberKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OF__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOFAccess().getOFKeyword_0()); }

	'OF' 

{ after(grammarAccess.getOFAccess().getOFKeyword_0()); }
)

    |(
{ before(grammarAccess.getOFAccess().getOfKeyword_1()); }

	'Of' 

{ after(grammarAccess.getOFAccess().getOfKeyword_1()); }
)

    |(
{ before(grammarAccess.getOFAccess().getOfKeyword_2()); }

	'of' 

{ after(grammarAccess.getOFAccess().getOfKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ESCAPE__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getESCAPEAccess().getESCAPEKeyword_0()); }

	'ESCAPE' 

{ after(grammarAccess.getESCAPEAccess().getESCAPEKeyword_0()); }
)

    |(
{ before(grammarAccess.getESCAPEAccess().getEscapeKeyword_1()); }

	'Escape' 

{ after(grammarAccess.getESCAPEAccess().getEscapeKeyword_1()); }
)

    |(
{ before(grammarAccess.getESCAPEAccess().getEscapeKeyword_2()); }

	'escape' 

{ after(grammarAccess.getESCAPEAccess().getEscapeKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CASE__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCASEAccess().getCASEKeyword_0()); }

	'CASE' 

{ after(grammarAccess.getCASEAccess().getCASEKeyword_0()); }
)

    |(
{ before(grammarAccess.getCASEAccess().getCaseKeyword_1()); }

	'Case' 

{ after(grammarAccess.getCASEAccess().getCaseKeyword_1()); }
)

    |(
{ before(grammarAccess.getCASEAccess().getCaseKeyword_2()); }

	'case' 

{ after(grammarAccess.getCASEAccess().getCaseKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__END__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getENDAccess().getENDKeyword_0()); }

	'END' 

{ after(grammarAccess.getENDAccess().getENDKeyword_0()); }
)

    |(
{ before(grammarAccess.getENDAccess().getEndKeyword_1()); }

	'End' 

{ after(grammarAccess.getENDAccess().getEndKeyword_1()); }
)

    |(
{ before(grammarAccess.getENDAccess().getEndKeyword_2()); }

	'end' 

{ after(grammarAccess.getENDAccess().getEndKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WHEN__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWHENAccess().getWHENKeyword_0()); }

	'WHEN' 

{ after(grammarAccess.getWHENAccess().getWHENKeyword_0()); }
)

    |(
{ before(grammarAccess.getWHENAccess().getWhenKeyword_1()); }

	'When' 

{ after(grammarAccess.getWHENAccess().getWhenKeyword_1()); }
)

    |(
{ before(grammarAccess.getWHENAccess().getWhenKeyword_2()); }

	'when' 

{ after(grammarAccess.getWHENAccess().getWhenKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__THEN__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTHENAccess().getTHENKeyword_0()); }

	'THEN' 

{ after(grammarAccess.getTHENAccess().getTHENKeyword_0()); }
)

    |(
{ before(grammarAccess.getTHENAccess().getThenKeyword_1()); }

	'Then' 

{ after(grammarAccess.getTHENAccess().getThenKeyword_1()); }
)

    |(
{ before(grammarAccess.getTHENAccess().getThenKeyword_2()); }

	'then' 

{ after(grammarAccess.getTHENAccess().getThenKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ELSE__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getELSEAccess().getELSEKeyword_0()); }

	'ELSE' 

{ after(grammarAccess.getELSEAccess().getELSEKeyword_0()); }
)

    |(
{ before(grammarAccess.getELSEAccess().getElseKeyword_1()); }

	'Else' 

{ after(grammarAccess.getELSEAccess().getElseKeyword_1()); }
)

    |(
{ before(grammarAccess.getELSEAccess().getElseKeyword_2()); }

	'else' 

{ after(grammarAccess.getELSEAccess().getElseKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SOME__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSOMEAccess().getSOMEKeyword_0()); }

	'SOME' 

{ after(grammarAccess.getSOMEAccess().getSOMEKeyword_0()); }
)

    |(
{ before(grammarAccess.getSOMEAccess().getSomeKeyword_1()); }

	'Some' 

{ after(grammarAccess.getSOMEAccess().getSomeKeyword_1()); }
)

    |(
{ before(grammarAccess.getSOMEAccess().getSomeKeyword_2()); }

	'some' 

{ after(grammarAccess.getSOMEAccess().getSomeKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EXISTS__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEXISTSAccess().getEXISTSKeyword_0()); }

	'EXISTS' 

{ after(grammarAccess.getEXISTSAccess().getEXISTSKeyword_0()); }
)

    |(
{ before(grammarAccess.getEXISTSAccess().getExistsKeyword_1()); }

	'Exists' 

{ after(grammarAccess.getEXISTSAccess().getExistsKeyword_1()); }
)

    |(
{ before(grammarAccess.getEXISTSAccess().getExistsKeyword_2()); }

	'exists' 

{ after(grammarAccess.getEXISTSAccess().getExistsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ALL__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getALLAccess().getALLKeyword_0()); }

	'ALL' 

{ after(grammarAccess.getALLAccess().getALLKeyword_0()); }
)

    |(
{ before(grammarAccess.getALLAccess().getAllKeyword_1()); }

	'All' 

{ after(grammarAccess.getALLAccess().getAllKeyword_1()); }
)

    |(
{ before(grammarAccess.getALLAccess().getAllKeyword_2()); }

	'all' 

{ after(grammarAccess.getALLAccess().getAllKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ANY__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANYAccess().getANYKeyword_0()); }

	'ANY' 

{ after(grammarAccess.getANYAccess().getANYKeyword_0()); }
)

    |(
{ before(grammarAccess.getANYAccess().getAnyKeyword_1()); }

	'Any' 

{ after(grammarAccess.getANYAccess().getAnyKeyword_1()); }
)

    |(
{ before(grammarAccess.getANYAccess().getAnyKeyword_2()); }

	'any' 

{ after(grammarAccess.getANYAccess().getAnyKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SUM__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSUMAccess().getSUMKeyword_0()); }

	'SUM' 

{ after(grammarAccess.getSUMAccess().getSUMKeyword_0()); }
)

    |(
{ before(grammarAccess.getSUMAccess().getSumKeyword_1()); }

	'Sum' 

{ after(grammarAccess.getSUMAccess().getSumKeyword_1()); }
)

    |(
{ before(grammarAccess.getSUMAccess().getSumKeyword_2()); }

	'sum' 

{ after(grammarAccess.getSUMAccess().getSumKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AVG__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAVGAccess().getAVGKeyword_0()); }

	'AVG' 

{ after(grammarAccess.getAVGAccess().getAVGKeyword_0()); }
)

    |(
{ before(grammarAccess.getAVGAccess().getAvgKeyword_1()); }

	'Avg' 

{ after(grammarAccess.getAVGAccess().getAvgKeyword_1()); }
)

    |(
{ before(grammarAccess.getAVGAccess().getAvgKeyword_2()); }

	'avg' 

{ after(grammarAccess.getAVGAccess().getAvgKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MAX__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMAXAccess().getMAXKeyword_0()); }

	'MAX' 

{ after(grammarAccess.getMAXAccess().getMAXKeyword_0()); }
)

    |(
{ before(grammarAccess.getMAXAccess().getMaxKeyword_1()); }

	'Max' 

{ after(grammarAccess.getMAXAccess().getMaxKeyword_1()); }
)

    |(
{ before(grammarAccess.getMAXAccess().getMaxKeyword_2()); }

	'max' 

{ after(grammarAccess.getMAXAccess().getMaxKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MIN__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMINAccess().getMINKeyword_0()); }

	'MIN' 

{ after(grammarAccess.getMINAccess().getMINKeyword_0()); }
)

    |(
{ before(grammarAccess.getMINAccess().getMinKeyword_1()); }

	'Min' 

{ after(grammarAccess.getMINAccess().getMinKeyword_1()); }
)

    |(
{ before(grammarAccess.getMINAccess().getMinKeyword_2()); }

	'min' 

{ after(grammarAccess.getMINAccess().getMinKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__COUNT__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCOUNTAccess().getCOUNTKeyword_0()); }

	'COUNT' 

{ after(grammarAccess.getCOUNTAccess().getCOUNTKeyword_0()); }
)

    |(
{ before(grammarAccess.getCOUNTAccess().getCountKeyword_1()); }

	'Count' 

{ after(grammarAccess.getCOUNTAccess().getCountKeyword_1()); }
)

    |(
{ before(grammarAccess.getCOUNTAccess().getCountKeyword_2()); }

	'count' 

{ after(grammarAccess.getCOUNTAccess().getCountKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__INDICES__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getINDICESAccess().getINDICESKeyword_0()); }

	'INDICES' 

{ after(grammarAccess.getINDICESAccess().getINDICESKeyword_0()); }
)

    |(
{ before(grammarAccess.getINDICESAccess().getIndicesKeyword_1()); }

	'Indices' 

{ after(grammarAccess.getINDICESAccess().getIndicesKeyword_1()); }
)

    |(
{ before(grammarAccess.getINDICESAccess().getIndicesKeyword_2()); }

	'indices' 

{ after(grammarAccess.getINDICESAccess().getIndicesKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TRAILING__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTRAILINGAccess().getTRAILINGKeyword_0()); }

	'TRAILING' 

{ after(grammarAccess.getTRAILINGAccess().getTRAILINGKeyword_0()); }
)

    |(
{ before(grammarAccess.getTRAILINGAccess().getTrailingKeyword_1()); }

	'Trailing' 

{ after(grammarAccess.getTRAILINGAccess().getTrailingKeyword_1()); }
)

    |(
{ before(grammarAccess.getTRAILINGAccess().getTrailingKeyword_2()); }

	'trailing' 

{ after(grammarAccess.getTRAILINGAccess().getTrailingKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LEADING__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLEADINGAccess().getLEADINGKeyword_0()); }

	'LEADING' 

{ after(grammarAccess.getLEADINGAccess().getLEADINGKeyword_0()); }
)

    |(
{ before(grammarAccess.getLEADINGAccess().getLeadingKeyword_1()); }

	'Leading' 

{ after(grammarAccess.getLEADINGAccess().getLeadingKeyword_1()); }
)

    |(
{ before(grammarAccess.getLEADINGAccess().getLeadingKeyword_2()); }

	'leading' 

{ after(grammarAccess.getLEADINGAccess().getLeadingKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BOTH__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBOTHAccess().getBOTHKeyword_0()); }

	'BOTH' 

{ after(grammarAccess.getBOTHAccess().getBOTHKeyword_0()); }
)

    |(
{ before(grammarAccess.getBOTHAccess().getBothKeyword_1()); }

	'Both' 

{ after(grammarAccess.getBOTHAccess().getBothKeyword_1()); }
)

    |(
{ before(grammarAccess.getBOTHAccess().getBothKeyword_2()); }

	'both' 

{ after(grammarAccess.getBOTHAccess().getBothKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NULL__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNULLAccess().getNULLKeyword_0()); }

	'NULL' 

{ after(grammarAccess.getNULLAccess().getNULLKeyword_0()); }
)

    |(
{ before(grammarAccess.getNULLAccess().getNullKeyword_1()); }

	'Null' 

{ after(grammarAccess.getNULLAccess().getNullKeyword_1()); }
)

    |(
{ before(grammarAccess.getNULLAccess().getNullKeyword_2()); }

	'null' 

{ after(grammarAccess.getNULLAccess().getNullKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TRUE__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTRUEAccess().getTRUEKeyword_0()); }

	'TRUE' 

{ after(grammarAccess.getTRUEAccess().getTRUEKeyword_0()); }
)

    |(
{ before(grammarAccess.getTRUEAccess().getTrueKeyword_1()); }

	'True' 

{ after(grammarAccess.getTRUEAccess().getTrueKeyword_1()); }
)

    |(
{ before(grammarAccess.getTRUEAccess().getTrueKeyword_2()); }

	'true' 

{ after(grammarAccess.getTRUEAccess().getTrueKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FALSE__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFALSEAccess().getFALSEKeyword_0()); }

	'FALSE' 

{ after(grammarAccess.getFALSEAccess().getFALSEKeyword_0()); }
)

    |(
{ before(grammarAccess.getFALSEAccess().getFalseKeyword_1()); }

	'False' 

{ after(grammarAccess.getFALSEAccess().getFalseKeyword_1()); }
)

    |(
{ before(grammarAccess.getFALSEAccess().getFalseKeyword_2()); }

	'false' 

{ after(grammarAccess.getFALSEAccess().getFalseKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EMPTY__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEMPTYAccess().getEMPTYKeyword_0()); }

	'EMPTY' 

{ after(grammarAccess.getEMPTYAccess().getEMPTYKeyword_0()); }
)

    |(
{ before(grammarAccess.getEMPTYAccess().getEmptyKeyword_1()); }

	'Empty' 

{ after(grammarAccess.getEMPTYAccess().getEmptyKeyword_1()); }
)

    |(
{ before(grammarAccess.getEMPTYAccess().getEmptyKeyword_2()); }

	'empty' 

{ after(grammarAccess.getEMPTYAccess().getEmptyKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Keyword__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeywordAccess().getAllKeyword_0()); }

	'all' 

{ after(grammarAccess.getKeywordAccess().getAllKeyword_0()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getLengthKeyword_1()); }

	'length' 

{ after(grammarAccess.getKeywordAccess().getLengthKeyword_1()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getCharKeyword_2()); }

	'char' 

{ after(grammarAccess.getKeywordAccess().getCharKeyword_2()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getTypeKeyword_3()); }

	'type' 

{ after(grammarAccess.getKeywordAccess().getTypeKeyword_3()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getFileKeyword_4()); }

	'file' 

{ after(grammarAccess.getKeywordAccess().getFileKeyword_4()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getTextKeyword_5()); }

	'text' 

{ after(grammarAccess.getKeywordAccess().getTextKeyword_5()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getTitleKeyword_6()); }

	'title' 

{ after(grammarAccess.getKeywordAccess().getTitleKeyword_6()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getMaxKeyword_7()); }

	'max' 

{ after(grammarAccess.getKeywordAccess().getMaxKeyword_7()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getWhenKeyword_8()); }

	'when' 

{ after(grammarAccess.getKeywordAccess().getWhenKeyword_8()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getMemberKeyword_9()); }

	'member' 

{ after(grammarAccess.getKeywordAccess().getMemberKeyword_9()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getEndKeyword_10()); }

	'end' 

{ after(grammarAccess.getKeywordAccess().getEndKeyword_10()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getObjectKeyword_11()); }

	'object' 

{ after(grammarAccess.getKeywordAccess().getObjectKeyword_11()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getDateKeyword_12()); }

	'date' 

{ after(grammarAccess.getKeywordAccess().getDateKeyword_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__DataDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataDefinitionAccess().getLINEBREAKTerminalRuleCall_0()); }
(	RULE_LINEBREAK)*
{ after(grammarAccess.getDataDefinitionAccess().getLINEBREAKTerminalRuleCall_0()); }
)

	rule__DataDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__DataDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getDataDefinitionAccess().getGroup_1()); }
(rule__DataDefinition__Group_1__0)
{ after(grammarAccess.getDataDefinitionAccess().getGroup_1()); }
)
(
{ before(grammarAccess.getDataDefinitionAccess().getGroup_1()); }
(rule__DataDefinition__Group_1__0)*
{ after(grammarAccess.getDataDefinitionAccess().getGroup_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataDefinition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataDefinitionAccess().getDAssignment_1_0()); }
(rule__DataDefinition__DAssignment_1_0)
{ after(grammarAccess.getDataDefinitionAccess().getDAssignment_1_0()); }
)

	rule__DataDefinition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__DataDefinition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataDefinitionAccess().getFIELDCOMMENTTerminalRuleCall_1_1()); }
(	RULE_FIELDCOMMENT)?
{ after(grammarAccess.getDataDefinitionAccess().getFIELDCOMMENTTerminalRuleCall_1_1()); }
)

	rule__DataDefinition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__DataDefinition__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataDefinitionAccess().getLINEBREAKTerminalRuleCall_1_2()); }
(	RULE_LINEBREAK)*
{ after(grammarAccess.getDataDefinitionAccess().getLINEBREAKTerminalRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FieldDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getNameAssignment_0()); }
(rule__FieldDeclaration__NameAssignment_0)
{ after(grammarAccess.getFieldDeclarationAccess().getNameAssignment_0()); }
)

	rule__FieldDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FieldDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getFieldDeclarationAccess().getEqualsSignKeyword_1()); }
)

	rule__FieldDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__FieldDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getGroup_2()); }
(rule__FieldDeclaration__Group_2__0)?
{ after(grammarAccess.getFieldDeclarationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FieldDeclaration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getModifiersAssignment_2_0()); }
(rule__FieldDeclaration__ModifiersAssignment_2_0)
{ after(grammarAccess.getFieldDeclarationAccess().getModifiersAssignment_2_0()); }
)

	rule__FieldDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FieldDeclaration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getTypedefAssignment_2_1()); }
(rule__FieldDeclaration__TypedefAssignment_2_1)
{ after(grammarAccess.getFieldDeclarationAccess().getTypedefAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Modifiers__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifiersAccess().getNotNullAssignment_2_0()); }
(rule__Modifiers__NotNullAssignment_2_0)
{ after(grammarAccess.getModifiersAccess().getNotNullAssignment_2_0()); }
)

	rule__Modifiers__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Modifiers__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifiersAccess().getNullKeyword_2_1()); }

	'null' 

{ after(grammarAccess.getModifiersAccess().getNullKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Modifiers__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifiersAccess().getNotEmptyAssignment_3_0()); }
(rule__Modifiers__NotEmptyAssignment_3_0)
{ after(grammarAccess.getModifiersAccess().getNotEmptyAssignment_3_0()); }
)

	rule__Modifiers__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Modifiers__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifiersAccess().getEmptyKeyword_3_1()); }

	'empty' 

{ after(grammarAccess.getModifiersAccess().getEmptyKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FieldType__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldTypeAccess().getSetKeyword_2_0()); }

	'set' 

{ after(grammarAccess.getFieldTypeAccess().getSetKeyword_2_0()); }
)

	rule__FieldType__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FieldType__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldTypeAccess().getCharEnumParserRuleCall_2_1()); }
	rulecharEnum
{ after(grammarAccess.getFieldTypeAccess().getCharEnumParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FieldType__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldTypeAccess().getSetKeyword_4_0()); }

	'set' 

{ after(grammarAccess.getFieldTypeAccess().getSetKeyword_4_0()); }
)

	rule__FieldType__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FieldType__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldTypeAccess().getIntEnumParserRuleCall_4_1()); }
	ruleintEnum
{ after(grammarAccess.getFieldTypeAccess().getIntEnumParserRuleCall_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FieldType__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldTypeAccess().getFieldTypeAction_5_0()); }
(

)
{ after(grammarAccess.getFieldTypeAccess().getFieldTypeAction_5_0()); }
)

	rule__FieldType__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FieldType__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldTypeAccess().getTypeAssignment_5_1()); }
(rule__FieldType__TypeAssignment_5_1)
{ after(grammarAccess.getFieldTypeAccess().getTypeAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IntEnum__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntEnumAccess().getNameAssignment_0()); }
(rule__IntEnum__NameAssignment_0)
{ after(grammarAccess.getIntEnumAccess().getNameAssignment_0()); }
)

	rule__IntEnum__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__IntEnum__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntEnumAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getIntEnumAccess().getLeftCurlyBracketKeyword_1()); }
)

	rule__IntEnum__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__IntEnum__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntEnumAccess().getValuesAssignment_2()); }
(rule__IntEnum__ValuesAssignment_2)
{ after(grammarAccess.getIntEnumAccess().getValuesAssignment_2()); }
)

	rule__IntEnum__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__IntEnum__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntEnumAccess().getGroup_3()); }
(rule__IntEnum__Group_3__0)*
{ after(grammarAccess.getIntEnumAccess().getGroup_3()); }
)

	rule__IntEnum__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__IntEnum__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntEnumAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getIntEnumAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__IntEnum__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntEnumAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getIntEnumAccess().getCommaKeyword_3_0()); }
)

	rule__IntEnum__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}


rule__IntEnum__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntEnumAccess().getValuesAssignment_3_1()); }
(rule__IntEnum__ValuesAssignment_3_1)
{ after(grammarAccess.getIntEnumAccess().getValuesAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CharEnum__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharEnumAccess().getNameAssignment_0()); }
(rule__CharEnum__NameAssignment_0)
{ after(grammarAccess.getCharEnumAccess().getNameAssignment_0()); }
)

	rule__CharEnum__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CharEnum__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharEnumAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getCharEnumAccess().getLeftCurlyBracketKeyword_1()); }
)

	rule__CharEnum__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__CharEnum__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharEnumAccess().getValuesAssignment_2()); }
(rule__CharEnum__ValuesAssignment_2)
{ after(grammarAccess.getCharEnumAccess().getValuesAssignment_2()); }
)

	rule__CharEnum__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__CharEnum__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharEnumAccess().getGroup_3()); }
(rule__CharEnum__Group_3__0)*
{ after(grammarAccess.getCharEnumAccess().getGroup_3()); }
)

	rule__CharEnum__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__CharEnum__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharEnumAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getCharEnumAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__CharEnum__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharEnumAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getCharEnumAccess().getCommaKeyword_3_0()); }
)

	rule__CharEnum__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CharEnum__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharEnumAccess().getValuesAssignment_3_1()); }
(rule__CharEnum__ValuesAssignment_3_1)
{ after(grammarAccess.getCharEnumAccess().getValuesAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumValueAccess().getNameAssignment_0()); }
(rule__EnumValue__NameAssignment_0)
{ after(grammarAccess.getEnumValueAccess().getNameAssignment_0()); }
)

	rule__EnumValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__EnumValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumValueAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getEnumValueAccess().getEqualsSignKeyword_1()); }
)

	rule__EnumValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__EnumValue__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumValueAccess().getValueAssignment_2()); }
(rule__EnumValue__ValueAssignment_2)
{ after(grammarAccess.getEnumValueAccess().getValueAssignment_2()); }
)

	rule__EnumValue__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__EnumValue__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumValueAccess().getDeprecatedKeyword_3()); }
(
	'deprecated' 
)?
{ after(grammarAccess.getEnumValueAccess().getDeprecatedKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__CharType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharTypeAccess().getCharTypeAction_0()); }
(

)
{ after(grammarAccess.getCharTypeAccess().getCharTypeAction_0()); }
)

	rule__CharType__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CharType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharTypeAccess().getCharKeyword_1()); }

	'char' 

{ after(grammarAccess.getCharTypeAccess().getCharKeyword_1()); }
)

	rule__CharType__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__CharType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharTypeAccess().getGroup_2()); }
(rule__CharType__Group_2__0)?
{ after(grammarAccess.getCharTypeAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CharType__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharTypeAccess().getLeftSquareBracketKeyword_2_0()); }

	'[' 

{ after(grammarAccess.getCharTypeAccess().getLeftSquareBracketKeyword_2_0()); }
)

	rule__CharType__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CharType__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharTypeAccess().getLengthAssignment_2_1()); }
(rule__CharType__LengthAssignment_2_1)?
{ after(grammarAccess.getCharTypeAccess().getLengthAssignment_2_1()); }
)

	rule__CharType__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}


rule__CharType__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharTypeAccess().getRightSquareBracketKeyword_2_2()); }

	']' 

{ after(grammarAccess.getCharTypeAccess().getRightSquareBracketKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Pointer__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointerAccess().getPointerAction_0()); }
(

)
{ after(grammarAccess.getPointerAccess().getPointerAction_0()); }
)

	rule__Pointer__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Pointer__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointerAccess().getPtrKeyword_1()); }

	'ptr' 

{ after(grammarAccess.getPointerAccess().getPtrKeyword_1()); }
)

	rule__Pointer__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Pointer__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointerAccess().getTypeAssignment_2()); }
(rule__Pointer__TypeAssignment_2)?
{ after(grammarAccess.getPointerAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SetType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetTypeAccess().getSetTypeAction_0()); }
(

)
{ after(grammarAccess.getSetTypeAccess().getSetTypeAction_0()); }
)

	rule__SetType__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__SetType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetTypeAccess().getSetKeyword_1()); }

	'set' 

{ after(grammarAccess.getSetTypeAccess().getSetKeyword_1()); }
)

	rule__SetType__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__SetType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetTypeAccess().getTypeAssignment_2()); }
(rule__SetType__TypeAssignment_2)?
{ after(grammarAccess.getSetTypeAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SubFieldDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubFieldDeclarationAccess().getSubFieldOfAssignment_0()); }
(rule__SubFieldDeclaration__SubFieldOfAssignment_0)
{ after(grammarAccess.getSubFieldDeclarationAccess().getSubFieldOfAssignment_0()); }
)

	rule__SubFieldDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__SubFieldDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubFieldDeclarationAccess().getHyphenMinusGreaterThanSignKeyword_1()); }

	'->' 

{ after(grammarAccess.getSubFieldDeclarationAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
)

	rule__SubFieldDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__SubFieldDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubFieldDeclarationAccess().getDAssignment_2()); }
(rule__SubFieldDeclaration__DAssignment_2)
{ after(grammarAccess.getSubFieldDeclarationAccess().getDAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Type__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getAlternatives_0()); }
(rule__Type__Alternatives_0)
{ after(grammarAccess.getTypeAccess().getAlternatives_0()); }
)

	rule__Type__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getGroup_1()); }
(rule__Type__Group_1__0)*
{ after(grammarAccess.getTypeAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Type__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getAlternatives_1_0()); }
(rule__Type__Alternatives_1_0)
{ after(grammarAccess.getTypeAccess().getAlternatives_1_0()); }
)

	rule__Type__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getAlternatives_1_1()); }
(rule__Type__Alternatives_1_1)
{ after(grammarAccess.getTypeAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TitleDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTitleDeclarationAccess().getExclamationMarkKeyword_0()); }

	'!' 

{ after(grammarAccess.getTitleDeclarationAccess().getExclamationMarkKeyword_0()); }
)

	rule__TitleDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__TitleDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTitleDeclarationAccess().getTitleKeyword_1()); }

	'title' 

{ after(grammarAccess.getTitleDeclarationAccess().getTitleKeyword_1()); }
)

	rule__TitleDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__TitleDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTitleDeclarationAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getTitleDeclarationAccess().getEqualsSignKeyword_2()); }
)

	rule__TitleDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__TitleDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTitleDeclarationAccess().getTitleAssignment_3()); }
(rule__TitleDeclaration__TitleAssignment_3)
{ after(grammarAccess.getTitleDeclarationAccess().getTitleAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__IncludeDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDeclarationAccess().getExclamationMarkKeyword_0()); }

	'!' 

{ after(grammarAccess.getIncludeDeclarationAccess().getExclamationMarkKeyword_0()); }
)

	rule__IncludeDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__IncludeDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDeclarationAccess().getIncludeKeyword_1()); }

	'include' 

{ after(grammarAccess.getIncludeDeclarationAccess().getIncludeKeyword_1()); }
)

	rule__IncludeDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__IncludeDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDeclarationAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getIncludeDeclarationAccess().getEqualsSignKeyword_2()); }
)

	rule__IncludeDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__IncludeDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDeclarationAccess().getImportedNamespaceAssignment_3()); }
(rule__IncludeDeclaration__ImportedNamespaceAssignment_3)
{ after(grammarAccess.getIncludeDeclarationAccess().getImportedNamespaceAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TypeDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getExclamationMarkKeyword_0()); }

	'!' 

{ after(grammarAccess.getTypeDeclarationAccess().getExclamationMarkKeyword_0()); }
)

	rule__TypeDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getTypeKeyword_1()); }

	'type' 

{ after(grammarAccess.getTypeDeclarationAccess().getTypeKeyword_1()); }
)

	rule__TypeDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getTypeDeclarationAccess().getFullStopKeyword_2()); }
)

	rule__TypeDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getNameAssignment_3()); }
(rule__TypeDeclaration__NameAssignment_3)
{ after(grammarAccess.getTypeDeclarationAccess().getNameAssignment_3()); }
)

	rule__TypeDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getEqualsSignKeyword_4()); }

	'=' 

{ after(grammarAccess.getTypeDeclarationAccess().getEqualsSignKeyword_4()); }
)

	rule__TypeDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getFieldTypeAssignment_5()); }
(rule__TypeDeclaration__FieldTypeAssignment_5)
{ after(grammarAccess.getTypeDeclarationAccess().getFieldTypeAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__ValidationRuleDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValidationRuleDeclarationAccess().getAlternatives_0()); }
(rule__ValidationRuleDeclaration__Alternatives_0)
{ after(grammarAccess.getValidationRuleDeclarationAccess().getAlternatives_0()); }
)

	rule__ValidationRuleDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ValidationRuleDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValidationRuleDeclarationAccess().getErrorMessageAssignment_1()); }
(rule__ValidationRuleDeclaration__ErrorMessageAssignment_1)
{ after(grammarAccess.getValidationRuleDeclarationAccess().getErrorMessageAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisonValidationRuleDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonValidationRuleDeclarationAccess().getNameAssignment_0()); }
(rule__ComparisonValidationRuleDeclaration__NameAssignment_0)
{ after(grammarAccess.getComparisonValidationRuleDeclarationAccess().getNameAssignment_0()); }
)

	rule__ComparisonValidationRuleDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonValidationRuleDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonValidationRuleDeclarationAccess().getArgsAssignment_1()); }
(rule__ComparisonValidationRuleDeclaration__ArgsAssignment_1)
{ after(grammarAccess.getComparisonValidationRuleDeclarationAccess().getArgsAssignment_1()); }
)

	rule__ComparisonValidationRuleDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonValidationRuleDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonValidationRuleDeclarationAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getComparisonValidationRuleDeclarationAccess().getLeftCurlyBracketKeyword_2()); }
)

	rule__ComparisonValidationRuleDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonValidationRuleDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonValidationRuleDeclarationAccess().getComparisonExpAssignment_3()); }
(rule__ComparisonValidationRuleDeclaration__ComparisonExpAssignment_3)
{ after(grammarAccess.getComparisonValidationRuleDeclarationAccess().getComparisonExpAssignment_3()); }
)

	rule__ComparisonValidationRuleDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonValidationRuleDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonValidationRuleDeclarationAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getComparisonValidationRuleDeclarationAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ComparisonExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getLhsAssignment_0()); }
(rule__ComparisonExpression__LhsAssignment_0)
{ after(grammarAccess.getComparisonExpressionAccess().getLhsAssignment_0()); }
)

	rule__ComparisonExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getOAssignment_1()); }
(rule__ComparisonExpression__OAssignment_1)
{ after(grammarAccess.getComparisonExpressionAccess().getOAssignment_1()); }
)

	rule__ComparisonExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getRhsAssignment_2()); }
(rule__ComparisonExpression__RhsAssignment_2)
{ after(grammarAccess.getComparisonExpressionAccess().getRhsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UpperFunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpperFunctionAccess().getUpperKeyword_0()); }

	'upper' 

{ after(grammarAccess.getUpperFunctionAccess().getUpperKeyword_0()); }
)

	rule__UpperFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__UpperFunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpperFunctionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getUpperFunctionAccess().getLeftParenthesisKeyword_1()); }
)

	rule__UpperFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__UpperFunction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpperFunctionAccess().getTAssignment_2()); }
(rule__UpperFunction__TAssignment_2)
{ after(grammarAccess.getUpperFunctionAccess().getTAssignment_2()); }
)

	rule__UpperFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__UpperFunction__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpperFunctionAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getUpperFunctionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__LowerFunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLowerFunctionAccess().getLowerKeyword_0()); }

	'lower' 

{ after(grammarAccess.getLowerFunctionAccess().getLowerKeyword_0()); }
)

	rule__LowerFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__LowerFunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLowerFunctionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getLowerFunctionAccess().getLeftParenthesisKeyword_1()); }
)

	rule__LowerFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__LowerFunction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLowerFunctionAccess().getTAssignment_2()); }
(rule__LowerFunction__TAssignment_2)
{ after(grammarAccess.getLowerFunctionAccess().getTAssignment_2()); }
)

	rule__LowerFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__LowerFunction__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLowerFunctionAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getLowerFunctionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__DateFunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateFunctionAccess().getDateKeyword_0()); }

	'date' 

{ after(grammarAccess.getDateFunctionAccess().getDateKeyword_0()); }
)

	rule__DateFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__DateFunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateFunctionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getDateFunctionAccess().getLeftParenthesisKeyword_1()); }
)

	rule__DateFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__DateFunction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateFunctionAccess().getDateFunctionArgumentParserRuleCall_2()); }
	ruledateFunctionArgument
{ after(grammarAccess.getDateFunctionAccess().getDateFunctionArgumentParserRuleCall_2()); }
)

	rule__DateFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__DateFunction__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateFunctionAccess().getGroup_3()); }
(rule__DateFunction__Group_3__0)*
{ after(grammarAccess.getDateFunctionAccess().getGroup_3()); }
)

	rule__DateFunction__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__DateFunction__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateFunctionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getDateFunctionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__DateFunction__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateFunctionAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getDateFunctionAccess().getCommaKeyword_3_0()); }
)

	rule__DateFunction__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}


rule__DateFunction__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateFunctionAccess().getDateFunctionArgumentParserRuleCall_3_1()); }
	ruledateFunctionArgument
{ after(grammarAccess.getDateFunctionAccess().getDateFunctionArgumentParserRuleCall_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DateFunctionArgument__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateFunctionArgumentAccess().getDateFunctionArgumentMemberParserRuleCall_0()); }
	ruledateFunctionArgumentMember
{ after(grammarAccess.getDateFunctionArgumentAccess().getDateFunctionArgumentMemberParserRuleCall_0()); }
)

	rule__DateFunctionArgument__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__DateFunctionArgument__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateFunctionArgumentAccess().getGroup_1()); }
(rule__DateFunctionArgument__Group_1__0)?
{ after(grammarAccess.getDateFunctionArgumentAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DateFunctionArgument__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateFunctionArgumentAccess().getAlternatives_1_0()); }
(rule__DateFunctionArgument__Alternatives_1_0)
{ after(grammarAccess.getDateFunctionArgumentAccess().getAlternatives_1_0()); }
)

	rule__DateFunctionArgument__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__DateFunctionArgument__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateFunctionArgumentAccess().getDateFunctionArgumentMemberParserRuleCall_1_1()); }
	ruledateFunctionArgumentMember
{ after(grammarAccess.getDateFunctionArgumentAccess().getDateFunctionArgumentMemberParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RangeValidationRuleDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeValidationRuleDeclarationAccess().getNameAssignment_0()); }
(rule__RangeValidationRuleDeclaration__NameAssignment_0)
{ after(grammarAccess.getRangeValidationRuleDeclarationAccess().getNameAssignment_0()); }
)

	rule__RangeValidationRuleDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__RangeValidationRuleDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeValidationRuleDeclarationAccess().getArgsAssignment_1()); }
(rule__RangeValidationRuleDeclaration__ArgsAssignment_1)
{ after(grammarAccess.getRangeValidationRuleDeclarationAccess().getArgsAssignment_1()); }
)

	rule__RangeValidationRuleDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__RangeValidationRuleDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeValidationRuleDeclarationAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getRangeValidationRuleDeclarationAccess().getLeftCurlyBracketKeyword_2()); }
)

	rule__RangeValidationRuleDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__RangeValidationRuleDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeValidationRuleDeclarationAccess().getRangeAssignment_3()); }
(rule__RangeValidationRuleDeclaration__RangeAssignment_3)
{ after(grammarAccess.getRangeValidationRuleDeclarationAccess().getRangeAssignment_3()); }
)

	rule__RangeValidationRuleDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__RangeValidationRuleDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeValidationRuleDeclarationAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getRangeValidationRuleDeclarationAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__RegexValidationRuleDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegexValidationRuleDeclarationAccess().getNameAssignment_0()); }
(rule__RegexValidationRuleDeclaration__NameAssignment_0)
{ after(grammarAccess.getRegexValidationRuleDeclarationAccess().getNameAssignment_0()); }
)

	rule__RegexValidationRuleDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__RegexValidationRuleDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegexValidationRuleDeclarationAccess().getArgsAssignment_1()); }
(rule__RegexValidationRuleDeclaration__ArgsAssignment_1)
{ after(grammarAccess.getRegexValidationRuleDeclarationAccess().getArgsAssignment_1()); }
)

	rule__RegexValidationRuleDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__RegexValidationRuleDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegexValidationRuleDeclarationAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getRegexValidationRuleDeclarationAccess().getLeftCurlyBracketKeyword_2()); }
)

	rule__RegexValidationRuleDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__RegexValidationRuleDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegexValidationRuleDeclarationAccess().getExpAssignment_3()); }
(rule__RegexValidationRuleDeclaration__ExpAssignment_3)
{ after(grammarAccess.getRegexValidationRuleDeclarationAccess().getExpAssignment_3()); }
)

	rule__RegexValidationRuleDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__RegexValidationRuleDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegexValidationRuleDeclarationAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getRegexValidationRuleDeclarationAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Range__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getFAssignment_0()); }
(rule__Range__FAssignment_0)
{ after(grammarAccess.getRangeAccess().getFAssignment_0()); }
)

	rule__Range__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getFullStopFullStopKeyword_1()); }

	'..' 

{ after(grammarAccess.getRangeAccess().getFullStopFullStopKeyword_1()); }
)

	rule__Range__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getTAssignment_2()); }
(rule__Range__TAssignment_2)
{ after(grammarAccess.getRangeAccess().getTAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UniquenessValidationRuleDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUniquenessValidationRuleDeclarationAccess().getNameAssignment_0()); }
(rule__UniquenessValidationRuleDeclaration__NameAssignment_0)
{ after(grammarAccess.getUniquenessValidationRuleDeclarationAccess().getNameAssignment_0()); }
)

	rule__UniquenessValidationRuleDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__UniquenessValidationRuleDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUniquenessValidationRuleDeclarationAccess().getArgsAssignment_1()); }
(rule__UniquenessValidationRuleDeclaration__ArgsAssignment_1)
{ after(grammarAccess.getUniquenessValidationRuleDeclarationAccess().getArgsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ErrorMessage__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getErrorMessageAccess().getColonKeyword_0()); }

	':' 

{ after(grammarAccess.getErrorMessageAccess().getColonKeyword_0()); }
)

	rule__ErrorMessage__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ErrorMessage__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getErrorMessageAccess().getMessageAssignment_1()); }
(rule__ErrorMessage__MessageAssignment_1)
{ after(grammarAccess.getErrorMessageAccess().getMessageAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NativeValidationRuleDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeValidationRuleDeclarationAccess().getFieldAssignment_0()); }
(rule__NativeValidationRuleDeclaration__FieldAssignment_0)
{ after(grammarAccess.getNativeValidationRuleDeclarationAccess().getFieldAssignment_0()); }
)

	rule__NativeValidationRuleDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__NativeValidationRuleDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeValidationRuleDeclarationAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getNativeValidationRuleDeclarationAccess().getFullStopKeyword_1()); }
)

	rule__NativeValidationRuleDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__NativeValidationRuleDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeAssignment_2()); }
(rule__NativeValidationRuleDeclaration__TypeAssignment_2)
{ after(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeAssignment_2()); }
)

	rule__NativeValidationRuleDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__NativeValidationRuleDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeValidationRuleDeclarationAccess().getEqualsSignKeyword_3()); }

	'=' 

{ after(grammarAccess.getNativeValidationRuleDeclarationAccess().getEqualsSignKeyword_3()); }
)

	rule__NativeValidationRuleDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__NativeValidationRuleDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeValidationRuleDeclarationAccess().getMessageAssignment_4()); }
(rule__NativeValidationRuleDeclaration__MessageAssignment_4)
{ after(grammarAccess.getNativeValidationRuleDeclarationAccess().getMessageAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FunctionDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_0()); }
(rule__FunctionDeclaration__Group_0__0)?
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_0()); }
)

	rule__FunctionDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_1()); }
(rule__FunctionDeclaration__NameAssignment_1)
{ after(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_1()); }
)

	rule__FunctionDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getArgAssignment_2()); }
(rule__FunctionDeclaration__ArgAssignment_2)
{ after(grammarAccess.getFunctionDeclarationAccess().getArgAssignment_2()); }
)

	rule__FunctionDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_3()); }
(rule__FunctionDeclaration__BodyAssignment_3)
{ after(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_3()); }
)

	rule__FunctionDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getMAssignment_4()); }
(rule__FunctionDeclaration__MAssignment_4)?
{ after(grammarAccess.getFunctionDeclarationAccess().getMAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FunctionDeclaration__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getBAssignment_0_0()); }
(rule__FunctionDeclaration__BAssignment_0_0)
{ after(grammarAccess.getFunctionDeclarationAccess().getBAssignment_0_0()); }
)

	rule__FunctionDeclaration__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getPercentSignKeyword_0_1()); }

	'%' 

{ after(grammarAccess.getFunctionDeclarationAccess().getPercentSignKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionArgumentDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentDeclarationAccess().getFunctionArgumentDeclarationAction_0()); }
(

)
{ after(grammarAccess.getFunctionArgumentDeclarationAccess().getFunctionArgumentDeclarationAction_0()); }
)

	rule__FunctionArgumentDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArgumentDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentDeclarationAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getFunctionArgumentDeclarationAccess().getLeftParenthesisKeyword_1()); }
)

	rule__FunctionArgumentDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArgumentDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentDeclarationAccess().getFAssignment_2()); }
(rule__FunctionArgumentDeclaration__FAssignment_2)?
{ after(grammarAccess.getFunctionArgumentDeclarationAccess().getFAssignment_2()); }
)

	rule__FunctionArgumentDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArgumentDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentDeclarationAccess().getGroup_3()); }
(rule__FunctionArgumentDeclaration__Group_3__0)*
{ after(grammarAccess.getFunctionArgumentDeclarationAccess().getGroup_3()); }
)

	rule__FunctionArgumentDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArgumentDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentDeclarationAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getFunctionArgumentDeclarationAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FunctionArgumentDeclaration__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentDeclarationAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getFunctionArgumentDeclarationAccess().getCommaKeyword_3_0()); }
)

	rule__FunctionArgumentDeclaration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArgumentDeclaration__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentDeclarationAccess().getFAssignment_3_1()); }
(rule__FunctionArgumentDeclaration__FAssignment_3_1)
{ after(grammarAccess.getFunctionArgumentDeclarationAccess().getFAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionArgumentBody__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getAlternatives_0()); }
(rule__FunctionArgumentBody__Alternatives_0)
{ after(grammarAccess.getFunctionArgumentBodyAccess().getAlternatives_0()); }
)

	rule__FunctionArgumentBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArgumentBody__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getNameAssignment_1()); }
(rule__FunctionArgumentBody__NameAssignment_1)
{ after(grammarAccess.getFunctionArgumentBodyAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionArgumentBody__Group_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getSetKeyword_0_2_0()); }

	'set' 

{ after(grammarAccess.getFunctionArgumentBodyAccess().getSetKeyword_0_2_0()); }
)

	rule__FunctionArgumentBody__Group_0_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArgumentBody__Group_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getIntEnumParserRuleCall_0_2_1()); }
	ruleintEnum
{ after(grammarAccess.getFunctionArgumentBodyAccess().getIntEnumParserRuleCall_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionArgumentBody__Group_0_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getSetKeyword_0_4_0()); }

	'set' 

{ after(grammarAccess.getFunctionArgumentBodyAccess().getSetKeyword_0_4_0()); }
)

	rule__FunctionArgumentBody__Group_0_4__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArgumentBody__Group_0_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getCharEnumParserRuleCall_0_4_1()); }
	rulecharEnum
{ after(grammarAccess.getFunctionArgumentBodyAccess().getCharEnumParserRuleCall_0_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionArgumentBody__Group_0_12__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getPtrKeyword_0_12_0()); }

	'ptr' 

{ after(grammarAccess.getFunctionArgumentBodyAccess().getPtrKeyword_0_12_0()); }
)

	rule__FunctionArgumentBody__Group_0_12__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArgumentBody__Group_0_12__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getTypeParserRuleCall_0_12_1()); }
	ruletype
{ after(grammarAccess.getFunctionArgumentBodyAccess().getTypeParserRuleCall_0_12_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionArgumentBody__Group_0_13__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getSetKeyword_0_13_0()); }

	'set' 

{ after(grammarAccess.getFunctionArgumentBodyAccess().getSetKeyword_0_13_0()); }
)

	rule__FunctionArgumentBody__Group_0_13__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArgumentBody__Group_0_13__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getTypeParserRuleCall_0_13_1()); }
	ruletype
{ after(grammarAccess.getFunctionArgumentBodyAccess().getTypeParserRuleCall_0_13_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getNameAssignment_0()); }
(rule__FunctionCall__NameAssignment_0)
{ after(grammarAccess.getFunctionCallAccess().getNameAssignment_0()); }
)

	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFAssignment_1()); }
(rule__FunctionCall__FAssignment_1)
{ after(grammarAccess.getFunctionCallAccess().getFAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionArguments__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentsAccess().getFunctionArgumentsAction_0()); }
(

)
{ after(grammarAccess.getFunctionArgumentsAccess().getFunctionArgumentsAction_0()); }
)

	rule__FunctionArguments__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArguments__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentsAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getFunctionArgumentsAccess().getLeftParenthesisKeyword_1()); }
)

	rule__FunctionArguments__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArguments__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentsAccess().getGroup_2()); }
(rule__FunctionArguments__Group_2__0)?
{ after(grammarAccess.getFunctionArgumentsAccess().getGroup_2()); }
)

	rule__FunctionArguments__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArguments__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentsAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getFunctionArgumentsAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FunctionArguments__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentsAccess().getAAssignment_2_0()); }
(rule__FunctionArguments__AAssignment_2_0)
{ after(grammarAccess.getFunctionArgumentsAccess().getAAssignment_2_0()); }
)

	rule__FunctionArguments__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArguments__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentsAccess().getGroup_2_1()); }
(rule__FunctionArguments__Group_2_1__0)*
{ after(grammarAccess.getFunctionArgumentsAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionArguments__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentsAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getFunctionArgumentsAccess().getCommaKeyword_2_1_0()); }
)

	rule__FunctionArguments__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArguments__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentsAccess().getAAssignment_2_1_1()); }
(rule__FunctionArguments__AAssignment_2_1_1)
{ after(grammarAccess.getFunctionArgumentsAccess().getAAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionBody__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionBodyAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getFunctionBodyAccess().getLeftCurlyBracketKeyword_0()); }
)

	rule__FunctionBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionBody__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionBodyAccess().getAlternatives_1()); }
(rule__FunctionBody__Alternatives_1)
{ after(grammarAccess.getFunctionBodyAccess().getAlternatives_1()); }
)

	rule__FunctionBody__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionBody__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionBodyAccess().getRightCurlyBracketKeyword_2()); }

	'}' 

{ after(grammarAccess.getFunctionBodyAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnionRule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionRuleAccess().getQAssignment_0()); }
(rule__UnionRule__QAssignment_0)
{ after(grammarAccess.getUnionRuleAccess().getQAssignment_0()); }
)

	rule__UnionRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__UnionRule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionRuleAccess().getGroup_1()); }
(rule__UnionRule__Group_1__0)*
{ after(grammarAccess.getUnionRuleAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnionRule__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionRuleAccess().getUnionKeyword_1_0()); }

	'union' 

{ after(grammarAccess.getUnionRuleAccess().getUnionKeyword_1_0()); }
)

	rule__UnionRule__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__UnionRule__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionRuleAccess().getQAssignment_1_1()); }
(rule__UnionRule__QAssignment_1_1)
{ after(grammarAccess.getUnionRuleAccess().getQAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QueryRule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryRuleAccess().getSelectFromParserRuleCall_0()); }
	ruleselectFrom
{ after(grammarAccess.getQueryRuleAccess().getSelectFromParserRuleCall_0()); }
)

	rule__QueryRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__QueryRule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryRuleAccess().getWhereAssignment_1()); }
(rule__QueryRule__WhereAssignment_1)?
{ after(grammarAccess.getQueryRuleAccess().getWhereAssignment_1()); }
)

	rule__QueryRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__QueryRule__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryRuleAccess().getGroupByAssignment_2()); }
(rule__QueryRule__GroupByAssignment_2)?
{ after(grammarAccess.getQueryRuleAccess().getGroupByAssignment_2()); }
)

	rule__QueryRule__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__QueryRule__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryRuleAccess().getOrderByAssignment_3()); }
(rule__QueryRule__OrderByAssignment_3)?
{ after(grammarAccess.getQueryRuleAccess().getOrderByAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SelectFrom__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectFromAccess().getSelectFromAction_0()); }
(

)
{ after(grammarAccess.getSelectFromAccess().getSelectFromAction_0()); }
)

	rule__SelectFrom__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectFrom__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectFromAccess().getSAssignment_1()); }
(rule__SelectFrom__SAssignment_1)?
{ after(grammarAccess.getSelectFromAccess().getSAssignment_1()); }
)

	rule__SelectFrom__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectFrom__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectFromAccess().getFromAssignment_2()); }
(rule__SelectFrom__FromAssignment_2)?
{ after(grammarAccess.getSelectFromAccess().getFromAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SelectClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectClauseAccess().getSelectCauseAction_0()); }
(

)
{ after(grammarAccess.getSelectClauseAccess().getSelectCauseAction_0()); }
)

	rule__SelectClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectClauseAccess().getSELECTParserRuleCall_1()); }
	ruleSELECT
{ after(grammarAccess.getSelectClauseAccess().getSELECTParserRuleCall_1()); }
)

	rule__SelectClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectClauseAccess().getDISTINCTParserRuleCall_2()); }
(	ruleDISTINCT)?
{ after(grammarAccess.getSelectClauseAccess().getDISTINCTParserRuleCall_2()); }
)

	rule__SelectClause__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectClause__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectClauseAccess().getAlternatives_3()); }
(rule__SelectClause__Alternatives_3)
{ after(grammarAccess.getSelectClauseAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__NewExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewExpressionAccess().getNEWParserRuleCall_0()); }
	ruleNEW
{ after(grammarAccess.getNewExpressionAccess().getNEWParserRuleCall_0()); }
)

	rule__NewExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__NewExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewExpressionAccess().getPAssignment_1()); }
(rule__NewExpression__PAssignment_1)
{ after(grammarAccess.getNewExpressionAccess().getPAssignment_1()); }
)

	rule__NewExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__NewExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewExpressionAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getNewExpressionAccess().getLeftParenthesisKeyword_2()); }
)

	rule__NewExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__NewExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewExpressionAccess().getSAssignment_3()); }
(rule__NewExpression__SAssignment_3)
{ after(grammarAccess.getNewExpressionAccess().getSAssignment_3()); }
)

	rule__NewExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__NewExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewExpressionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getNewExpressionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SelectObject__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectObjectAccess().getOBJECTParserRuleCall_0()); }
	ruleOBJECT
{ after(grammarAccess.getSelectObjectAccess().getOBJECTParserRuleCall_0()); }
)

	rule__SelectObject__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectObject__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectObjectAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getSelectObjectAccess().getLeftParenthesisKeyword_1()); }
)

	rule__SelectObject__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectObject__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectObjectAccess().getIdentifierParserRuleCall_2()); }
	ruleidentifier
{ after(grammarAccess.getSelectObjectAccess().getIdentifierParserRuleCall_2()); }
)

	rule__SelectObject__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectObject__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectObjectAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getSelectObjectAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FromClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClauseAccess().getFROMParserRuleCall_0()); }
	ruleFROM
{ after(grammarAccess.getFromClauseAccess().getFROMParserRuleCall_0()); }
)

	rule__FromClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FromClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClauseAccess().getFromRangeAssignment_1()); }
(rule__FromClause__FromRangeAssignment_1)
{ after(grammarAccess.getFromClauseAccess().getFromRangeAssignment_1()); }
)

	rule__FromClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__FromClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClauseAccess().getAlternatives_2()); }
(rule__FromClause__Alternatives_2)*
{ after(grammarAccess.getFromClauseAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FromClause__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClauseAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getFromClauseAccess().getCommaKeyword_2_1_0()); }
)

	rule__FromClause__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FromClause__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClauseAccess().getFromRangeAssignment_2_1_1()); }
(rule__FromClause__FromRangeAssignment_2_1_1)
{ after(grammarAccess.getFromClauseAccess().getFromRangeAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FromJoin__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromJoinAccess().getAlternatives_0()); }
(rule__FromJoin__Alternatives_0)?
{ after(grammarAccess.getFromJoinAccess().getAlternatives_0()); }
)

	rule__FromJoin__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FromJoin__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromJoinAccess().getJOINParserRuleCall_1()); }
	ruleJOIN
{ after(grammarAccess.getFromJoinAccess().getJOINParserRuleCall_1()); }
)

	rule__FromJoin__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__FromJoin__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromJoinAccess().getFETCHParserRuleCall_2()); }
(	ruleFETCH)?
{ after(grammarAccess.getFromJoinAccess().getFETCHParserRuleCall_2()); }
)

	rule__FromJoin__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__FromJoin__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromJoinAccess().getFromClassOrOuterQueryPathParserRuleCall_3()); }
	rulefromClassOrOuterQueryPath
{ after(grammarAccess.getFromJoinAccess().getFromClassOrOuterQueryPathParserRuleCall_3()); }
)

	rule__FromJoin__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__FromJoin__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromJoinAccess().getWAssignment_4()); }
(rule__FromJoin__WAssignment_4)?
{ after(grammarAccess.getFromJoinAccess().getWAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FromJoin__Group_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromJoinAccess().getAlternatives_0_0_0()); }
(rule__FromJoin__Alternatives_0_0_0)
{ after(grammarAccess.getFromJoinAccess().getAlternatives_0_0_0()); }
)

	rule__FromJoin__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FromJoin__Group_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromJoinAccess().getOUTERParserRuleCall_0_0_1()); }
(	ruleOUTER)?
{ after(grammarAccess.getFromJoinAccess().getOUTERParserRuleCall_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WithClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWithClauseAccess().getWITHParserRuleCall_0()); }
	ruleWITH
{ after(grammarAccess.getWithClauseAccess().getWITHParserRuleCall_0()); }
)

	rule__WithClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__WithClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWithClauseAccess().getEAssignment_1()); }
(rule__WithClause__EAssignment_1)
{ after(grammarAccess.getWithClauseAccess().getEAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FromRange__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromRangeAccess().getAliasAssignment_1_0()); }
(rule__FromRange__AliasAssignment_1_0)
{ after(grammarAccess.getFromRangeAccess().getAliasAssignment_1_0()); }
)

	rule__FromRange__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FromRange__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromRangeAccess().getIN_CLASSParserRuleCall_1_1()); }
	ruleIN_CLASS
{ after(grammarAccess.getFromRangeAccess().getIN_CLASSParserRuleCall_1_1()); }
)

	rule__FromRange__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__FromRange__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromRangeAccess().getPAssignment_1_2()); }
(rule__FromRange__PAssignment_1_2)
{ after(grammarAccess.getFromRangeAccess().getPAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FromRange__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromRangeAccess().getINParserRuleCall_2_0()); }
	ruleIN
{ after(grammarAccess.getFromRangeAccess().getINParserRuleCall_2_0()); }
)

	rule__FromRange__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FromRange__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromRangeAccess().getLeftParenthesisKeyword_2_1()); }

	'(' 

{ after(grammarAccess.getFromRangeAccess().getLeftParenthesisKeyword_2_1()); }
)

	rule__FromRange__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}


rule__FromRange__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromRangeAccess().getPAssignment_2_2()); }
(rule__FromRange__PAssignment_2_2)
{ after(grammarAccess.getFromRangeAccess().getPAssignment_2_2()); }
)

	rule__FromRange__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}


rule__FromRange__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromRangeAccess().getRightParenthesisKeyword_2_3()); }

	')' 

{ after(grammarAccess.getFromRangeAccess().getRightParenthesisKeyword_2_3()); }
)

	rule__FromRange__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}


rule__FromRange__Group_2__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromRangeAccess().getAliasAssignment_2_4()); }
(rule__FromRange__AliasAssignment_2_4)
{ after(grammarAccess.getFromRangeAccess().getAliasAssignment_2_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FromClassOrOuterQueryPath__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClassOrOuterQueryPathAccess().getFromClassOrOuterQueryPathAction_0()); }
(

)
{ after(grammarAccess.getFromClassOrOuterQueryPathAccess().getFromClassOrOuterQueryPathAction_0()); }
)

	rule__FromClassOrOuterQueryPath__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FromClassOrOuterQueryPath__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClassOrOuterQueryPathAccess().getPathParserRuleCall_1()); }
	rulepath
{ after(grammarAccess.getFromClassOrOuterQueryPathAccess().getPathParserRuleCall_1()); }
)

	rule__FromClassOrOuterQueryPath__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__FromClassOrOuterQueryPath__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClassOrOuterQueryPathAccess().getAsAliasAssignment_2()); }
(rule__FromClassOrOuterQueryPath__AsAliasAssignment_2)?
{ after(grammarAccess.getFromClassOrOuterQueryPathAccess().getAsAliasAssignment_2()); }
)

	rule__FromClassOrOuterQueryPath__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__FromClassOrOuterQueryPath__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClassOrOuterQueryPathAccess().getPropertyFetchAssignment_3()); }
(rule__FromClassOrOuterQueryPath__PropertyFetchAssignment_3)?
{ after(grammarAccess.getFromClassOrOuterQueryPathAccess().getPropertyFetchAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__InCollectionElementsDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInCollectionElementsDeclarationAccess().getAliasAssignment_0()); }
(rule__InCollectionElementsDeclaration__AliasAssignment_0)
{ after(grammarAccess.getInCollectionElementsDeclarationAccess().getAliasAssignment_0()); }
)

	rule__InCollectionElementsDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__InCollectionElementsDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInCollectionElementsDeclarationAccess().getIN_ELEMENTSParserRuleCall_1()); }
	ruleIN_ELEMENTS
{ after(grammarAccess.getInCollectionElementsDeclarationAccess().getIN_ELEMENTSParserRuleCall_1()); }
)

	rule__InCollectionElementsDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__InCollectionElementsDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInCollectionElementsDeclarationAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getInCollectionElementsDeclarationAccess().getLeftParenthesisKeyword_2()); }
)

	rule__InCollectionElementsDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__InCollectionElementsDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInCollectionElementsDeclarationAccess().getPAssignment_3()); }
(rule__InCollectionElementsDeclaration__PAssignment_3)
{ after(grammarAccess.getInCollectionElementsDeclarationAccess().getPAssignment_3()); }
)

	rule__InCollectionElementsDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__InCollectionElementsDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInCollectionElementsDeclarationAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getInCollectionElementsDeclarationAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AsAlias__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsAliasAccess().getASParserRuleCall_0()); }
(	ruleAS)?
{ after(grammarAccess.getAsAliasAccess().getASParserRuleCall_0()); }
)

	rule__AsAlias__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__AsAlias__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsAliasAccess().getAliasAssignment_1()); }
(rule__AsAlias__AliasAssignment_1)
{ after(grammarAccess.getAsAliasAccess().getAliasAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PropertyFetch__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyFetchAccess().getFETCHParserRuleCall_0()); }
	ruleFETCH
{ after(grammarAccess.getPropertyFetchAccess().getFETCHParserRuleCall_0()); }
)

	rule__PropertyFetch__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyFetch__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyFetchAccess().getALLParserRuleCall_1()); }
	ruleALL
{ after(grammarAccess.getPropertyFetchAccess().getALLParserRuleCall_1()); }
)

	rule__PropertyFetch__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyFetch__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyFetchAccess().getPROPERTIESParserRuleCall_2()); }
	rulePROPERTIES
{ after(grammarAccess.getPropertyFetchAccess().getPROPERTIESParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__GroupByClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByClauseAccess().getGROUP_BYParserRuleCall_0()); }
	ruleGROUP_BY
{ after(grammarAccess.getGroupByClauseAccess().getGROUP_BYParserRuleCall_0()); }
)

	rule__GroupByClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__GroupByClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByClauseAccess().getEAssignment_1()); }
(rule__GroupByClause__EAssignment_1)
{ after(grammarAccess.getGroupByClauseAccess().getEAssignment_1()); }
)

	rule__GroupByClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__GroupByClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByClauseAccess().getGroup_2()); }
(rule__GroupByClause__Group_2__0)*
{ after(grammarAccess.getGroupByClauseAccess().getGroup_2()); }
)

	rule__GroupByClause__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__GroupByClause__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByClauseAccess().getHAssignment_3()); }
(rule__GroupByClause__HAssignment_3)?
{ after(grammarAccess.getGroupByClauseAccess().getHAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__GroupByClause__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByClauseAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getGroupByClauseAccess().getCommaKeyword_2_0()); }
)

	rule__GroupByClause__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__GroupByClause__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByClauseAccess().getEAssignment_2_1()); }
(rule__GroupByClause__EAssignment_2_1)
{ after(grammarAccess.getGroupByClauseAccess().getEAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrderByClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseAccess().getORDER_BYParserRuleCall_0()); }
	ruleORDER_BY
{ after(grammarAccess.getOrderByClauseAccess().getORDER_BYParserRuleCall_0()); }
)

	rule__OrderByClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseAccess().getOAssignment_1()); }
(rule__OrderByClause__OAssignment_1)
{ after(grammarAccess.getOrderByClauseAccess().getOAssignment_1()); }
)

	rule__OrderByClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseAccess().getGroup_2()); }
(rule__OrderByClause__Group_2__0)*
{ after(grammarAccess.getOrderByClauseAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OrderByClause__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getOrderByClauseAccess().getCommaKeyword_2_0()); }
)

	rule__OrderByClause__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByClause__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseAccess().getOAssignment_2_1()); }
(rule__OrderByClause__OAssignment_2_1)
{ after(grammarAccess.getOrderByClauseAccess().getOAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrderElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderElementAccess().getExpressionParserRuleCall_0()); }
	ruleexpression
{ after(grammarAccess.getOrderElementAccess().getExpressionParserRuleCall_0()); }
)

	rule__OrderElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__OrderElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderElementAccess().getAscendingOrDescendingParserRuleCall_1()); }
(	ruleascendingOrDescending)?
{ after(grammarAccess.getOrderElementAccess().getAscendingOrDescendingParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__HavingClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHavingClauseAccess().getHAVINGParserRuleCall_0()); }
	ruleHAVING
{ after(grammarAccess.getHavingClauseAccess().getHAVINGParserRuleCall_0()); }
)

	rule__HavingClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__HavingClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHavingClauseAccess().getEAssignment_1()); }
(rule__HavingClause__EAssignment_1)
{ after(grammarAccess.getHavingClauseAccess().getEAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WhereClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereClauseAccess().getWHEREParserRuleCall_0()); }
	ruleWHERE
{ after(grammarAccess.getWhereClauseAccess().getWHEREParserRuleCall_0()); }
)

	rule__WhereClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__WhereClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereClauseAccess().getEAssignment_1()); }
(rule__WhereClause__EAssignment_1)
{ after(grammarAccess.getWhereClauseAccess().getEAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectedPropertiesList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedPropertiesListAccess().getAAssignment_0()); }
(rule__SelectedPropertiesList__AAssignment_0)
{ after(grammarAccess.getSelectedPropertiesListAccess().getAAssignment_0()); }
)

	rule__SelectedPropertiesList__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectedPropertiesList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedPropertiesListAccess().getGroup_1()); }
(rule__SelectedPropertiesList__Group_1__0)*
{ after(grammarAccess.getSelectedPropertiesListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectedPropertiesList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedPropertiesListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getSelectedPropertiesListAccess().getCommaKeyword_1_0()); }
)

	rule__SelectedPropertiesList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectedPropertiesList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedPropertiesListAccess().getAAssignment_1_1()); }
(rule__SelectedPropertiesList__AAssignment_1_1)
{ after(grammarAccess.getSelectedPropertiesListAccess().getAAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AliasedExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasedExpressionAccess().getExpressionParserRuleCall_0()); }
	ruleexpression
{ after(grammarAccess.getAliasedExpressionAccess().getExpressionParserRuleCall_0()); }
)

	rule__AliasedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__AliasedExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasedExpressionAccess().getGroup_1()); }
(rule__AliasedExpression__Group_1__0)?
{ after(grammarAccess.getAliasedExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AliasedExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasedExpressionAccess().getASParserRuleCall_1_0()); }
	ruleAS
{ after(grammarAccess.getAliasedExpressionAccess().getASParserRuleCall_1_0()); }
)

	rule__AliasedExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__AliasedExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasedExpressionAccess().getIdAssignment_1_1()); }
(rule__AliasedExpression__IdAssignment_1_1)
{ after(grammarAccess.getAliasedExpressionAccess().getIdAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getLAssignment_0()); }
(rule__LogicalOrExpression__LAssignment_0)
{ after(grammarAccess.getLogicalOrExpressionAccess().getLAssignment_0()); }
)

	rule__LogicalOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
(rule__LogicalOrExpression__Group_1__0)*
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalOrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getORParserRuleCall_1_0()); }
	ruleOR
{ after(grammarAccess.getLogicalOrExpressionAccess().getORParserRuleCall_1_0()); }
)

	rule__LogicalOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getLAssignment_1_1()); }
(rule__LogicalOrExpression__LAssignment_1_1)
{ after(grammarAccess.getLogicalOrExpressionAccess().getLAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalAndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getNAssignment_0()); }
(rule__LogicalAndExpression__NAssignment_0)
{ after(grammarAccess.getLogicalAndExpressionAccess().getNAssignment_0()); }
)

	rule__LogicalAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
(rule__LogicalAndExpression__Group_1__0)*
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalAndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getANDParserRuleCall_1_0()); }
	ruleAND
{ after(grammarAccess.getLogicalAndExpressionAccess().getANDParserRuleCall_1_0()); }
)

	rule__LogicalAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getNAssignment_1_1()); }
(rule__LogicalAndExpression__NAssignment_1_1)
{ after(grammarAccess.getLogicalAndExpressionAccess().getNAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NegatedExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegatedExpressionAccess().getNOTParserRuleCall_0_0()); }
	ruleNOT
{ after(grammarAccess.getNegatedExpressionAccess().getNOTParserRuleCall_0_0()); }
)

	rule__NegatedExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__NegatedExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegatedExpressionAccess().getNAssignment_0_1()); }
(rule__NegatedExpression__NAssignment_0_1)
{ after(grammarAccess.getNegatedExpressionAccess().getNAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRAssignment_0()); }
(rule__EqualityExpression__RAssignment_0)
{ after(grammarAccess.getEqualityExpressionAccess().getRAssignment_0()); }
)

	rule__EqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
(rule__EqualityExpression__Group_1__0)*
{ after(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getAlternatives_1_0()); }
(rule__EqualityExpression__Alternatives_1_0)
{ after(grammarAccess.getEqualityExpressionAccess().getAlternatives_1_0()); }
)

	rule__EqualityExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRAssignment_1_1()); }
(rule__EqualityExpression__RAssignment_1_1)
{ after(grammarAccess.getEqualityExpressionAccess().getRAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getISParserRuleCall_1_0_1_0()); }
	ruleIS
{ after(grammarAccess.getEqualityExpressionAccess().getISParserRuleCall_1_0_1_0()); }
)

	rule__EqualityExpression__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getNOTParserRuleCall_1_0_1_1()); }
(	ruleNOT)?
{ after(grammarAccess.getEqualityExpressionAccess().getNOTParserRuleCall_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getConcatenationParserRuleCall_0()); }
	ruleconcatenation
{ after(grammarAccess.getRelationalExpressionAccess().getConcatenationParserRuleCall_0()); }
)

	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getAlternatives_1()); }
(rule__RelationalExpression__Alternatives_1)
{ after(grammarAccess.getRelationalExpressionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getAlternatives_1_0_0()); }
(rule__RelationalExpression__Alternatives_1_0_0)
{ after(grammarAccess.getRelationalExpressionAccess().getAlternatives_1_0_0()); }
)

	rule__RelationalExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getAAssignment_1_0_1()); }
(rule__RelationalExpression__AAssignment_1_0_1)
{ after(grammarAccess.getRelationalExpressionAccess().getAAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getNOTParserRuleCall_1_1_0()); }
(	ruleNOT)?
{ after(grammarAccess.getRelationalExpressionAccess().getNOTParserRuleCall_1_1_0()); }
)

	rule__RelationalExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getAlternatives_1_1_1()); }
(rule__RelationalExpression__Alternatives_1_1_1)
{ after(grammarAccess.getRelationalExpressionAccess().getAlternatives_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1_1_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getINParserRuleCall_1_1_1_0_0()); }
	ruleIN
{ after(grammarAccess.getRelationalExpressionAccess().getINParserRuleCall_1_1_1_0_0()); }
)

	rule__RelationalExpression__Group_1_1_1_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_1_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getIAssignment_1_1_1_0_1()); }
(rule__RelationalExpression__IAssignment_1_1_1_0_1)
{ after(grammarAccess.getRelationalExpressionAccess().getIAssignment_1_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1_1_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getBETWEENParserRuleCall_1_1_1_1_0()); }
	ruleBETWEEN
{ after(grammarAccess.getRelationalExpressionAccess().getBETWEENParserRuleCall_1_1_1_1_0()); }
)

	rule__RelationalExpression__Group_1_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_1_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getBAssignment_1_1_1_1_1()); }
(rule__RelationalExpression__BAssignment_1_1_1_1_1)
{ after(grammarAccess.getRelationalExpressionAccess().getBAssignment_1_1_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1_1_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getLIKEParserRuleCall_1_1_1_2_0()); }
	ruleLIKE
{ after(grammarAccess.getRelationalExpressionAccess().getLIKEParserRuleCall_1_1_1_2_0()); }
)

	rule__RelationalExpression__Group_1_1_1_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_1_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getCAssignment_1_1_1_2_1()); }
(rule__RelationalExpression__CAssignment_1_1_1_2_1)
{ after(grammarAccess.getRelationalExpressionAccess().getCAssignment_1_1_1_2_1()); }
)

	rule__RelationalExpression__Group_1_1_1_2__2
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_1_1_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getLAssignment_1_1_1_2_2()); }
(rule__RelationalExpression__LAssignment_1_1_1_2_2)
{ after(grammarAccess.getRelationalExpressionAccess().getLAssignment_1_1_1_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RelationalExpression__Group_1_1_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getMEMBERParserRuleCall_1_1_1_3_0()); }
	ruleMEMBER
{ after(grammarAccess.getRelationalExpressionAccess().getMEMBERParserRuleCall_1_1_1_3_0()); }
)

	rule__RelationalExpression__Group_1_1_1_3__1
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_1_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOFParserRuleCall_1_1_1_3_1()); }
(	ruleOF)?
{ after(grammarAccess.getRelationalExpressionAccess().getOFParserRuleCall_1_1_1_3_1()); }
)

	rule__RelationalExpression__Group_1_1_1_3__2
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_1_1_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getPAssignment_1_1_1_3_2()); }
(rule__RelationalExpression__PAssignment_1_1_1_3_2)
{ after(grammarAccess.getRelationalExpressionAccess().getPAssignment_1_1_1_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LikeEscape__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeEscapeAccess().getLikeEscapeAction_0()); }
(

)
{ after(grammarAccess.getLikeEscapeAccess().getLikeEscapeAction_0()); }
)

	rule__LikeEscape__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__LikeEscape__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeEscapeAccess().getGroup_1()); }
(rule__LikeEscape__Group_1__0)?
{ after(grammarAccess.getLikeEscapeAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LikeEscape__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeEscapeAccess().getESCAPEParserRuleCall_1_0()); }
	ruleESCAPE
{ after(grammarAccess.getLikeEscapeAccess().getESCAPEParserRuleCall_1_0()); }
)

	rule__LikeEscape__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__LikeEscape__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeEscapeAccess().getCAssignment_1_1()); }
(rule__LikeEscape__CAssignment_1_1)
{ after(grammarAccess.getLikeEscapeAccess().getCAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BetweenList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenListAccess().getCAssignment_0()); }
(rule__BetweenList__CAssignment_0)
{ after(grammarAccess.getBetweenListAccess().getCAssignment_0()); }
)

	rule__BetweenList__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__BetweenList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenListAccess().getANDParserRuleCall_1()); }
	ruleAND
{ after(grammarAccess.getBetweenListAccess().getANDParserRuleCall_1()); }
)

	rule__BetweenList__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__BetweenList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenListAccess().getCAssignment_2()); }
(rule__BetweenList__CAssignment_2)
{ after(grammarAccess.getBetweenListAccess().getCAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Concatenation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatenationAccess().getAdditiveExpressionParserRuleCall_0()); }
	ruleadditiveExpression
{ after(grammarAccess.getConcatenationAccess().getAdditiveExpressionParserRuleCall_0()); }
)

	rule__Concatenation__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Concatenation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatenationAccess().getGroup_1()); }
(rule__Concatenation__Group_1__0)?
{ after(grammarAccess.getConcatenationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Concatenation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatenationAccess().getVerticalLineVerticalLineKeyword_1_0()); }

	'||' 

{ after(grammarAccess.getConcatenationAccess().getVerticalLineVerticalLineKeyword_1_0()); }
)

	rule__Concatenation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Concatenation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatenationAccess().getAAssignment_1_1()); }
(rule__Concatenation__AAssignment_1_1)
{ after(grammarAccess.getConcatenationAccess().getAAssignment_1_1()); }
)

	rule__Concatenation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Concatenation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatenationAccess().getGroup_1_2()); }
(rule__Concatenation__Group_1_2__0)*
{ after(grammarAccess.getConcatenationAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Concatenation__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatenationAccess().getVerticalLineVerticalLineKeyword_1_2_0()); }

	'||' 

{ after(grammarAccess.getConcatenationAccess().getVerticalLineVerticalLineKeyword_1_2_0()); }
)

	rule__Concatenation__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Concatenation__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatenationAccess().getAAssignment_1_2_1()); }
(rule__Concatenation__AAssignment_1_2_1)
{ after(grammarAccess.getConcatenationAccess().getAAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getMAssignment_0()); }
(rule__AdditiveExpression__MAssignment_0)
{ after(grammarAccess.getAdditiveExpressionAccess().getMAssignment_0()); }
)

	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
(rule__AdditiveExpression__Group_1__0)*
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getAlternatives_1_0()); }
(rule__AdditiveExpression__Alternatives_1_0)
{ after(grammarAccess.getAdditiveExpressionAccess().getAlternatives_1_0()); }
)

	rule__AdditiveExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getMAssignment_1_1()); }
(rule__AdditiveExpression__MAssignment_1_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getMAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplyExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyExpressionAccess().getUAssignment_0()); }
(rule__MultiplyExpression__UAssignment_0)
{ after(grammarAccess.getMultiplyExpressionAccess().getUAssignment_0()); }
)

	rule__MultiplyExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplyExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyExpressionAccess().getGroup_1()); }
(rule__MultiplyExpression__Group_1__0)*
{ after(grammarAccess.getMultiplyExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplyExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyExpressionAccess().getAlternatives_1_0()); }
(rule__MultiplyExpression__Alternatives_1_0)
{ after(grammarAccess.getMultiplyExpressionAccess().getAlternatives_1_0()); }
)

	rule__MultiplyExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplyExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyExpressionAccess().getUAssignment_1_1()); }
(rule__MultiplyExpression__UAssignment_1_1)
{ after(grammarAccess.getMultiplyExpressionAccess().getUAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getHyphenMinusKeyword_0_0()); }

	'-' 

{ after(grammarAccess.getUnaryExpressionAccess().getHyphenMinusKeyword_0_0()); }
)

	rule__UnaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getUAssignment_0_1()); }
(rule__UnaryExpression__UAssignment_0_1)
{ after(grammarAccess.getUnaryExpressionAccess().getUAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getPlusSignKeyword_1_0()); }

	'+' 

{ after(grammarAccess.getUnaryExpressionAccess().getPlusSignKeyword_1_0()); }
)

	rule__UnaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getUAssignment_1_1()); }
(rule__UnaryExpression__UAssignment_1_1)
{ after(grammarAccess.getUnaryExpressionAccess().getUAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CaseExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getCASEParserRuleCall_0_0()); }
	ruleCASE
{ after(grammarAccess.getCaseExpressionAccess().getCASEParserRuleCall_0_0()); }
)

	rule__CaseExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getCaseExpressionAccess().getWAssignment_0_1()); }
(rule__CaseExpression__WAssignment_0_1)
{ after(grammarAccess.getCaseExpressionAccess().getWAssignment_0_1()); }
)
(
{ before(grammarAccess.getCaseExpressionAccess().getWAssignment_0_1()); }
(rule__CaseExpression__WAssignment_0_1)*
{ after(grammarAccess.getCaseExpressionAccess().getWAssignment_0_1()); }
)
)

	rule__CaseExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getEAssignment_0_2()); }
(rule__CaseExpression__EAssignment_0_2)?
{ after(grammarAccess.getCaseExpressionAccess().getEAssignment_0_2()); }
)

	rule__CaseExpression__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getENDParserRuleCall_0_3()); }
	ruleEND
{ after(grammarAccess.getCaseExpressionAccess().getENDParserRuleCall_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__CaseExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getCASEParserRuleCall_1_0()); }
	ruleCASE
{ after(grammarAccess.getCaseExpressionAccess().getCASEParserRuleCall_1_0()); }
)

	rule__CaseExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getUAssignment_1_1()); }
(rule__CaseExpression__UAssignment_1_1)
{ after(grammarAccess.getCaseExpressionAccess().getUAssignment_1_1()); }
)

	rule__CaseExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getCaseExpressionAccess().getAAssignment_1_2()); }
(rule__CaseExpression__AAssignment_1_2)
{ after(grammarAccess.getCaseExpressionAccess().getAAssignment_1_2()); }
)
(
{ before(grammarAccess.getCaseExpressionAccess().getAAssignment_1_2()); }
(rule__CaseExpression__AAssignment_1_2)*
{ after(grammarAccess.getCaseExpressionAccess().getAAssignment_1_2()); }
)
)

	rule__CaseExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getEAssignment_1_3()); }
(rule__CaseExpression__EAssignment_1_3)?
{ after(grammarAccess.getCaseExpressionAccess().getEAssignment_1_3()); }
)

	rule__CaseExpression__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getENDParserRuleCall_1_4()); }
	ruleEND
{ after(grammarAccess.getCaseExpressionAccess().getENDParserRuleCall_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__WhenClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhenClauseAccess().getWHENParserRuleCall_0()); }
	ruleWHEN
{ after(grammarAccess.getWhenClauseAccess().getWHENParserRuleCall_0()); }
)

	rule__WhenClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__WhenClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhenClauseAccess().getWhenExprAssignment_1()); }
(rule__WhenClause__WhenExprAssignment_1)
{ after(grammarAccess.getWhenClauseAccess().getWhenExprAssignment_1()); }
)

	rule__WhenClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__WhenClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhenClauseAccess().getTHENParserRuleCall_2()); }
	ruleTHEN
{ after(grammarAccess.getWhenClauseAccess().getTHENParserRuleCall_2()); }
)

	rule__WhenClause__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__WhenClause__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhenClauseAccess().getThenExprAssignment_3()); }
(rule__WhenClause__ThenExprAssignment_3)
{ after(grammarAccess.getWhenClauseAccess().getThenExprAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AltWhenClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAltWhenClauseAccess().getWHENParserRuleCall_0()); }
	ruleWHEN
{ after(grammarAccess.getAltWhenClauseAccess().getWHENParserRuleCall_0()); }
)

	rule__AltWhenClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__AltWhenClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAltWhenClauseAccess().getWAssignment_1()); }
(rule__AltWhenClause__WAssignment_1)
{ after(grammarAccess.getAltWhenClauseAccess().getWAssignment_1()); }
)

	rule__AltWhenClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__AltWhenClause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAltWhenClauseAccess().getTHENParserRuleCall_2()); }
	ruleTHEN
{ after(grammarAccess.getAltWhenClauseAccess().getTHENParserRuleCall_2()); }
)

	rule__AltWhenClause__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__AltWhenClause__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAltWhenClauseAccess().getTAssignment_3()); }
(rule__AltWhenClause__TAssignment_3)
{ after(grammarAccess.getAltWhenClauseAccess().getTAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ElseClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseClauseAccess().getELSEParserRuleCall_0()); }
	ruleELSE
{ after(grammarAccess.getElseClauseAccess().getELSEParserRuleCall_0()); }
)

	rule__ElseClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ElseClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseClauseAccess().getUAssignment_1()); }
(rule__ElseClause__UAssignment_1)
{ after(grammarAccess.getElseClauseAccess().getUAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QuantifiedExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getQuantifiedExpressionAction_0()); }
(

)
{ after(grammarAccess.getQuantifiedExpressionAccess().getQuantifiedExpressionAction_0()); }
)

	rule__QuantifiedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getAlternatives_1()); }
(rule__QuantifiedExpression__Alternatives_1)
{ after(grammarAccess.getQuantifiedExpressionAccess().getAlternatives_1()); }
)

	rule__QuantifiedExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getAlternatives_2()); }
(rule__QuantifiedExpression__Alternatives_2)
{ after(grammarAccess.getQuantifiedExpressionAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QuantifiedExpression__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getLeftParenthesisKeyword_2_2_0()); }

	'(' 

{ after(grammarAccess.getQuantifiedExpressionAccess().getLeftParenthesisKeyword_2_2_0()); }
)

	rule__QuantifiedExpression__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpression__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getSAssignment_2_2_1()); }
(rule__QuantifiedExpression__SAssignment_2_2_1)
{ after(grammarAccess.getQuantifiedExpressionAccess().getSAssignment_2_2_1()); }
)

	rule__QuantifiedExpression__Group_2_2__2
;
finally {
	restoreStackSize(stackSize);
}


rule__QuantifiedExpression__Group_2_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getRightParenthesisKeyword_2_2_2()); }

	')' 

{ after(grammarAccess.getQuantifiedExpressionAccess().getRightParenthesisKeyword_2_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Atom__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getPrimaryExpressionParserRuleCall_0()); }
	ruleprimaryExpression
{ after(grammarAccess.getAtomAccess().getPrimaryExpressionParserRuleCall_0()); }
)

	rule__Atom__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getAlternatives_1()); }
(rule__Atom__Alternatives_1)*
{ after(grammarAccess.getAtomAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Atom__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getFullStopKeyword_1_0_0()); }

	'.' 

{ after(grammarAccess.getAtomAccess().getFullStopKeyword_1_0_0()); }
)

	rule__Atom__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getIdentifierParserRuleCall_1_0_1()); }
	ruleidentifier
{ after(grammarAccess.getAtomAccess().getIdentifierParserRuleCall_1_0_1()); }
)

	rule__Atom__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getGroup_1_0_2()); }
(rule__Atom__Group_1_0_2__0)?
{ after(grammarAccess.getAtomAccess().getGroup_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Atom__Group_1_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_1_0_2_0()); }

	'(' 

{ after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_1_0_2_0()); }
)

	rule__Atom__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_1_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getEAssignment_1_0_2_1()); }
(rule__Atom__EAssignment_1_0_2_1)
{ after(grammarAccess.getAtomAccess().getEAssignment_1_0_2_1()); }
)

	rule__Atom__Group_1_0_2__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_1_0_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_1_0_2_2()); }

	')' 

{ after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_1_0_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Atom__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getLeftSquareBracketKeyword_1_1_0()); }

	'[' 

{ after(grammarAccess.getAtomAccess().getLeftSquareBracketKeyword_1_1_0()); }
)

	rule__Atom__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getExpAssignment_1_1_1()); }
(rule__Atom__ExpAssignment_1_1_1)
{ after(grammarAccess.getAtomAccess().getExpAssignment_1_1_1()); }
)

	rule__Atom__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getRightSquareBracketKeyword_1_1_2()); }

	']' 

{ after(grammarAccess.getAtomAccess().getRightSquareBracketKeyword_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrimaryExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getPrimaryExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getPrimaryExpressionAccess().getPrimaryExpressionAction_0_0()); }
)

	rule__PrimaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getIdentAssignment_0_1()); }
(rule__PrimaryExpression__IdentAssignment_0_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getIdentAssignment_0_1()); }
)

	rule__PrimaryExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_0_2()); }
(rule__PrimaryExpression__Group_0_2__0)?
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrimaryExpression__Group_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getFullStopKeyword_0_2_0()); }

	'.' 

{ after(grammarAccess.getPrimaryExpressionAccess().getFullStopKeyword_0_2_0()); }
)

	rule__PrimaryExpression__Group_0_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getCLASSParserRuleCall_0_2_1()); }
	ruleCLASS
{ after(grammarAccess.getPrimaryExpressionAccess().getCLASSParserRuleCall_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimaryExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getColonKeyword_2_0()); }

	':' 

{ after(grammarAccess.getPrimaryExpressionAccess().getColonKeyword_2_0()); }
)

	rule__PrimaryExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getIdentifierParserRuleCall_2_1()); }
	ruleidentifier
{ after(grammarAccess.getPrimaryExpressionAccess().getIdentifierParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimaryExpression__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_3_0()); }

	'(' 

{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_3_0()); }
)

	rule__PrimaryExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives_3_1()); }
(rule__PrimaryExpression__Alternatives_3_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives_3_1()); }
)

	rule__PrimaryExpression__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_3_2()); }

	')' 

{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrimaryExpression__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getQuestionMarkKeyword_4_0()); }

	'?' 

{ after(grammarAccess.getPrimaryExpressionAccess().getQuestionMarkKeyword_4_0()); }
)

	rule__PrimaryExpression__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getINTTerminalRuleCall_4_1()); }
(	RULE_INT)?
{ after(grammarAccess.getPrimaryExpressionAccess().getINTTerminalRuleCall_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionOrVector__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrVectorAccess().getExpressionParserRuleCall_0()); }
	ruleexpression
{ after(grammarAccess.getExpressionOrVectorAccess().getExpressionParserRuleCall_0()); }
)

	rule__ExpressionOrVector__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionOrVector__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrVectorAccess().getVAssignment_1()); }
(rule__ExpressionOrVector__VAssignment_1)?
{ after(grammarAccess.getExpressionOrVectorAccess().getVAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VectorExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorExprAccess().getCommaKeyword_0()); }

	',' 

{ after(grammarAccess.getVectorExprAccess().getCommaKeyword_0()); }
)

	rule__VectorExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__VectorExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorExprAccess().getEAssignment_1()); }
(rule__VectorExpr__EAssignment_1)
{ after(grammarAccess.getVectorExprAccess().getEAssignment_1()); }
)

	rule__VectorExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__VectorExpr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorExprAccess().getGroup_2()); }
(rule__VectorExpr__Group_2__0)*
{ after(grammarAccess.getVectorExprAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VectorExpr__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorExprAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getVectorExprAccess().getCommaKeyword_2_0()); }
)

	rule__VectorExpr__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__VectorExpr__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorExprAccess().getEAssignment_2_1()); }
(rule__VectorExpr__EAssignment_2_1)
{ after(grammarAccess.getVectorExprAccess().getEAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IdentPrimary__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentPrimaryAccess().getIdentPrimaryAction_0_0()); }
(

)
{ after(grammarAccess.getIdentPrimaryAccess().getIdentPrimaryAction_0_0()); }
)

	rule__IdentPrimary__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__IdentPrimary__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentPrimaryAccess().getIdentifierParserRuleCall_0_1()); }
	ruleidentifier
{ after(grammarAccess.getIdentPrimaryAccess().getIdentifierParserRuleCall_0_1()); }
)

	rule__IdentPrimary__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}


rule__IdentPrimary__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentPrimaryAccess().getAlternatives_0_2()); }
(rule__IdentPrimary__Alternatives_0_2)*
{ after(grammarAccess.getIdentPrimaryAccess().getAlternatives_0_2()); }
)

	rule__IdentPrimary__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}


rule__IdentPrimary__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentPrimaryAccess().getGroup_0_3()); }
(rule__IdentPrimary__Group_0_3__0)?
{ after(grammarAccess.getIdentPrimaryAccess().getGroup_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__IdentPrimary__Group_0_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentPrimaryAccess().getFullStopKeyword_0_2_0_0()); }

	'.' 

{ after(grammarAccess.getIdentPrimaryAccess().getFullStopKeyword_0_2_0_0()); }
)

	rule__IdentPrimary__Group_0_2_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__IdentPrimary__Group_0_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentPrimaryAccess().getIdentifierParserRuleCall_0_2_0_1()); }
	ruleidentifier
{ after(grammarAccess.getIdentPrimaryAccess().getIdentifierParserRuleCall_0_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IdentPrimary__Group_0_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentPrimaryAccess().getFullStopKeyword_0_2_1_0()); }

	'.' 

{ after(grammarAccess.getIdentPrimaryAccess().getFullStopKeyword_0_2_1_0()); }
)

	rule__IdentPrimary__Group_0_2_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__IdentPrimary__Group_0_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentPrimaryAccess().getELEMENTSParserRuleCall_0_2_1_1()); }
	ruleELEMENTS
{ after(grammarAccess.getIdentPrimaryAccess().getELEMENTSParserRuleCall_0_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IdentPrimary__Group_0_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentPrimaryAccess().getFullStopKeyword_0_2_2_0()); }

	'.' 

{ after(grammarAccess.getIdentPrimaryAccess().getFullStopKeyword_0_2_2_0()); }
)

	rule__IdentPrimary__Group_0_2_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__IdentPrimary__Group_0_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentPrimaryAccess().getOBJECTParserRuleCall_0_2_2_1()); }
	ruleOBJECT
{ after(grammarAccess.getIdentPrimaryAccess().getOBJECTParserRuleCall_0_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IdentPrimary__Group_0_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentPrimaryAccess().getLeftParenthesisKeyword_0_3_0()); }

	'(' 

{ after(grammarAccess.getIdentPrimaryAccess().getLeftParenthesisKeyword_0_3_0()); }
)

	rule__IdentPrimary__Group_0_3__1
;
finally {
	restoreStackSize(stackSize);
}


rule__IdentPrimary__Group_0_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentPrimaryAccess().getEAssignment_0_3_1()); }
(rule__IdentPrimary__EAssignment_0_3_1)
{ after(grammarAccess.getIdentPrimaryAccess().getEAssignment_0_3_1()); }
)

	rule__IdentPrimary__Group_0_3__2
;
finally {
	restoreStackSize(stackSize);
}


rule__IdentPrimary__Group_0_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentPrimaryAccess().getRightParenthesisKeyword_0_3_2()); }

	')' 

{ after(grammarAccess.getIdentPrimaryAccess().getRightParenthesisKeyword_0_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Aggregate__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getAggregateAction_0_0()); }
(

)
{ after(grammarAccess.getAggregateAccess().getAggregateAction_0_0()); }
)

	rule__Aggregate__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Aggregate__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getAlternatives_0_1()); }
(rule__Aggregate__Alternatives_0_1)
{ after(grammarAccess.getAggregateAccess().getAlternatives_0_1()); }
)

	rule__Aggregate__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Aggregate__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getLeftParenthesisKeyword_0_2()); }

	'(' 

{ after(grammarAccess.getAggregateAccess().getLeftParenthesisKeyword_0_2()); }
)

	rule__Aggregate__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Aggregate__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getAAssignment_0_3()); }
(rule__Aggregate__AAssignment_0_3)
{ after(grammarAccess.getAggregateAccess().getAAssignment_0_3()); }
)

	rule__Aggregate__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}


rule__Aggregate__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getRightParenthesisKeyword_0_4()); }

	')' 

{ after(grammarAccess.getAggregateAccess().getRightParenthesisKeyword_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Aggregate__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getCOUNTParserRuleCall_1_0()); }
	ruleCOUNT
{ after(grammarAccess.getAggregateAccess().getCOUNTParserRuleCall_1_0()); }
)

	rule__Aggregate__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Aggregate__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getLeftParenthesisKeyword_1_1()); }

	'(' 

{ after(grammarAccess.getAggregateAccess().getLeftParenthesisKeyword_1_1()); }
)

	rule__Aggregate__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Aggregate__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getAlternatives_1_2()); }
(rule__Aggregate__Alternatives_1_2)
{ after(grammarAccess.getAggregateAccess().getAlternatives_1_2()); }
)

	rule__Aggregate__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Aggregate__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getRightParenthesisKeyword_1_3()); }

	')' 

{ after(grammarAccess.getAggregateAccess().getRightParenthesisKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Aggregate__Group_1_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getAlternatives_1_2_1_0()); }
(rule__Aggregate__Alternatives_1_2_1_0)?
{ after(grammarAccess.getAggregateAccess().getAlternatives_1_2_1_0()); }
)

	rule__Aggregate__Group_1_2_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Aggregate__Group_1_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getAlternatives_1_2_1_1()); }
(rule__Aggregate__Alternatives_1_2_1_1)
{ after(grammarAccess.getAggregateAccess().getAlternatives_1_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CollectionExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExprAccess().getAlternatives_0()); }
(rule__CollectionExpr__Alternatives_0)
{ after(grammarAccess.getCollectionExprAccess().getAlternatives_0()); }
)

	rule__CollectionExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExprAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getCollectionExprAccess().getLeftParenthesisKeyword_1()); }
)

	rule__CollectionExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionExpr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExprAccess().getPathParserRuleCall_2()); }
	rulepath
{ after(grammarAccess.getCollectionExprAccess().getPathParserRuleCall_2()); }
)

	rule__CollectionExpr__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionExpr__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExprAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getCollectionExprAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__CompoundExpr__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundExprAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getCompoundExprAccess().getLeftParenthesisKeyword_2_0()); }
)

	rule__CompoundExpr__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundExpr__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundExprAccess().getAlternatives_2_1()); }
(rule__CompoundExpr__Alternatives_2_1)
{ after(grammarAccess.getCompoundExprAccess().getAlternatives_2_1()); }
)

	rule__CompoundExpr__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundExpr__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundExprAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getCompoundExprAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CompoundExpr__Group_2_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundExprAccess().getEAssignment_2_1_0_0()); }
(rule__CompoundExpr__EAssignment_2_1_0_0)
{ after(grammarAccess.getCompoundExprAccess().getEAssignment_2_1_0_0()); }
)

	rule__CompoundExpr__Group_2_1_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundExpr__Group_2_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundExprAccess().getGroup_2_1_0_1()); }
(rule__CompoundExpr__Group_2_1_0_1__0)*
{ after(grammarAccess.getCompoundExprAccess().getGroup_2_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompoundExpr__Group_2_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundExprAccess().getCommaKeyword_2_1_0_1_0()); }

	',' 

{ after(grammarAccess.getCompoundExprAccess().getCommaKeyword_2_1_0_1_0()); }
)

	rule__CompoundExpr__Group_2_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundExpr__Group_2_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundExprAccess().getEAssignment_2_1_0_1_1()); }
(rule__CompoundExpr__EAssignment_2_1_0_1_1)
{ after(grammarAccess.getCompoundExprAccess().getEAssignment_2_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExprList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprListAccess().getAlternatives_0()); }
(rule__ExprList__Alternatives_0)?
{ after(grammarAccess.getExprListAccess().getAlternatives_0()); }
)

	rule__ExprList__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprListAccess().getAlternatives_1()); }
(rule__ExprList__Alternatives_1)?
{ after(grammarAccess.getExprListAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExprList__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprListAccess().getEAssignment_1_0_0()); }
(rule__ExprList__EAssignment_1_0_0)
{ after(grammarAccess.getExprListAccess().getEAssignment_1_0_0()); }
)

	rule__ExprList__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprList__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprListAccess().getAlternatives_1_0_1()); }
(rule__ExprList__Alternatives_1_0_1)?
{ after(grammarAccess.getExprListAccess().getAlternatives_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExprList__Group_1_0_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprListAccess().getCommaKeyword_1_0_1_0_0()); }

	',' 

{ after(grammarAccess.getExprListAccess().getCommaKeyword_1_0_1_0_0()); }
)

	rule__ExprList__Group_1_0_1_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprList__Group_1_0_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprListAccess().getEAssignment_1_0_1_0_1()); }
(rule__ExprList__EAssignment_1_0_1_0_1)
{ after(grammarAccess.getExprListAccess().getEAssignment_1_0_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExprList__Group_1_0_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprListAccess().getFROMParserRuleCall_1_0_1_1_0()); }
	ruleFROM
{ after(grammarAccess.getExprListAccess().getFROMParserRuleCall_1_0_1_1_0()); }
)

	rule__ExprList__Group_1_0_1_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprList__Group_1_0_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprListAccess().getEAssignment_1_0_1_1_1()); }
(rule__ExprList__EAssignment_1_0_1_1_1)
{ after(grammarAccess.getExprListAccess().getEAssignment_1_0_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExprList__Group_1_0_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprListAccess().getASParserRuleCall_1_0_1_2_0()); }
	ruleAS
{ after(grammarAccess.getExprListAccess().getASParserRuleCall_1_0_1_2_0()); }
)

	rule__ExprList__Group_1_0_1_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprList__Group_1_0_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprListAccess().getIdAssignment_1_0_1_2_1()); }
(rule__ExprList__IdAssignment_1_0_1_2_1)
{ after(grammarAccess.getExprListAccess().getIdAssignment_1_0_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExprList__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprListAccess().getFROMParserRuleCall_1_1_0()); }
	ruleFROM
{ after(grammarAccess.getExprListAccess().getFROMParserRuleCall_1_1_0()); }
)

	rule__ExprList__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprList__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprListAccess().getEAssignment_1_1_1()); }
(rule__ExprList__EAssignment_1_1_1)
{ after(grammarAccess.getExprListAccess().getEAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Path__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathAccess().getIdentifierParserRuleCall_0()); }
	ruleidentifier
{ after(grammarAccess.getPathAccess().getIdentifierParserRuleCall_0()); }
)

	rule__Path__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Path__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathAccess().getGroup_1()); }
(rule__Path__Group_1__0)*
{ after(grammarAccess.getPathAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Path__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getPathAccess().getFullStopKeyword_1_0()); }
)

	rule__Path__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Path__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathAccess().getIdentifierParserRuleCall_1_1()); }
	ruleidentifier
{ after(grammarAccess.getPathAccess().getIdentifierParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Identifier__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierAccess().getDollarSignKeyword_0_0()); }
(
	'$' 
)?
{ after(grammarAccess.getIdentifierAccess().getDollarSignKeyword_0_0()); }
)

	rule__Identifier__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Identifier__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_0_1()); }
	RULE_ID
{ after(grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Number__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getFullStopKeyword_0_0()); }

	'.' 

{ after(grammarAccess.getNumberAccess().getFullStopKeyword_0_0()); }
)

	rule__Number__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getGroup_0_1()); }
(rule__Number__Group_0_1__0)?
{ after(grammarAccess.getNumberAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Number__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_0_1_0()); }
	RULE_INT
{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_0_1_0()); }
)

	rule__Number__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getGroup_0_1_1()); }
(rule__Number__Group_0_1_1__0)?
{ after(grammarAccess.getNumberAccess().getGroup_0_1_1()); }
)

	rule__Number__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getAlternatives_0_1_2()); }
(rule__Number__Alternatives_0_1_2)?
{ after(grammarAccess.getNumberAccess().getAlternatives_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Number__Group_0_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getEKeyword_0_1_1_0()); }

	'e' 

{ after(grammarAccess.getNumberAccess().getEKeyword_0_1_1_0()); }
)

	rule__Number__Group_0_1_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_0_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getAlternatives_0_1_1_1()); }
(rule__Number__Alternatives_0_1_1_1)?
{ after(grammarAccess.getNumberAccess().getAlternatives_0_1_1_1()); }
)

	rule__Number__Group_0_1_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_0_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_0_1_1_2()); }
	RULE_INT
{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_0_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Number__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getAlternatives_1_0()); }
(rule__Number__Alternatives_1_0)
{ after(grammarAccess.getNumberAccess().getAlternatives_1_0()); }
)

	rule__Number__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getAlternatives_1_1()); }
(rule__Number__Alternatives_1_1)?
{ after(grammarAccess.getNumberAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Number__Group_1_1_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getFullStopKeyword_1_1_1_0_0()); }

	'.' 

{ after(grammarAccess.getNumberAccess().getFullStopKeyword_1_1_1_0_0()); }
)

	rule__Number__Group_1_1_1_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_1_1_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0_1()); }
(	RULE_INT)?
{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0_1()); }
)

	rule__Number__Group_1_1_1_0__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_1_1_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getGroup_1_1_1_0_2()); }
(rule__Number__Group_1_1_1_0_2__0)?
{ after(grammarAccess.getNumberAccess().getGroup_1_1_1_0_2()); }
)

	rule__Number__Group_1_1_1_0__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_1_1_1_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getAlternatives_1_1_1_0_3()); }
(rule__Number__Alternatives_1_1_1_0_3)?
{ after(grammarAccess.getNumberAccess().getAlternatives_1_1_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Number__Group_1_1_1_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getEKeyword_1_1_1_0_2_0()); }

	'e' 

{ after(grammarAccess.getNumberAccess().getEKeyword_1_1_1_0_2_0()); }
)

	rule__Number__Group_1_1_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_1_1_1_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getAlternatives_1_1_1_0_2_1()); }
(rule__Number__Alternatives_1_1_1_0_2_1)?
{ after(grammarAccess.getNumberAccess().getAlternatives_1_1_1_0_2_1()); }
)

	rule__Number__Group_1_1_1_0_2__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_1_1_1_0_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0_2_2()); }
	RULE_INT
{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Number__Group_1_1_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getEKeyword_1_1_1_1_0()); }

	'e' 

{ after(grammarAccess.getNumberAccess().getEKeyword_1_1_1_1_0()); }
)

	rule__Number__Group_1_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_1_1_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getAlternatives_1_1_1_1_1()); }
(rule__Number__Alternatives_1_1_1_1_1)?
{ after(grammarAccess.getNumberAccess().getAlternatives_1_1_1_1_1()); }
)

	rule__Number__Group_1_1_1_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_1_1_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_1_2()); }
	RULE_INT
{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_1_2()); }
)

	rule__Number__Group_1_1_1_1__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_1_1_1_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getAlternatives_1_1_1_1_3()); }
(rule__Number__Alternatives_1_1_1_1_3)?
{ after(grammarAccess.getNumberAccess().getAlternatives_1_1_1_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__IN_CLASS__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIN_CLASSAccess().getINParserRuleCall_0()); }
	ruleIN
{ after(grammarAccess.getIN_CLASSAccess().getINParserRuleCall_0()); }
)

	rule__IN_CLASS__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__IN_CLASS__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIN_CLASSAccess().getCLASSParserRuleCall_1()); }
	ruleCLASS
{ after(grammarAccess.getIN_CLASSAccess().getCLASSParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IN_ELEMENTS__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIN_ELEMENTSAccess().getINParserRuleCall_0()); }
	ruleIN
{ after(grammarAccess.getIN_ELEMENTSAccess().getINParserRuleCall_0()); }
)

	rule__IN_ELEMENTS__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__IN_ELEMENTS__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIN_ELEMENTSAccess().getELEMENTSParserRuleCall_1()); }
	ruleELEMENTS
{ after(grammarAccess.getIN_ELEMENTSAccess().getELEMENTSParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GROUP_BY__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGROUP_BYAccess().getAlternatives_0()); }
(rule__GROUP_BY__Alternatives_0)
{ after(grammarAccess.getGROUP_BYAccess().getAlternatives_0()); }
)

	rule__GROUP_BY__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__GROUP_BY__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGROUP_BYAccess().getBYParserRuleCall_1()); }
	ruleBY
{ after(grammarAccess.getGROUP_BYAccess().getBYParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ORDER_BY__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getORDER_BYAccess().getAlternatives_0()); }
(rule__ORDER_BY__Alternatives_0)
{ after(grammarAccess.getORDER_BYAccess().getAlternatives_0()); }
)

	rule__ORDER_BY__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__ORDER_BY__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getORDER_BYAccess().getBYParserRuleCall_1()); }
	ruleBY
{ after(grammarAccess.getORDER_BYAccess().getBYParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Modifiers__UnorderedGroup
    @init {
		int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getModifiersAccess().getUnorderedGroup());
    }
:
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModifiersAccess().getUnorderedGroup(), 0);
	 				}
					(
						{ before(grammarAccess.getModifiersAccess().getUniqueAssignment_0()); }
						(rule__Modifiers__UniqueAssignment_0)
						{ after(grammarAccess.getModifiersAccess().getUniqueAssignment_0()); }
					)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModifiersAccess().getUnorderedGroup());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModifiersAccess().getUnorderedGroup(), 1);
	 				}
					(
						{ before(grammarAccess.getModifiersAccess().getFixedAssignment_1()); }
						(rule__Modifiers__FixedAssignment_1)
						{ after(grammarAccess.getModifiersAccess().getFixedAssignment_1()); }
					)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModifiersAccess().getUnorderedGroup());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModifiersAccess().getUnorderedGroup(), 2);
	 				}
					(
						{ before(grammarAccess.getModifiersAccess().getGroup_2()); }
						(rule__Modifiers__Group_2__0)
						{ after(grammarAccess.getModifiersAccess().getGroup_2()); }
					)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModifiersAccess().getUnorderedGroup());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModifiersAccess().getUnorderedGroup(), 3)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModifiersAccess().getUnorderedGroup(), 3);
	 				}
					(
						{ before(grammarAccess.getModifiersAccess().getGroup_3()); }
						(rule__Modifiers__Group_3__0)
						{ after(grammarAccess.getModifiersAccess().getGroup_3()); }
					)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModifiersAccess().getUnorderedGroup());
	 				}
 				)
			)  

		)*	
	)
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getModifiersAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}




rule__DataDefinition__DAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataDefinitionAccess().getDDeclarationParserRuleCall_1_0_0()); }
	ruledeclaration{ after(grammarAccess.getDataDefinitionAccess().getDDeclarationParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getNameAlternatives_0_0()); }
(rule__FieldDeclaration__NameAlternatives_0_0)
{ after(grammarAccess.getFieldDeclarationAccess().getNameAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__ModifiersAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getModifiersModifiersParserRuleCall_2_0_0()); }
	rulemodifiers{ after(grammarAccess.getFieldDeclarationAccess().getModifiersModifiersParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__TypedefAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getTypedefFieldTypeParserRuleCall_2_1_0()); }
	rulefieldType{ after(grammarAccess.getFieldDeclarationAccess().getTypedefFieldTypeParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Modifiers__UniqueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifiersAccess().getUniqueUniqueKeyword_0_0()); }
(
{ before(grammarAccess.getModifiersAccess().getUniqueUniqueKeyword_0_0()); }

	'unique' 

{ after(grammarAccess.getModifiersAccess().getUniqueUniqueKeyword_0_0()); }
)

{ after(grammarAccess.getModifiersAccess().getUniqueUniqueKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Modifiers__FixedAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifiersAccess().getFixedFixedKeyword_1_0()); }
(
{ before(grammarAccess.getModifiersAccess().getFixedFixedKeyword_1_0()); }

	'fixed' 

{ after(grammarAccess.getModifiersAccess().getFixedFixedKeyword_1_0()); }
)

{ after(grammarAccess.getModifiersAccess().getFixedFixedKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Modifiers__NotNullAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifiersAccess().getNotNullNotKeyword_2_0_0()); }
(
{ before(grammarAccess.getModifiersAccess().getNotNullNotKeyword_2_0_0()); }

	'not' 

{ after(grammarAccess.getModifiersAccess().getNotNullNotKeyword_2_0_0()); }
)

{ after(grammarAccess.getModifiersAccess().getNotNullNotKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Modifiers__NotEmptyAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifiersAccess().getNotEmptyNotKeyword_3_0_0()); }
(
{ before(grammarAccess.getModifiersAccess().getNotEmptyNotKeyword_3_0_0()); }

	'not' 

{ after(grammarAccess.getModifiersAccess().getNotEmptyNotKeyword_3_0_0()); }
)

{ after(grammarAccess.getModifiersAccess().getNotEmptyNotKeyword_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldType__TypeAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldTypeAccess().getTypeAlternatives_5_1_0()); }
(rule__FieldType__TypeAlternatives_5_1_0)
{ after(grammarAccess.getFieldTypeAccess().getTypeAlternatives_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldType__TypeDecAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldTypeAccess().getTypeDecTypeDeclarationCrossReference_8_0()); }
(
{ before(grammarAccess.getFieldTypeAccess().getTypeDecTypeDeclarationIDTerminalRuleCall_8_0_1()); }
	RULE_ID{ after(grammarAccess.getFieldTypeAccess().getTypeDecTypeDeclarationIDTerminalRuleCall_8_0_1()); }
)
{ after(grammarAccess.getFieldTypeAccess().getTypeDecTypeDeclarationCrossReference_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntEnum__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntEnumAccess().getNameIntKeyword_0_0()); }
(
{ before(grammarAccess.getIntEnumAccess().getNameIntKeyword_0_0()); }

	'int' 

{ after(grammarAccess.getIntEnumAccess().getNameIntKeyword_0_0()); }
)

{ after(grammarAccess.getIntEnumAccess().getNameIntKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntEnum__ValuesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntEnumAccess().getValuesEnumValueParserRuleCall_2_0()); }
	ruleenumValue{ after(grammarAccess.getIntEnumAccess().getValuesEnumValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntEnum__ValuesAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntEnumAccess().getValuesEnumValueParserRuleCall_3_1_0()); }
	ruleenumValue{ after(grammarAccess.getIntEnumAccess().getValuesEnumValueParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CharEnum__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharEnumAccess().getNameCharKeyword_0_0()); }
(
{ before(grammarAccess.getCharEnumAccess().getNameCharKeyword_0_0()); }

	'char' 

{ after(grammarAccess.getCharEnumAccess().getNameCharKeyword_0_0()); }
)

{ after(grammarAccess.getCharEnumAccess().getNameCharKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CharEnum__ValuesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharEnumAccess().getValuesSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getCharEnumAccess().getValuesSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CharEnum__ValuesAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharEnumAccess().getValuesSTRINGTerminalRuleCall_3_1_0()); }
	RULE_STRING{ after(grammarAccess.getCharEnumAccess().getValuesSTRINGTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumValue__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumValueAccess().getNameSTRINGTerminalRuleCall_0_0()); }
	RULE_STRING{ after(grammarAccess.getEnumValueAccess().getNameSTRINGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumValue__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumValueAccess().getValueAlternatives_2_0()); }
(rule__EnumValue__ValueAlternatives_2_0)
{ after(grammarAccess.getEnumValueAccess().getValueAlternatives_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CharType__LengthAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharTypeAccess().getLengthINTTerminalRuleCall_2_1_0()); }
	RULE_INT{ after(grammarAccess.getCharTypeAccess().getLengthINTTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pointer__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPointerAccess().getTypeTypeParserRuleCall_2_0()); }
	ruletype{ after(grammarAccess.getPointerAccess().getTypeTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetType__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetTypeAccess().getTypeTypeParserRuleCall_2_0()); }
	ruletype{ after(grammarAccess.getSetTypeAccess().getTypeTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubFieldDeclaration__SubFieldOfAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubFieldDeclarationAccess().getSubFieldOfFieldDeclarationCrossReference_0_0()); }
(
{ before(grammarAccess.getSubFieldDeclarationAccess().getSubFieldOfFieldDeclarationIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getSubFieldDeclarationAccess().getSubFieldOfFieldDeclarationIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getSubFieldDeclarationAccess().getSubFieldOfFieldDeclarationCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubFieldDeclaration__DAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubFieldDeclarationAccess().getDDeclarationParserRuleCall_2_0()); }
	ruledeclaration{ after(grammarAccess.getSubFieldDeclarationAccess().getDDeclarationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TitleDeclaration__TitleAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTitleDeclarationAccess().getTitleTitleParserRuleCall_3_0()); }
	ruletitle{ after(grammarAccess.getTitleDeclarationAccess().getTitleTitleParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Title__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTitleAccess().getNameTypeParserRuleCall_0_0()); }
	ruletype{ after(grammarAccess.getTitleAccess().getNameTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDeclaration__ImportedNamespaceAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDeclarationAccess().getImportedNamespaceTypeParserRuleCall_3_0()); }
	ruletype{ after(grammarAccess.getIncludeDeclarationAccess().getImportedNamespaceTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getTypeDeclarationAccess().getNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__FieldTypeAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getFieldTypeFieldTypeParserRuleCall_5_0()); }
	rulefieldType{ after(grammarAccess.getTypeDeclarationAccess().getFieldTypeFieldTypeParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValidationRuleDeclaration__ErrorMessageAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValidationRuleDeclarationAccess().getErrorMessageErrorMessageParserRuleCall_1_0()); }
	ruleerrorMessage{ after(grammarAccess.getValidationRuleDeclarationAccess().getErrorMessageErrorMessageParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonValidationRuleDeclaration__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonValidationRuleDeclarationAccess().getNameCompareKeyword_0_0()); }
(
{ before(grammarAccess.getComparisonValidationRuleDeclarationAccess().getNameCompareKeyword_0_0()); }

	'compare' 

{ after(grammarAccess.getComparisonValidationRuleDeclarationAccess().getNameCompareKeyword_0_0()); }
)

{ after(grammarAccess.getComparisonValidationRuleDeclarationAccess().getNameCompareKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonValidationRuleDeclaration__ArgsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonValidationRuleDeclarationAccess().getArgsFunctionArgumentsParserRuleCall_1_0()); }
	rulefunctionArguments{ after(grammarAccess.getComparisonValidationRuleDeclarationAccess().getArgsFunctionArgumentsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonValidationRuleDeclaration__ComparisonExpAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonValidationRuleDeclarationAccess().getComparisonExpComparisonExpressionParserRuleCall_3_0()); }
	rulecomparisonExpression{ after(grammarAccess.getComparisonValidationRuleDeclarationAccess().getComparisonExpComparisonExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__LhsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getLhsComparisonPartParserRuleCall_0_0()); }
	rulecomparisonPart{ after(grammarAccess.getComparisonExpressionAccess().getLhsComparisonPartParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__OAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getOOperatorParserRuleCall_1_0()); }
	ruleoperator{ after(grammarAccess.getComparisonExpressionAccess().getOOperatorParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__RhsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getRhsComparisonPartParserRuleCall_2_0()); }
	rulecomparisonPart{ after(grammarAccess.getComparisonExpressionAccess().getRhsComparisonPartParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonPart__TAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonPartAccess().getTTypeParserRuleCall_0_0()); }
	ruletype{ after(grammarAccess.getComparisonPartAccess().getTTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonPart__NAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonPartAccess().getNINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getComparisonPartAccess().getNINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonPart__DfAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonPartAccess().getDfDateFunctionParserRuleCall_2_0()); }
	ruledateFunction{ after(grammarAccess.getComparisonPartAccess().getDfDateFunctionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonPart__UAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonPartAccess().getUUpperFunctionParserRuleCall_3_0()); }
	ruleupperFunction{ after(grammarAccess.getComparisonPartAccess().getUUpperFunctionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonPart__LAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonPartAccess().getLLowerFunctionParserRuleCall_4_0()); }
	rulelowerFunction{ after(grammarAccess.getComparisonPartAccess().getLLowerFunctionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonPart__DAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonPartAccess().getDDateConstantParserRuleCall_5_0()); }
	ruledateConstant{ after(grammarAccess.getComparisonPartAccess().getDDateConstantParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UpperFunction__TAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUpperFunctionAccess().getTTypeParserRuleCall_2_0()); }
	ruletype{ after(grammarAccess.getUpperFunctionAccess().getTTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LowerFunction__TAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLowerFunctionAccess().getTTypeParserRuleCall_2_0()); }
	ruletype{ after(grammarAccess.getLowerFunctionAccess().getTTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeValidationRuleDeclaration__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeValidationRuleDeclarationAccess().getNameAlternatives_0_0()); }
(rule__RangeValidationRuleDeclaration__NameAlternatives_0_0)
{ after(grammarAccess.getRangeValidationRuleDeclarationAccess().getNameAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeValidationRuleDeclaration__ArgsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeValidationRuleDeclarationAccess().getArgsFunctionArgumentsParserRuleCall_1_0()); }
	rulefunctionArguments{ after(grammarAccess.getRangeValidationRuleDeclarationAccess().getArgsFunctionArgumentsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeValidationRuleDeclaration__RangeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeValidationRuleDeclarationAccess().getRangeRangeParserRuleCall_3_0()); }
	rulerange{ after(grammarAccess.getRangeValidationRuleDeclarationAccess().getRangeRangeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegexValidationRuleDeclaration__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegexValidationRuleDeclarationAccess().getNameMatchesKeyword_0_0()); }
(
{ before(grammarAccess.getRegexValidationRuleDeclarationAccess().getNameMatchesKeyword_0_0()); }

	'matches' 

{ after(grammarAccess.getRegexValidationRuleDeclarationAccess().getNameMatchesKeyword_0_0()); }
)

{ after(grammarAccess.getRegexValidationRuleDeclarationAccess().getNameMatchesKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegexValidationRuleDeclaration__ArgsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegexValidationRuleDeclarationAccess().getArgsFunctionArgumentsParserRuleCall_1_0()); }
	rulefunctionArguments{ after(grammarAccess.getRegexValidationRuleDeclarationAccess().getArgsFunctionArgumentsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegexValidationRuleDeclaration__ExpAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegexValidationRuleDeclarationAccess().getExpSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getRegexValidationRuleDeclarationAccess().getExpSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Range__FAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getFRangeBoundParserRuleCall_0_0()); }
	rulerangeBound{ after(grammarAccess.getRangeAccess().getFRangeBoundParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Range__TAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getTRangeBoundParserRuleCall_2_0()); }
	rulerangeBound{ after(grammarAccess.getRangeAccess().getTRangeBoundParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UniquenessValidationRuleDeclaration__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUniquenessValidationRuleDeclarationAccess().getNameUniqueKeyword_0_0()); }
(
{ before(grammarAccess.getUniquenessValidationRuleDeclarationAccess().getNameUniqueKeyword_0_0()); }

	'unique' 

{ after(grammarAccess.getUniquenessValidationRuleDeclarationAccess().getNameUniqueKeyword_0_0()); }
)

{ after(grammarAccess.getUniquenessValidationRuleDeclarationAccess().getNameUniqueKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UniquenessValidationRuleDeclaration__ArgsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUniquenessValidationRuleDeclarationAccess().getArgsFunctionArgumentsParserRuleCall_1_0()); }
	rulefunctionArguments{ after(grammarAccess.getUniquenessValidationRuleDeclarationAccess().getArgsFunctionArgumentsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorMessage__MessageAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getErrorMessageAccess().getMessageSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getErrorMessageAccess().getMessageSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NativeValidationRuleDeclaration__FieldAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeValidationRuleDeclarationAccess().getFieldFieldDeclarationCrossReference_0_0()); }
(
{ before(grammarAccess.getNativeValidationRuleDeclarationAccess().getFieldFieldDeclarationIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getNativeValidationRuleDeclarationAccess().getFieldFieldDeclarationIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getNativeValidationRuleDeclarationAccess().getFieldFieldDeclarationCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NativeValidationRuleDeclaration__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeAlternatives_2_0()); }
(rule__NativeValidationRuleDeclaration__TypeAlternatives_2_0)
{ after(grammarAccess.getNativeValidationRuleDeclarationAccess().getTypeAlternatives_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NativeValidationRuleDeclaration__MessageAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeValidationRuleDeclarationAccess().getMessageSTRINGTerminalRuleCall_4_0()); }
	RULE_STRING{ after(grammarAccess.getNativeValidationRuleDeclarationAccess().getMessageSTRINGTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__BAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getBIDTerminalRuleCall_0_0_0()); }
	RULE_ID{ after(grammarAccess.getFunctionDeclarationAccess().getBIDTerminalRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ArgAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getArgFunctionArgumentDeclarationParserRuleCall_2_0()); }
	rulefunctionArgumentDeclaration{ after(grammarAccess.getFunctionDeclarationAccess().getArgFunctionArgumentDeclarationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__BodyAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getBodyFunctionBodyParserRuleCall_3_0()); }
	rulefunctionBody{ after(grammarAccess.getFunctionDeclarationAccess().getBodyFunctionBodyParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__MAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getMErrorMessageParserRuleCall_4_0()); }
	ruleerrorMessage{ after(grammarAccess.getFunctionDeclarationAccess().getMErrorMessageParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgumentDeclaration__FAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentDeclarationAccess().getFFunctionArgumentBodyParserRuleCall_2_0()); }
	rulefunctionArgumentBody{ after(grammarAccess.getFunctionArgumentDeclarationAccess().getFFunctionArgumentBodyParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgumentDeclaration__FAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentDeclarationAccess().getFFunctionArgumentBodyParserRuleCall_3_1_0()); }
	rulefunctionArgumentBody{ after(grammarAccess.getFunctionArgumentDeclarationAccess().getFFunctionArgumentBodyParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgumentBody__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentBodyAccess().getNameAlternatives_1_0()); }
(rule__FunctionArgumentBody__NameAlternatives_1_0)
{ after(grammarAccess.getFunctionArgumentBodyAccess().getNameAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getFunctionCallAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__FAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFFunctionArgumentsParserRuleCall_1_0()); }
	rulefunctionArguments{ after(grammarAccess.getFunctionCallAccess().getFFunctionArgumentsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArguments__AAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentsAccess().getATypeParserRuleCall_2_0_0()); }
	ruletype{ after(grammarAccess.getFunctionArgumentsAccess().getATypeParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArguments__AAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionArgumentsAccess().getATypeParserRuleCall_2_1_1_0()); }
	ruletype{ after(grammarAccess.getFunctionArgumentsAccess().getATypeParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionBody__SAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionBodyAccess().getSStatementParserRuleCall_1_0_0()); }
	rulestatement{ after(grammarAccess.getFunctionBodyAccess().getSStatementParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionBody__EAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionBodyAccess().getEExpressionParserRuleCall_1_1_0()); }
	ruleexpression{ after(grammarAccess.getFunctionBodyAccess().getEExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnionRule__QAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionRuleAccess().getQQueryRuleParserRuleCall_0_0()); }
	rulequeryRule{ after(grammarAccess.getUnionRuleAccess().getQQueryRuleParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnionRule__QAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnionRuleAccess().getQQueryRuleParserRuleCall_1_1_0()); }
	rulequeryRule{ after(grammarAccess.getUnionRuleAccess().getQQueryRuleParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QueryRule__WhereAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryRuleAccess().getWhereWhereClauseParserRuleCall_1_0()); }
	rulewhereClause{ after(grammarAccess.getQueryRuleAccess().getWhereWhereClauseParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QueryRule__GroupByAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryRuleAccess().getGroupByGroupByClauseParserRuleCall_2_0()); }
	rulegroupByClause{ after(grammarAccess.getQueryRuleAccess().getGroupByGroupByClauseParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QueryRule__OrderByAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryRuleAccess().getOrderByOrderByClauseParserRuleCall_3_0()); }
	ruleorderByClause{ after(grammarAccess.getQueryRuleAccess().getOrderByOrderByClauseParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectFrom__SAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectFromAccess().getSSelectClauseParserRuleCall_1_0()); }
	ruleselectClause{ after(grammarAccess.getSelectFromAccess().getSSelectClauseParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectFrom__FromAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectFromAccess().getFromFromClauseParserRuleCall_2_0()); }
	rulefromClause{ after(grammarAccess.getSelectFromAccess().getFromFromClauseParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectClause__SAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectClauseAccess().getSSelectedPropertiesListParserRuleCall_3_0_0()); }
	ruleselectedPropertiesList{ after(grammarAccess.getSelectClauseAccess().getSSelectedPropertiesListParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectClause__NAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectClauseAccess().getNNewExpressionParserRuleCall_3_1_0()); }
	rulenewExpression{ after(grammarAccess.getSelectClauseAccess().getNNewExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NewExpression__PAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewExpressionAccess().getPPathParserRuleCall_1_0()); }
	rulepath{ after(grammarAccess.getNewExpressionAccess().getPPathParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NewExpression__SAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewExpressionAccess().getSSelectedPropertiesListParserRuleCall_3_0()); }
	ruleselectedPropertiesList{ after(grammarAccess.getNewExpressionAccess().getSSelectedPropertiesListParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__FromRangeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClauseAccess().getFromRangeFromRangeParserRuleCall_1_0()); }
	rulefromRange{ after(grammarAccess.getFromClauseAccess().getFromRangeFromRangeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__FromJoinAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClauseAccess().getFromJoinFromJoinParserRuleCall_2_0_0()); }
	rulefromJoin{ after(grammarAccess.getFromClauseAccess().getFromJoinFromJoinParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromClause__FromRangeAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClauseAccess().getFromRangeFromRangeParserRuleCall_2_1_1_0()); }
	rulefromRange{ after(grammarAccess.getFromClauseAccess().getFromRangeFromRangeParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromJoin__WAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromJoinAccess().getWWithClauseParserRuleCall_4_0()); }
	rulewithClause{ after(grammarAccess.getFromJoinAccess().getWWithClauseParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WithClause__EAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWithClauseAccess().getEExpressionParserRuleCall_1_0()); }
	ruleexpression{ after(grammarAccess.getWithClauseAccess().getEExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromRange__AliasAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromRangeAccess().getAliasIdentifierParserRuleCall_1_0_0()); }
	ruleidentifier{ after(grammarAccess.getFromRangeAccess().getAliasIdentifierParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromRange__PAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromRangeAccess().getPPathParserRuleCall_1_2_0()); }
	rulepath{ after(grammarAccess.getFromRangeAccess().getPPathParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromRange__PAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromRangeAccess().getPPathParserRuleCall_2_2_0()); }
	rulepath{ after(grammarAccess.getFromRangeAccess().getPPathParserRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromRange__AliasAssignment_2_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromRangeAccess().getAliasIdentifierParserRuleCall_2_4_0()); }
	ruleidentifier{ after(grammarAccess.getFromRangeAccess().getAliasIdentifierParserRuleCall_2_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromClassOrOuterQueryPath__AsAliasAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClassOrOuterQueryPathAccess().getAsAliasAsAliasParserRuleCall_2_0()); }
	ruleasAlias{ after(grammarAccess.getFromClassOrOuterQueryPathAccess().getAsAliasAsAliasParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromClassOrOuterQueryPath__PropertyFetchAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromClassOrOuterQueryPathAccess().getPropertyFetchPropertyFetchParserRuleCall_3_0()); }
	rulepropertyFetch{ after(grammarAccess.getFromClassOrOuterQueryPathAccess().getPropertyFetchPropertyFetchParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InCollectionElementsDeclaration__AliasAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInCollectionElementsDeclarationAccess().getAliasIdentifierParserRuleCall_0_0()); }
	ruleidentifier{ after(grammarAccess.getInCollectionElementsDeclarationAccess().getAliasIdentifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InCollectionElementsDeclaration__PAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInCollectionElementsDeclarationAccess().getPPathParserRuleCall_3_0()); }
	rulepath{ after(grammarAccess.getInCollectionElementsDeclarationAccess().getPPathParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AsAlias__AliasAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsAliasAccess().getAliasIdentifierParserRuleCall_1_0()); }
	ruleidentifier{ after(grammarAccess.getAsAliasAccess().getAliasIdentifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByClause__EAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByClauseAccess().getEExpressionParserRuleCall_1_0()); }
	ruleexpression{ after(grammarAccess.getGroupByClauseAccess().getEExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByClause__EAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByClauseAccess().getEExpressionParserRuleCall_2_1_0()); }
	ruleexpression{ after(grammarAccess.getGroupByClauseAccess().getEExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByClause__HAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByClauseAccess().getHHavingClauseParserRuleCall_3_0()); }
	rulehavingClause{ after(grammarAccess.getGroupByClauseAccess().getHHavingClauseParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__OAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseAccess().getOOrderElementParserRuleCall_1_0()); }
	ruleorderElement{ after(grammarAccess.getOrderByClauseAccess().getOOrderElementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByClause__OAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByClauseAccess().getOOrderElementParserRuleCall_2_1_0()); }
	ruleorderElement{ after(grammarAccess.getOrderByClauseAccess().getOOrderElementParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HavingClause__EAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHavingClauseAccess().getEExpressionParserRuleCall_1_0()); }
	ruleexpression{ after(grammarAccess.getHavingClauseAccess().getEExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__EAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereClauseAccess().getEExpressionParserRuleCall_1_0()); }
	ruleexpression{ after(grammarAccess.getWhereClauseAccess().getEExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedPropertiesList__AAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedPropertiesListAccess().getAAliasedExpressionParserRuleCall_0_0()); }
	rulealiasedExpression{ after(grammarAccess.getSelectedPropertiesListAccess().getAAliasedExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedPropertiesList__AAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedPropertiesListAccess().getAAliasedExpressionParserRuleCall_1_1_0()); }
	rulealiasedExpression{ after(grammarAccess.getSelectedPropertiesListAccess().getAAliasedExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AliasedExpression__IdAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasedExpressionAccess().getIdIdentifierParserRuleCall_1_1_0()); }
	ruleidentifier{ after(grammarAccess.getAliasedExpressionAccess().getIdIdentifierParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__LAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getLLogicalAndExpressionParserRuleCall_0_0()); }
	rulelogicalAndExpression{ after(grammarAccess.getLogicalOrExpressionAccess().getLLogicalAndExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__LAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getLLogicalAndExpressionParserRuleCall_1_1_0()); }
	rulelogicalAndExpression{ after(grammarAccess.getLogicalOrExpressionAccess().getLLogicalAndExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__NAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getNNegatedExpressionParserRuleCall_0_0()); }
	rulenegatedExpression{ after(grammarAccess.getLogicalAndExpressionAccess().getNNegatedExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__NAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getNNegatedExpressionParserRuleCall_1_1_0()); }
	rulenegatedExpression{ after(grammarAccess.getLogicalAndExpressionAccess().getNNegatedExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegatedExpression__NAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegatedExpressionAccess().getNNegatedExpressionParserRuleCall_0_1_0()); }
	rulenegatedExpression{ after(grammarAccess.getNegatedExpressionAccess().getNNegatedExpressionParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__RAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRRelationalExpressionParserRuleCall_0_0()); }
	rulerelationalExpression{ after(grammarAccess.getEqualityExpressionAccess().getRRelationalExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__RAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRRelationalExpressionParserRuleCall_1_1_0()); }
	rulerelationalExpression{ after(grammarAccess.getEqualityExpressionAccess().getRRelationalExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__AAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getAAdditiveExpressionParserRuleCall_1_0_1_0()); }
	ruleadditiveExpression{ after(grammarAccess.getRelationalExpressionAccess().getAAdditiveExpressionParserRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__IAssignment_1_1_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getICompoundExprParserRuleCall_1_1_1_0_1_0()); }
	rulecompoundExpr{ after(grammarAccess.getRelationalExpressionAccess().getICompoundExprParserRuleCall_1_1_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__BAssignment_1_1_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getBBetweenListParserRuleCall_1_1_1_1_1_0()); }
	rulebetweenList{ after(grammarAccess.getRelationalExpressionAccess().getBBetweenListParserRuleCall_1_1_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__CAssignment_1_1_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getCConcatenationParserRuleCall_1_1_1_2_1_0()); }
	ruleconcatenation{ after(grammarAccess.getRelationalExpressionAccess().getCConcatenationParserRuleCall_1_1_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__LAssignment_1_1_1_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getLLikeEscapeParserRuleCall_1_1_1_2_2_0()); }
	rulelikeEscape{ after(grammarAccess.getRelationalExpressionAccess().getLLikeEscapeParserRuleCall_1_1_1_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__PAssignment_1_1_1_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getPPathParserRuleCall_1_1_1_3_2_0()); }
	rulepath{ after(grammarAccess.getRelationalExpressionAccess().getPPathParserRuleCall_1_1_1_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LikeEscape__CAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeEscapeAccess().getCConcatenationParserRuleCall_1_1_0()); }
	ruleconcatenation{ after(grammarAccess.getLikeEscapeAccess().getCConcatenationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BetweenList__CAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenListAccess().getCConcatenationParserRuleCall_0_0()); }
	ruleconcatenation{ after(grammarAccess.getBetweenListAccess().getCConcatenationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BetweenList__CAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenListAccess().getCConcatenationParserRuleCall_2_0()); }
	ruleconcatenation{ after(grammarAccess.getBetweenListAccess().getCConcatenationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Concatenation__AAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatenationAccess().getAAdditiveExpressionParserRuleCall_1_1_0()); }
	ruleadditiveExpression{ after(grammarAccess.getConcatenationAccess().getAAdditiveExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Concatenation__AAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatenationAccess().getAAdditiveExpressionParserRuleCall_1_2_1_0()); }
	ruleadditiveExpression{ after(grammarAccess.getConcatenationAccess().getAAdditiveExpressionParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__MAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getMMultiplyExpressionParserRuleCall_0_0()); }
	rulemultiplyExpression{ after(grammarAccess.getAdditiveExpressionAccess().getMMultiplyExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__MAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getMMultiplyExpressionParserRuleCall_1_1_0()); }
	rulemultiplyExpression{ after(grammarAccess.getAdditiveExpressionAccess().getMMultiplyExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyExpression__UAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyExpressionAccess().getUUnaryExpressionParserRuleCall_0_0()); }
	ruleunaryExpression{ after(grammarAccess.getMultiplyExpressionAccess().getUUnaryExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyExpression__UAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyExpressionAccess().getUUnaryExpressionParserRuleCall_1_1_0()); }
	ruleunaryExpression{ after(grammarAccess.getMultiplyExpressionAccess().getUUnaryExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__UAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getUUnaryExpressionParserRuleCall_0_1_0()); }
	ruleunaryExpression{ after(grammarAccess.getUnaryExpressionAccess().getUUnaryExpressionParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__UAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getUUnaryExpressionParserRuleCall_1_1_0()); }
	ruleunaryExpression{ after(grammarAccess.getUnaryExpressionAccess().getUUnaryExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__WAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getWWhenClauseParserRuleCall_0_1_0()); }
	rulewhenClause{ after(grammarAccess.getCaseExpressionAccess().getWWhenClauseParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__EAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getEElseClauseParserRuleCall_0_2_0()); }
	ruleelseClause{ after(grammarAccess.getCaseExpressionAccess().getEElseClauseParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__UAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getUUnaryExpressionParserRuleCall_1_1_0()); }
	ruleunaryExpression{ after(grammarAccess.getCaseExpressionAccess().getUUnaryExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__AAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getAAltWhenClauseParserRuleCall_1_2_0()); }
	rulealtWhenClause{ after(grammarAccess.getCaseExpressionAccess().getAAltWhenClauseParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__EAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getEElseClauseParserRuleCall_1_3_0()); }
	ruleelseClause{ after(grammarAccess.getCaseExpressionAccess().getEElseClauseParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhenClause__WhenExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhenClauseAccess().getWhenExprExpressionParserRuleCall_1_0()); }
	ruleexpression{ after(grammarAccess.getWhenClauseAccess().getWhenExprExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhenClause__ThenExprAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhenClauseAccess().getThenExprUnaryExpressionParserRuleCall_3_0()); }
	ruleunaryExpression{ after(grammarAccess.getWhenClauseAccess().getThenExprUnaryExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AltWhenClause__WAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAltWhenClauseAccess().getWUnaryExpressionParserRuleCall_1_0()); }
	ruleunaryExpression{ after(grammarAccess.getAltWhenClauseAccess().getWUnaryExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AltWhenClause__TAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAltWhenClauseAccess().getTUnaryExpressionParserRuleCall_3_0()); }
	ruleunaryExpression{ after(grammarAccess.getAltWhenClauseAccess().getTUnaryExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElseClause__UAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseClauseAccess().getUUnaryExpressionParserRuleCall_1_0()); }
	ruleunaryExpression{ after(grammarAccess.getElseClauseAccess().getUUnaryExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantifiedExpression__SAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantifiedExpressionAccess().getSUnionRuleParserRuleCall_2_2_1_0()); }
	ruleunionRule{ after(grammarAccess.getQuantifiedExpressionAccess().getSUnionRuleParserRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__EAssignment_1_0_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getEExprListParserRuleCall_1_0_2_1_0()); }
	ruleexprList{ after(grammarAccess.getAtomAccess().getEExprListParserRuleCall_1_0_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__ExpAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getExpExpressionParserRuleCall_1_1_1_0()); }
	ruleexpression{ after(grammarAccess.getAtomAccess().getExpExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__IdentAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getIdentIdentPrimaryParserRuleCall_0_1_0()); }
	ruleidentPrimary{ after(grammarAccess.getPrimaryExpressionAccess().getIdentIdentPrimaryParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__SAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getSUnionRuleParserRuleCall_3_1_1_0()); }
	ruleunionRule{ after(grammarAccess.getPrimaryExpressionAccess().getSUnionRuleParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionOrVector__VAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionOrVectorAccess().getVVectorExprParserRuleCall_1_0()); }
	rulevectorExpr{ after(grammarAccess.getExpressionOrVectorAccess().getVVectorExprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VectorExpr__EAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorExprAccess().getEExpressionParserRuleCall_1_0()); }
	ruleexpression{ after(grammarAccess.getVectorExprAccess().getEExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VectorExpr__EAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorExprAccess().getEExpressionParserRuleCall_2_1_0()); }
	ruleexpression{ after(grammarAccess.getVectorExprAccess().getEExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdentPrimary__EAssignment_0_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentPrimaryAccess().getEExprListParserRuleCall_0_3_1_0()); }
	ruleexprList{ after(grammarAccess.getIdentPrimaryAccess().getEExprListParserRuleCall_0_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Aggregate__AAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getAAdditiveExpressionParserRuleCall_0_3_0()); }
	ruleadditiveExpression{ after(grammarAccess.getAggregateAccess().getAAdditiveExpressionParserRuleCall_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundExpr__EAssignment_2_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundExprAccess().getEExpressionParserRuleCall_2_1_0_0_0()); }
	ruleexpression{ after(grammarAccess.getCompoundExprAccess().getEExpressionParserRuleCall_2_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundExpr__EAssignment_2_1_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundExprAccess().getEExpressionParserRuleCall_2_1_0_1_1_0()); }
	ruleexpression{ after(grammarAccess.getCompoundExprAccess().getEExpressionParserRuleCall_2_1_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundExpr__SAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundExprAccess().getSUnionRuleParserRuleCall_2_1_1_0()); }
	ruleunionRule{ after(grammarAccess.getCompoundExprAccess().getSUnionRuleParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprList__EAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_0_0_0()); }
	ruleexpression{ after(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprList__EAssignment_1_0_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_0_1_0_1_0()); }
	ruleexpression{ after(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_0_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprList__EAssignment_1_0_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_0_1_1_1_0()); }
	ruleexpression{ after(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_0_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprList__IdAssignment_1_0_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprListAccess().getIdIdentifierParserRuleCall_1_0_1_2_1_0()); }
	ruleidentifier{ after(grammarAccess.getExprListAccess().getIdIdentifierParserRuleCall_1_0_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExprList__EAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_1_1_0()); }
	ruleexpression{ after(grammarAccess.getExprListAccess().getEExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_LINEBREAK : ('\n'|'\r' '\n'|'\r');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_SIGNED_INT : ('-'|'+') RULE_INT;

RULE_HEX : '0x' ('0'..'9'|'a'..'f')+;

RULE_INT : ('0'..'9')+;

RULE_FIELDCOMMENT : ';' ~(('\n'|'\r'))*;

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r' '\n'|'\n'|'\r');

RULE_STRING : ('"' ('\\' '"'|~('"'))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');


